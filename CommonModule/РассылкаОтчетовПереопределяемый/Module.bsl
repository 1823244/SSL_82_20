////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (сервер, переопределяемый)
// 
// Выполняется на клиенте, изменяется под специфику прикладной конфигурации, 
// но предназначен для использования только данной подсистемой.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Механизмы расширения

// Позволяет изменить форматы по умолчанию и установить картинки
// 
// Параметры:
//   СписокФорматов - (СписокЗначений) список форматов
//       |- Значение      - (ПеречислениеСсылка.ФорматыСохраненияОтчетов) Формат
//       |- Представление - (Строка) Представление формата
//       |- Пометка       - (Булево) Признак того, что формат используется по умолчанию
//       |- Картинка      - (Картинка) Картинка формата
//
// Изменить настройки формата можно при помощи процедуры "РассылкаОтчетов.УстановитьПараметрыФормата":
//  
// РассылкаОтчетов.УстановитьПараметрыФормата(СписокФорматов, ФорматСсылка, Картинка, ИспользоватьПоУмолчанию);
//   Обязательные параметры:
//       |- СписокФорматов (...) Передается из параметров процедуры "как есть"
//       |- ФорматСсылка   (Строка, ПеречислениеСсылка.ФорматыСохраненияОтчетов) Формат
//   Необязательные параметры:
//       |- Картинка                (Картинка) Картинка формата
//       |- ИспользоватьПоУмолчанию (Булево)   Признак того, что формат используется по умолчанию.
//
// Например:
//
//	РассылкаОтчетов.УстановитьПараметрыФормата(СписокФорматов, "HTML4", , Ложь);
//	РассылкаОтчетов.УстановитьПараметрыФормата(СписокФорматов, "XLS"  , , Истина);
//
// Пример использования - см. РассылкаОтчетовПовтИсп.СписокФорматов():
//
Процедура ПереопределитьПараметрыФорматов(СписокФорматов) Экспорт
	
	
	
КонецПроцедуры

// Позволяет добавить описание кросс объектной связи типов для получателей рассылки.
// 
// Использовать данный механизм требуется только в том случае, если:
// 1. Требуется описать и представить несколько типов как один (как в справочнике Пользователи и Группы пользователей).
// 2. Требуется изменить представление типа без изменения синонима метаданных.
// 3. Требуется указать вид контактной информации E-Mail по умолчанию.
// 4. Требуется определить группу контактной информации.
//
// Зарегистрировать тип можно при помощи процедуры:
//  
// РассылкаОтчетов.ДобавитьЭлементВТаблицуТиповПолучателей(ТаблицаТипов, ДоступныеТипы, Настройки);
//   Параметры:
//       ТаблицаТипов (ТаблицаЗначений) - Не меняется
//       ДоступныеТипы         (Массив) - Не меняется
//       Настройки          (Структура) - Предустановленные настройки основного типа
//         Обязательные параметры:
//           |- ОсновнойТип       - (Тип) Тип, который будет выступать как основной для 
//                                  описываемых получателей
//         Необязательные параметры:
//           |- ДополнительныйТип - (Тип) Дополнительный тип для описываемых получателей
//           |- Представление     - (Строка) Представление получателей
//           |- ВидКИ             - (СправочникСсылка.ВидыКонтактнойИнформации) Основной 
//                                  вид или группа контактной информации E-Mail
//           |- ПутьФормыВыбора   - (Строка) Путь к форме выбора
//
// Например:
//
//	РассылкаОтчетов.ДобавитьЭлементВТаблицуТиповПолучателей(ТаблицаТипов, ДоступныеТипы, 
//		Новый Структура("ОсновнойТип, ВидКИ", 
//			Тип("СправочникСсылка.Контрагенты"), Справочники.ВидыКонтактнойИнформации.EmailКонтрагента
//		)
//	);
//
// Пример использования - см. РассылкаОтчетовПовтИсп.ТаблицаТиповПолучателей():
//
Процедура ПереопределитьТаблицуТиповПолучателей(ТаблицаТипов, ДоступныеТипы) Экспорт
	
	
КонецПроцедуры

// Позволяет определить свой обработчик для сохранения табличного документа в формат
// 
// Параметры:
//   СтандартнаяОбработка - (Булево) Признак использования стандартных механизом подсистемы для сохранения в формат
//   ТабличныйДокумент    - (...)    Исходный табличный документ, который неоходимо сохранить
//   Формат - (ПеречислениеСсылка.ФорматыСохраненияОтчетов) Формат, в котором предполагается сохранение
//   ПолноеИмяФайла       - (Строка) Полное имя файла, передается БЕЗ расширения, если 
//
// Если используется нестандартная обработка (СтандартнаяОбработка меняется на Ложь), то 
//   ПолноеИмяФайла должно содержать полное имя файла с расширением
//
// Например:
//	
//	Если Формат = Перечисления.ФорматыСохраненияОтчетов.HTML4 Тогда
//		СтандартнаяОбработка = Ложь;
//		ПолноеИмяФайла = ПолноеИмяФайла +".html";
//		ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.HTML4);
//	КонецЕсли;
// 
Процедура ПередСохранениемТабличногоДокументаВФормат(СтандартнаяОбработка, ТабличныйДокумент, Формат, ПолноеИмяФайла) Экспорт
	
	
	
КонецПроцедуры

// Позволяет определить свой обработчик разузлования списка получателей
// 
// Параметры:
//   ПараметрыПолучателей - (Структура) Параметры разузлования получателей рассылки
//   Запрос               - (Запрос) Запрос, который будет использован, если значение параметра СтандартнаяОбработка останется Истина
//   СтандартнаяОбработка - (Булево) Признак использования стандартных механизмов
//   Результат       - (Соответствие) Получатели с их E-mail адресами
//       |- Ключ     - (СправочникСсылка.*) Получатель
//       |- Значение - (Строка) Набор E-mail адресов в строке с разделителями
// 
Процедура ПередФормированиемСпискаПолучателейРассылки(ПараметрыПолучателей, Запрос, СтандартнаяОбработка, Результат) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Опциональные связи с другими подсистемами

// Если подсистема "Дополнительные отчеты и обработки" недоступна, то содержимое
//   процедуры необходимо удалить или закомментировать.
//   Обработка исключений производится управляющим кодом.
// 
// Параметры:
//   ДопОтчет        (СправочникСсылка.ДополнительныеОтчетыИОбработки) Отчет, который необходимо инициализировать
//   ПараметрыОтчета (Структура) Набор параметров, получаемый в процессе проверки и подключения отчета
//                               см. описание функции "ИнициализироватьОтчет" модуля "РассылкаОтчетов"
//   Результат       (Булево, Неопределено)
//     |- Истина       - Удалось подключить дополнительный отчет
//     |- Ложь         - Не удалось подключить дополнительный отчет
//     |- Неопределено - По умолчанию. Подсистема доп. отчетов недоступна.
//
Процедура ПодключитьДополнительныйОтчет(ДопОтчет, ПараметрыОтчета, Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Если ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ПараметрыОтчета.Имя = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОтчет);
		ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
		ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
		
		Результат = Истина;
		
	Иначе
		
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент %1 не является дополнительным отчетом'"), 
			"'"+ Строка(ДопОтчет) +"'"
		);
		
		Результат = Ложь;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Если подсистема "Работа с файлами" недоступна, то содержимое процедуры
//   необходимо удалить или закомментировать, 
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура ВыполнитьДоставкуВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Метаданные.Справочники.Файлы.Реквизиты.ПолноеНаименование.Тип);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	// Постоянные переменные
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассылка отчетов %1 от %2'"),
		"'"+ ПараметрыДоставки.Рассылка +"'",
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT")
	);
	ХранитьВерсии = Истина;
	ЭтоВебКлиент = Ложь;
	АдресВременногоХранилищаТекста = "";
	Пользователь = Пользователи.ТекущийПользователь();
	ЗаписатьВИсторию = Истина;
	ВладелецФайла = ПараметрыДоставки.Папка;
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		// Временные переменные
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		ВремяИзменения              = Вложение.Файл.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = Вложение.Файл.ПолучитьУниверсальноеВремяИзменения();
		Размер                      = Вложение.Файл.Размер();
		РасширениеБезТочки          = СтрЗаменить(Вложение.Файл.Расширение, ".", "");
		ИмяБезРасширения            = Вложение.ИмяФайлаБезРасширения;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			РаботаСФайламиВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Вложение.ФайлСсылка, 
				ИмяБезРасширения, 
				Размер, 
				РасширениеБезТочки, 
				АдресВременногоХранилищаФайла, 
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь
			);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				РасширениеБезТочки,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь,
				Комментарий,
				ЗаписатьВИсторию
			);
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() +"#"+ ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка)
			);
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЦикла;
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Если подсистемы "Управление доступом" или "Работа с файлами" недоступны, то
//   содержимое процедуры необходимо удалить или закомментировать, 
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура ПравоИзмененияПапкиИФайлов(Папка, Результат) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Результат = УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ИзменениеПапокИФайлов", Папка);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Если подсистема "Получение файлов из Интернета" недоступна, то содержимое
//   процедуры необходимо удалить или закомментировать, 
// 
Процедура НастройкиПроксиНаСервере(Прокси) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		ЗаполнитьЗначенияСвойств(Прокси, НастройкаПроксиСервера);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
	
КонецПроцедуры
