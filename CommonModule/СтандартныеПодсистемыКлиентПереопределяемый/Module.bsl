////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Соответствует обработчику ПриНачалеРаботыСистемы
//
// Параметры
//  ОбрабатыватьПараметрыЗапуска - Булево - Истина, если обработчик вызван при 
//  непосредсвенном входе пользователя в систему и должен обработать параметры
//  запуска (если это предусмотрено его логикой). Иначе обработчика вызван
//  при интерактивном входе неразделенного пользователя в область данных и
//  обрабатывать параметры запуска не следует.
//
Процедура ПриНачалеРаботыСистемы(Знач ОбрабатыватьПараметрыЗапуска = Ложь) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ПервыйЗапуск() Тогда
		
		ОбщегоНазначения.УстановитьПараметрыРазделенияИнформационныйБазы(Ложь);
		
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
	
	// СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	Если НЕ ПроверкаЛегальностиПолученияОбновленияКлиент.ПодтвердитьЛегальностьПолученияОбновления() Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	
	// СтандартныеПодсистемы.ОбменДанными
	Если НЕ ОбменДаннымиКлиент.ПроверитьЗагрузкуСообщенияОбменаСИзменениямиКонфигурацииДляПодчиненногоУзла() Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	
	ОбновлениеИнформационнойБазыКлиент.ПоказатьОписаниеИзмененийСистемы();
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// отработка параметров запуска системы
	Если ОбрабатыватьПараметрыЗапуска Тогда
		Если ОбработатьПараметрыЗапуска() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	// Прим.: подсистема КонтрольДинамическогоОбновленияКонфигурации
	//        должна настраиваться после подсистемы РегламентныеЗадания, т.к. в режиме запуска отдельного
	//        сеанса обработки регламентных заданий, управление не будет и не должно быть передано далее.
	РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.КонтрольДинамическогоОбновленияКонфигурации
	КонтрольДинамическогоОбновленияКонфигурацииКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.КонтрольДинамическогоОбновленияКонфигурации
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	НапоминанияПользователяКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.НапоминанияПользователя
	
КонецПроцедуры

// Обработать параметр запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ПараметрЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//                              с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска()

	Перем Результат;
	
	Результат = Ложь;
	
	// СтандартныеПодсистемы
	
	// Есть ли параметры запуска
	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

	// Конец СтандартныеПодсистемы
	
	// Код конфигурации
	// ...
	// Конец кода конфигурации

	
	// СтандартныеПодсистемы
	Возврат Результат;
	// Конец СтандартныеПодсистемы

КонецФункции

// Выполняется перед интерактивном началом работы пользователя с областью данных.
// Соответствует обработчику ПередНачаломРаботыСистемы
//
// Параметры:
// Отказ - Булево - отказ в от начала работы. Если параметр установить в Истина,
// начало работы с областью осуществлено не будет.
//
Процедура ПередНачаломРаботыСистемы(Отказ) Экспорт
	
	// СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.Пользователи
	ОшибкаАвторизации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ОшибкаАвторизации;
	Если ЗначениеЗаполнено(ОшибкаАвторизации) Тогда
		Предупреждение(ОшибкаАвторизации);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Пользователи
	
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
	ВерсияАктуальна = СтандартныеПодсистемыКлиент.ПроверитьВерсиюПлатформыПриЗапуске("ПередНачаломРаботы");
	Если Не ВерсияАктуальна Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБКлиент.ПередНачаломРаботыСистемы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Отказ = НЕ ОбновлениеИнформационнойБазыКлиент.ВозможноВыполнитьОбновлениеИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

// Соответствует обработчику ПередЗавершениемРаботыСистемы
//
Процедура ПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		СтандартныеПодсистемыКлиент.ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// БазоваяФункциональность
//

// Вызывается при завершении работы системы, чтобы запросить список предупреждений,
// выводимых пользователю.
//
// Параметры:
//	Предупреждения - Массив - список предупреждений. Элемент массива - Структура с полями:
//		ТекстФлажка - Строка - текст флажка.
//		ПоясняющийТекст - Строка - текст, выводимый в форме сверху управляющего элемента (флажок или гиперссылка).
//		ДействиеПриУстановленномФлажке - Структура с полями:
//			Форма - путь к открываемой форме.
//			ПараметрыФормы - произвольная структура параметров формы Форма. 
//		ТекстГиперссылки - Строка - текст гипперссылки.
//		ДействиеПриНажатииГипперссылки - Структура с полями:
//			Форма - Строка - путь к форме, которая должна открываться по нажатию на гиперссылку.
//			ПараметрыФормы - Структура - произвольная структура параметров для вышеописанной формы.
//			ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу вместо 
//				универсальной формы в случае, когда в списке предупреждений оказывется только одно данное предупреждение.
//			ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура параметров для вышеописанной формы.
//
Процедура ПолучитьСписокПредупреждений(Предупреждения) Экспорт
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);	
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
   
КонецПроцедуры

// Вызывается при необходимости открыть форму списка активных пользователей,
// которые в данный момент времени работают с системой.
//
// Пример реализации:
// - при внедрении подсистемы "Завершение работы пользователей" можно использовать форму обработки АктивныеПользователи:
//   ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
//
Процедура ОткрытьСписокАктивныхПользователей() Экспорт
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
КонецПроцедуры

// Вызывается при необходимости определить минимально необходимую версию платформы для запуска.
//
//
// Параметры: ПараметрыПроверки - ФиксированнаяСтруктура - список полей совпадает со списком параметров 
//															функции СтандартныеПодсистемыКлиент.ПроверитьВерсиюПлатформы().			
//							
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
	
		
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные
//

// Выдает пользователю вопрос об обновлении из общих данных.
// В случае утвердительного ответа, возвращает Истина.
//
Функция ОбновитьЭлементИзОбщихДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Возврат ПоставляемыеДанныеКлиентСервер.ОбновитьЭлементИзОбщихДанных(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецФункции

// Выдает пользователю вопрос об отказе от обновлении из общих данных.
// В случае утвердительного ответа, изменяет состояние объекта.
//
Процедура ИзменитьРазделенныйЭлемент(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанныеКлиентСервер.ИзменитьРазделенныйЭлемент(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

Функция ИмяФормыВыбораКлассификатораВалют() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	Возврат "Справочник.КлассификаторВалют.ФормаВыбора";
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Валюты (в модели сервиса)"" не доступна'"))
	
КонецФункции
