////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Не предназначена для прямого вызова из клиентского кода.
// Вместо нее следует использовать одноименную функцию из 
// модуля СтандартныеПодсистемыКлиентПовтИсп.
//
// Реализация:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента при запуске.
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	Если НЕ ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы
	
	// Для установки параметров инициализации системы можно использовать шаблон:
	//
	// Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
	//
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Не предназначена для прямого вызова из клиентского кода. 
// Вместо нее следует использовать одноименную функцию из 
// модуля СтандартныеПодсистемыКлиентПовтИсп.
//
// Реализация:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
// Возвращаемое значение:
//   Структура - структура параметров работы клиента.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	
	// СтандартныеПодсистемы
	ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	// Конец СтандартныеПодсистемы
	
	// Для установки параметров инициализации системы можно использовать шаблон:
	//
	// Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
	//
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) 
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Если НЕ СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБ.ПроверитьБлокировкуСоединенийОбластиДанных(Параметры);
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) 
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Взаимодействия
	Параметры.Вставить("ИспользоватьПочтовыйКлиент", ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент"));
	Параметры.Вставить("ИспользоватьПрочиеВзаимодействия", ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"));
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	Параметры.Вставить("ПараметрыБлокировкиСеансов", Новый ФиксированнаяСтруктура(СоединенияИБ.ПараметрыБлокировкиСеансов()));
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	Параметры.Вставить("ПервыйЗапуск", ОбновлениеИнформационнойБазы.ПервыйЗапуск());
	Параметры.Вставить("ПервыйВходВОбластьДанных", ОбновлениеИнформационнойБазы.ПервыйВходВОбластьДанных());
	Параметры.Вставить("ЭтоГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	Параметры.Вставить("НастройкиОбновления", 
		Новый ФиксированнаяСтруктура(ОбновлениеКонфигурации.ПолучитьНастройкиОбновления()));
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	Параметры.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.ПолучитьНастройкуПроксиСервера());
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.ФайловыеФункции
	Параметры.Вставить("ПерсональныеНастройкиРаботыСФайлами",
		Новый ФиксированнаяСтруктура(ФайловыеФункции.ПолучитьПерсональныеНастройкиРаботыСФайлами()));
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	Параметры.Вставить("ПерсональныеНастройкиРаботыСЭЦП",
		Новый ФиксированнаяСтруктура(ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер()));
	// Конец СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Параметры.Вставить("ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий", 
			Новый ФиксированнаяСтруктура(РегламентныеЗаданияСервер.ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Истина)));
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Параметры.Вставить("УпрощенныйИнтерфейсНастройкиПравДоступа", УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа());
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	Параметры.Вставить("ПараметрыРезервногоКопированияИБ", РезервноеКопированиеИБСервер.ПолучитьНастройкиРезервногоКопирования());
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	Параметры.Вставить("НастройкиНапоминаний", 
		Новый ФиксированнаяСтруктура(НапоминанияПользователяСервер.ПолучитьНастройкиНапоминаний()));
	// Конец СтандартныеПодсистемы.НапоминанияПользователя

КонецПроцедуры

// Процедура осуществляет копирование общих данных в разделенные
//
Процедура ПодобратьПоставляемыеДанныеИзКлассификатора(Знач Ссылки, Знач ИгнорироватьРучноеИзменение = Ложь) Экспорт

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ПодобратьИзКлассификатора(Ссылки, ИгнорироватьРучноеИзменение);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

