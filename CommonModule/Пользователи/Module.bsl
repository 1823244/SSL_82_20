////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает текущего пользователя или текущего внешнего пользователя,
// соответствующего пользователю информационной базы,
// который авторизовался в 1С:Предприятии 8.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийВнешнийПользователь);
	
КонецФункции

// Возвращает текущего обычного пользователя,
// соответствующего пользователю информационной базы,
// который авторизовался в 1С:Предприятии 8.
//
//  Если авторизованному пользователю информационной базы
// соответствует внешний пользователь, тогда возвращается пустая ссылка.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи
//
Функция ТекущийПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при непустом списке пользователей информационной базы:
// - в локальном режиме работы (без разделения данных) имеет роль ПолныеПрава и
//   роль для администрирования системы,
// - в модели сервиса (с разделением данных) имеет роль ПолныеПрава;
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ.
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда
//                 проверяется наличие роли для администрирования системы.
//                 Начальное значение: Ложь.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда
//                 функция возвращает Истина, когда установлен привилегированный режим.
//                 Начальное значение: Истина.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежим() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	Иначе
		// Задан не текущий пользователь
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор <> ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверятьПраваАдминистрированияСистемы Тогда
			Возврат ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы())
		Иначе
			Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			
			// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
			// а роли в текущем сеансе.
			Если ПроверятьПраваАдминистрированияСистемы Тогда
				Возврат РольДоступна(РольАдминистратораСистемы())
			Иначе
				Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)
			КонецЕсли;
		Иначе
			// Для неуказанного пользователя ИБ проверяется основная роль конфигурации:
			// должна быть роль ПолныеПрава или не указана (привилегированный режим).
			Если Метаданные.ОсновнаяРоль = Неопределено ИЛИ
				 Метаданные.ОсновнаяРоль = Метаданные.Роли.ПолныеПрава Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает доступность хотя бы одной из указанных ролей или полноправность
// пользователя (текущего или указанного).
//
// Параметры:
//  ИменаРолей   - Строка - имена ролей, разделенные запятыми, доступность которых проверяется.
//
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ;
//                 СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи - осуществляется поиск
//                    пользователя ИБ по уникальному идентификатору,
//                    заданному в реквизите ИдентификаторПользователяИБ
//                    Прим.: если пользователь ИБ не найден, возвращается Ложь.
//                 ПользовательИнформационнойБазы - проверяется указанный
//                    пользователь ИБ
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из указанных ролей доступна,
//           или функция ЭтоПолноправныйПользователь(Пользователь) возвращает Истина.
//
Функция РолиДоступны(Знач ИменаРолей, Пользователь = Неопределено) Экспорт
	
	Если ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено ИЛИ Пользователь = АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		
	ИначеЕсли ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	Иначе
		// Указан не текущий пользователь.
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Пользователь, "ИдентификаторПользователяИБ"));
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УказанТекущийПользовательИБ = ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивИменРолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРолей);
	Для каждого ИмяРоли Из МассивИменРолей Цикл
		
		Если УказанТекущийПользовательИБ Тогда
			Если РольДоступна(СокрЛП(ИмяРоли)) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.Найти(СокрЛП(ИмяРоли))) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Используется при обновлении и начальном заполнении информационной базы.
// 1) Создает первого администратора и связывает его с новым или существующим
//    пользователем в справочнике Пользователи.
// 2) Связывает администратора, указанного в параметре УчетнаяЗапись с новым или
//    существующим пользователем в справочнике Пользователи.
//
// Параметры:
//  УчетнаяЗапись - ПользовательИнформационнойБазы - используется, когда нужно связать
//                  существующего администратора с новым или существующим пользователем
//                  в справочнике Пользователи.
//
// Возвращаемое значение:
//  Неопределено                  - пользователь, связанный с пользователем ИБ с административными
//                                  правами уже существует.
//  СправочникСсылка.Пользователи - пользователь, который был связан с первым администратором или
//                                  администратором, указанным в параметре УчетнаяЗапись.
//
Функция СоздатьПервогоАдминистратора(УчетнаяЗапись = Неопределено) Экспорт
	
	// Добавление администратора (администратор системы - полные права).
	Если УчетнаяЗапись = Неопределено Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Если существует пользователь с правом администрирование,
		// тогда первый администратор уже создан и его не требуется создавать.
		УчетнаяЗапись = Неопределено;
	
		УстановитьПривилегированныйРежим(Истина);
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		УстановитьПривилегированныйРежим(Ложь);
		Для каждого ПользовательИБ Из ПользователиИБ Цикл
			Если ЭтоПолноправныйПользователь(ПользовательИБ) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если УчетнаяЗапись = Неопределено Тогда
			УстановитьПривилегированныйРежим(Истина);
			УчетнаяЗапись = ПользователиИнформационнойБазы.СоздатьПользователя();
			УчетнаяЗапись.Имя       = "Администратор";
			УчетнаяЗапись.ПолноеИмя = УчетнаяЗапись.Имя;
			УчетнаяЗапись.Роли.Очистить();
			УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				РольАдминистратораСистемы = РольАдминистратораСистемы();
				Если НЕ УчетнаяЗапись.Роли.Содержит(РольАдминистратораСистемы) Тогда
					УчетнаяЗапись.Роли.Добавить(РольАдминистратораСистемы);
				КонецЕсли;
			КонецЕсли;
			УчетнаяЗапись.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	Иначе
		НайтиНеоднозначныхПользователейИБ(, УчетнаяЗапись.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(УчетнаяЗапись.УникальныйИдентификатор) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", УчетнаяЗапись.УникальныйИдентификатор);
		// Если администратор связан с внешним пользователем - это ошибка, требуется очистить связь
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			ВнешнийПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", УчетнаяЗапись.УникальныйИдентификатор);
			ВнешнийПользовательОбъект = ВнешнийПользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(УчетнаяЗапись.ПолноеИмя);
		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> УчетнаяЗапись.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан = Истина;
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		ПользовательСоздан = Ложь;
	КонецЕсли;
	Пользователь.ИдентификаторПользователяИБ = УчетнаяЗапись.УникальныйИдентификатор;
	Пользователь.Наименование = УчетнаяЗапись.ПолноеИмя;
	Пользователь.ОбменДанными.Загрузка = Истина;
	Пользователь.Записать();
	Если ПользовательСоздан Тогда
		ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	КонецЕсли;
	
	ПользователиПереопределяемый.ПриЗаписиПервогоАдминистратора(Пользователь.Ссылка);
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

// Возвращает роль, предоставляющую права администрирования системы.
//
// Возвращаемое значение:
//  ОбъектМетаданных: Роль.
//
Функция РольАдминистратораСистемы() Экспорт
	
	РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
	
	Если СтандартныеПодсистемыПереопределяемый.ЭтоБазоваяВерсияКонфигурации() Тогда
		РольАдминистратораСистемы = Метаданные.Роли.ПолныеПрава;
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьРольАдминистратораСистемы(РольАдминистратораСистемы);
	
	Возврат РольАдминистратораСистемы;
	
КонецФункции

// Возвращает пользователя справочника Пользователи, соответствующего пользователю ИБ с указанным именем.
//  Для поиска любого пользователя требуются административные права.
//  Если административных прав нет, допустимо искать только пользователя для текущего пользователя ИБ.
// 
// Параметры:
//  ИмяПользователя - Строка - имя пользователя информационной базы
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи           - если пользователь найден.
//  Справочники.Пользователи.ПустаяСсылка() - если пользователь ИБ найден.
//  Неопределено                            - если пользователь ИБ не найден.
//
Функция НайтиПоИмени(знач ИмяПользователяИБ) Экспорт
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		НайтиНеоднозначныхПользователейИБ(, ПользовательИБ.УникальныйИдентификатор);
		Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

// Возвращает список пользователей, групп пользователей, внешних пользователей и групп внешних пользователей
// не помеченных на удаление.
//  Используется в обработчиках событий ОкончаниеВводаТекста и АвтоПодбор.
//
// Параметры:
//  Текст         - Строка, символы введенные пользователем.
//
//  ВключаяГруппы - Булево, если Истина, включать группы пользователей и внешних пользователей.
//                  Если ФО ИспользоватьГруппыПользователей отключена, параметр игнорируется.
//
//  ВключаяВнешнихПользователей - Неопределено, Булево, когда Неопределено, используется значение,
//                  возвращаемое функцией ВнешниеПользователи.ИспользоватьВнешнихПользователей().
//
//  БезПользователей - Булево, если Истина, то элементы справочника Пользователи исключаются из результата.
//
Функция СформироватьДанныеВыбораПользователя(Знач Текст, Знач ВключаяГруппы = Истина, Знач ВключаяВнешнихПользователей = Неопределено, БезПользователей = Ложь) Экспорт
	
	ВключаяГруппы = ВключаяГруппы И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ВключаяГруппы", ВключаяГруппы);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Ссылка,
	|	"""" КАК Наименование,
	|	-1 КАК НомерКартинки
	|ГДЕ
	|	ЛОЖЬ";
	
	Если НЕ БезПользователей Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " +
		"ВЫБРАТЬ
		|	Пользователи.Ссылка,
		|	Пользователи.Наименование,
		|	ВЫБОР
		|		КОГДА Пользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
		|			ТОГДА 4
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК НомерКартинки
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	(НЕ Пользователи.ПометкаУдаления)
		|	И Пользователи.Наименование ПОДОБНО &Текст
		|	И Пользователи.Недействителен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыПользователей.Ссылка,
		|	ГруппыПользователей.Наименование,
		|	3
		|ИЗ
		|	Справочник.ГруппыПользователей КАК ГруппыПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И (НЕ ГруппыПользователей.ПометкаУдаления)
		|	И ГруппыПользователей.Наименование ПОДОБНО &Текст";
	КонецЕсли;
	
	Если ТипЗнч(ВключаяВнешнихПользователей) <> Тип("Булево") Тогда
		ВключаяВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	КонецЕсли;
	ВключаяВнешнихПользователей = ВключаяВнешнихПользователей И ПравоДоступа("Чтение", Метаданные.Справочники.ВнешниеПользователи);
	
	Если ВключаяВнешнихПользователей Тогда
		Запрос.Текст = Запрос.Текст + " ОБЪЕДИНИТЬ ВСЕ " +
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.Наименование,
		|	ВЫБОР
		|		КОГДА ВнешниеПользователи.ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
		|			ТОГДА 10
		|		ИНАЧЕ 7
		|	КОНЕЦ КАК НомерКартинки
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	(НЕ ВнешниеПользователи.ПометкаУдаления)
		|	И ВнешниеПользователи.Наименование ПОДОБНО &Текст
		|	И ВнешниеПользователи.Недействителен = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка,
		|	ГруппыВнешнихПользователей.Наименование,
		|	9
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	&ВключаяГруппы
		|	И (НЕ ГруппыВнешнихПользователей.ПометкаУдаления)
		|	И ГруппыВнешнихПользователей.Наименование ПОДОБНО &Текст";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование, , БиблиотекаКартинок["СостояниеПользователя" + Формат(Выборка.НомерКартинки + 1, "ЧЦ=2; ЧВН=; ЧГ=")]);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Процедура ЗаполнитьНомераКартинокПользователей заполняет номера картинок
// пользователей, групп пользователей, внешних пользователей и групп внешних пользователей.
// 
// Параметры:
//  Таблица      - ДанныеФормыКоллекция, ДанныеФормыДерево.
//  ИмяПоляПользователь - Строка, имя поля содержащего ссылку на пользователя, группу пользователей,
//                 внешнего пользователя или группу внешних пользователей.
//  ИмяПоляНомераКартинки - Строка, имя поля содержащего номер картинки, который нужно установить.
//  ИдентификаторСтроки  - Неопределено, Число, идентификатор строки (не порядковый номер),
//                 когда Неопределено, заполнить картинки для всех строк таблицы.
//
Процедура ЗаполнитьНомераКартинокПользователей(Знач Таблица, Знач ИмяПоляПользователь, Знач ИмяПоляНомераКартинки, Знач ИдентификаторСтроки = Неопределено, Знач ОбработатьИерархиюВторогоИТретьегоУровней = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		МассивСтрок = Неопределено;
	Иначе
		ВыбраннаяСтрока = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ВыбраннаяСтрока);
	КонецЕсли;
	
	Если ТипЗнч(Таблица) = Тип("ДанныеФормыДерево") Тогда
		Если МассивСтрок = Неопределено Тогда
			МассивСтрок = Таблица.ПолучитьЭлементы();
		КонецЕсли;
		ТаблицаПользователей = Новый ТаблицаЗначений;
		ТаблицаПользователей.Колонки.Добавить(ИмяПоляПользователь, Метаданные.РегистрыСведений.СоставыГруппПользователей.Измерения.ГруппаПользователей.Тип);
		Для каждого Строка Из МассивСтрок Цикл
			ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка[ИмяПоляПользователь];
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка2[ИмяПоляПользователь];
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						ТаблицаПользователей.Добавить()[ИмяПоляПользователь] = Строка3[ИмяПоляПользователь];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПользователей = Таблица.Выгрузить(МассивСтрок, ИмяПоляПользователь);
		МассивСтрок = Таблица;
	КонецЕсли;
	
	Запрос = Новый Запрос(СтрЗаменить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.ИмяПоляПользователь КАК Пользователь
	|ПОМЕСТИТЬ Пользователи
	|ИЗ
	|	&Пользователи КАК Пользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Пользователь,
	|	ВЫБОР
	|		КОГДА Пользователи.Пользователь = НЕОПРЕДЕЛЕНО
	|			ТОГДА -1
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.Пользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ПометкаУдаления
	|						ТОГДА 0
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.Пользователи).ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|								ТОГДА 4
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыПользователей).ПометкаУдаления
	|						ТОГДА 2
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ПометкаУдаления
	|						ТОГДА 6
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ВнешниеПользователи).ИдентификаторПользователяИБ = &ПустойУникальныйИдентификатор
	|								ТОГДА 10
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ТИПЗНАЧЕНИЯ(Пользователи.Пользователь) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(Пользователи.Пользователь КАК Справочник.ГруппыВнешнихПользователей).ПометкаУдаления
	|						ТОГДА 8
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ -2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Пользователи КАК Пользователи", "ИмяПоляПользователь", ИмяПоляПользователь));
	Запрос.УстановитьПараметр("Пользователи", ТаблицаПользователей);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НомераКартинок = Запрос.Выполнить().Выгрузить();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Для каждого Строка Из МассивСтрок Цикл
			Строка[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка[ИмяПоляПользователь], "Пользователь").НомерКартинки;
			Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
				Для каждого Строка2 Из Строка.ПолучитьЭлементы() Цикл
					Строка2[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь").НомерКартинки;
					Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
						Строка3[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь").НомерКартинки;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыбраннаяСтрока[ИмяПоляНомераКартинки] = НомераКартинок.Найти(ВыбраннаяСтрока[ИмяПоляПользователь], "Пользователь").НомерКартинки;
		Если ОбработатьИерархиюВторогоИТретьегоУровней Тогда
			Для каждого Строка2 Из ВыбраннаяСтрока.ПолучитьЭлементы() Цикл
				Строка2[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка2[ИмяПоляПользователь], "Пользователь").НомерКартинки;
				Для каждого Строка3 Из Строка2.ПолучитьЭлементы() Цикл
					Строка3[ИмяПоляНомераКартинки] = НомераКартинок.Найти(Строка3[ИмяПоляПользователь], "Пользователь").НомерКартинки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает константу ИспользоватьГруппыПользователей в Истина,
// если существует хотя бы одна группа пользователей в справочнике.
//
// Используется при обновлении информационной базы.
//
Процедура ПриНаличииГруппПользователейУстановитьИспользование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыПользователей КАК ГруппыПользователей
	|ГДЕ
	|	ГруппыПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
	|ГДЕ
	|	ГруппыВнешнихПользователей.Ссылка <> ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)");
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Константы.ИспользоватьГруппыПользователей.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структуру описания пользователя ИБ.
//
// Возвращаемое значение:
// Структура.
//  ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//  ПользовательИнфБазыИмя        - Строка
//  ПользовательИнфБазыПолноеИмя  - Строка
//
//  ПользовательИнфБазыАутентификацияOpenID      - Булево
//
//  ПользовательИнфБазыАутентификацияСтандартная - Булево
//  ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//  ПользовательИнфБазыПароль     - Неопределено
//  ПользовательИнфБазыСохраняемоеЗначениеПароля - Неопределено
//  ПользовательИнфБазыПарольУстановлен          - Булево
//  ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//  ПользовательИнфБазыАутентификацияОС          - Булево
//  ПользовательИнфБазыПользовательОС            - Строка
//
//  ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//  ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//  ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияOpenID",      Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Возврат Свойства;
	
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных для произвольной обработки
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//                 СправочникСсылка.Пользователи или
//                 СправочникСсылка.ВнешниеПользователи - проверка только для указанной ссылки.
//
//  ИдентификаторПользователяИБ
//               - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//               - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы - Неопределено - при нахождении ошибок вызвается исключение.
//                            Соответствие - при нахождении ошибок исключение не вызвается,
//                                           а вместо этого заполняется переданное соответствие:
//                              Ключ     - неоднозначный идентификатор пользователя ИБ.
//                              Значение - массив пользователей и внешних пользователей.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь = Неопределено, Знач ИдентификаторПользователяИБ = Неопределено, Знач НайденныеИдентификаторы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ИдентификаторПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
		ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ,
	|	ИдентификаторыПользователей.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ,
	|		ВнешниеПользователи.Ссылка
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи) КАК ИдентификаторыПользователей
	|ГДЕ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ В
	|			(ВЫБРАТЬ
	|				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИЗ
	|				(ВЫБРАТЬ
	|					Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|					Пользователи.Ссылка КАК Пользователь
	|				ИЗ
	|					Справочник.Пользователи КАК Пользователи
	|				ГДЕ
	|					Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И Пользователи.Ссылка <> &Пользователь)
	|					И НЕ(&ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|							И Пользователи.ИдентификаторПользователяИБ <> &ИдентификаторПользователяИБ)
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ,
	|					ВнешниеПользователи.Ссылка
	|				ИЗ
	|					Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|				ГДЕ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И ВнешниеПользователи.Ссылка <> &Пользователь)
	|					И НЕ(&ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|							И ВнешниеПользователи.ИдентификаторПользователяИБ <> &ИдентификаторПользователяИБ)
	|				) КАК ИдентификаторыПользователей
	|			СГРУППИРОВАТЬ ПО
	|						ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ИдентификаторыПользователей.Пользователь) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка в базе данных:'") + Символы.ПС;
	ТекущийНеоднозначныйИдентификатор = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		НовыйИдентификаторПользователяИБ = Ложь;
		Если Строка.ИдентификаторПользователяИБ <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйИдентификаторПользователяИБ = Истина;
			ТекущийНеоднозначныйИдентификатор = Строка.ИдентификаторПользователяИБ;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийНеоднозначныйИдентификатор);
				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяПользователяИБ = НСтр("ru = '<не найден>'");
				Иначе
					ИмяПользователяИБ = ТекущийПользовательИБ.Имя;
				КонецЕсли;
				ОписаниеОшибки = ОписаниеОшибки
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю ИБ ""%1"" с идентификатором %2
						           |соответствует более одного пользователя базы данных:'"),
						ИмяПользователяИБ,
						ТекущийНеоднозначныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйИдентификаторПользователяИБ Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;
			ОписаниеОшибки = ОписаниеОшибки
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '
					           |	""%1"" с идентификатором ссылки %2'"),
					Строка.Пользователь,
					Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ОписаниеОшибки = ОписаниеОшибки + "." + Символы.ПС;
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет параметр сеанса ТекущийПользователь или ТекущийВнешнийПользователь
// значением пользователя, найденному по пользователю информационной базы
// под которым запущен сеанс.
//  Если пользователь не найден, то при наличии административных прав
// создается новый пользователь в справочнике, иначе вызывается исключение.
// 
Процедура УстановкаПараметровСеанса(Знач ИмяПараметра, УстановленныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательНеНайден = Ложь;
	СоздатьПользователя  = Ложь;
	СсылкаНового = Неопределено;
	
	ТекущийПользователь        = Неопределено;
	ТекущийВнешнийПользователь = Неопределено;
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя) Тогда
		
		ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
		
		СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
		
		ИмяПользователя       = СвойстваНеуказанногоПользователя.ПолноеИмя;
		ПолноеИмяПользователя = СвойстваНеуказанногоПользователя.ПолноеИмя;
		СсылкаНового          = СвойстваНеуказанногоПользователя.СтандартнаяСсылка;
		
		Если СвойстваНеуказанногоПользователя.Ссылка = Неопределено Тогда
			ПользовательНеНайден = Истина;
			СоздатьПользователя  = Истина;
			ИдентификаторПользователяИБ = "";
		Иначе
			ТекущийПользователь = СвойстваНеуказанногоПользователя.Ссылка;
		КонецЕсли;
	Иначе
		ИдентификаторПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
		
		НайтиНеоднозначныхПользователейИБ(, ИдентификаторПользователяИБ);
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		РезультатПользователи = Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВнешниеПользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
		РезультатВнешниеПользователи = Запрос.Выполнить();
		
		Если НЕ РезультатВнешниеПользователи.Пустой() Тогда
			
			Выборка = РезультатВнешниеПользователи.Выбрать();
			Выборка.Следующий();
			ТекущийПользователь        = Справочники.Пользователи.ПустаяСсылка();
			ТекущийВнешнийПользователь = Выборка.Ссылка;
			
			Если НЕ ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
			
				ТекстСообщенияОбОшибке = НСтр("ru = 'Внешние пользователи отключены.'");
				ВызватьИсключение ТекстСообщенияОбОшибке;
			КонецЕсли;
		Иначе
			ТекущийВнешнийПользователь = Справочники.ВнешниеПользователи.ПустаяСсылка();
			
			Если РезультатПользователи.Пустой() Тогда
				Если ЭтоПолноправныйПользователь(,,Ложь) Тогда
					
					ТекущийПользователь         = ПользователиИнформационнойБазы.ТекущийПользователь();
					ИмяПользователя             = ТекущийПользователь.Имя;
					ПолноеИмяПользователя       = ТекущийПользователь.ПолноеИмя;
					ИдентификаторПользователяИБ = ТекущийПользователь.УникальныйИдентификатор;
					ПользовательПоНаименованию  = СсылкаПользователяПоПолномуНаименованию(ПолноеИмяПользователя);
					
					Если ПользовательПоНаименованию = Неопределено Тогда
						ПользовательНеНайден = Истина;
						СоздатьПользователя  = Истина;
					Иначе
						ТекущийПользователь = ПользовательПоНаименованию;
					КонецЕсли;
				Иначе
					ПользовательНеНайден = Истина;
				КонецЕсли;
			Иначе
				Выборка = РезультатПользователи.Выбрать();
				Выборка.Следующий();
				ТекущийПользователь = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздатьПользователя Тогда
		
		НачатьТранзакцию();
		
		СтандартныеПодсистемыПереопределяемый.ЗарегистрироватьНеразделенногоПользователя();
		
		Если СсылкаНового = Неопределено Тогда
			СсылкаНового = Справочники.Пользователи.ПолучитьСсылку();
		КонецЕсли;
		ТекущийПользователь = СсылкаНового;
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.ИдентификаторПользователяИБ = ИдентификаторПользователяИБ;
		НовыйПользователь.Наименование                = ПолноеИмяПользователя;
		НовыйПользователь.УстановитьСсылкуНового(СсылкаНового);
		
		Попытка
			НовыйПользователь.Записать();
		Исключение
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                           НСтр("ru = 'Авторизация не выполнена.
			                                      |Пользователь: %1 не найден в справочнике ""Пользователи"".
			                                      |
			                                      |Обратитесь к администратору.
			                                      |Возникла ошибка при добавлении пользователя в справочник.
			                                      |%2'"),
			                           ИмяПользователя,
			                           КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	
	ИначеЕсли ПользовательНеНайден Тогда
		ВызватьИсключение ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя);
	КонецЕсли;
	
	Если ТекущийПользователь = Неопределено
	 ИЛИ ТекущийВнешнийПользователь = Неопределено Тогда
		
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя) +
			НСтр("ru = '
			           |Возникла внутренняя ошибка при поиске пользователя.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	ПараметрыСеанса.ТекущийПользователь        = ТекущийПользователь;
	ПараметрыСеанса.ТекущийВнешнийПользователь = ТекущийВнешнийПользователь;
	
	УстановленныеПараметры.Добавить(ИмяПараметра);
	
КонецПроцедуры

// Вызывается при начале работы системы, чтобы проверить возможность выполнения авторизации и
// вызвать заполнение значений параметров сеанса ТекущийПользователь и ТекущийВнешнийПользователь.
//
// Возвращаемое значение:
//  Строка - если не пустая строка, значит ошибка авторизации,
//           следует завершить работу 1С:Предприятия.
//
Функция АвторизоватьТекущегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ПроверитьПраваПользователя(ТекущийПользователь);
	
	СтандартныеПодсистемыПереопределяемый.ЗарегистрироватьНеразделенногоПользователя();
	
	Если ПустаяСтрока(ТекущийПользователь.Имя)
	 ИЛИ ПользовательПоИдентификаторуСуществует(ТекущийПользователь.УникальныйИдентификатор) Тогда
		// Авторизуется пользователь по умолчанию
		// или пользовательИБ найден в справочнике.
		Возврат "";
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ТекущийПользователь.РазделениеДанных.Количество() = 0 Тогда
		
		
		НачатьТранзакцию();
		
		// Это неразделенный пользователь, требуется создать элемент в текущей области.
		ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательОбъект.Наименование = ТекущийПользователь.Имя;
		ПользовательОбъект.ИдентификаторПользователяИБ = ТекущийПользователь.УникальныйИдентификатор;
		ПользовательОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат "";
	КонецЕсли;
	
	// Требуется либо создать администратора, либо сообщить об отказе авторизации.
	ТекстСообщенияОбОшибке = "";
	ТребуетсяСоздатьАдминистратора = Ложь;
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если ПользователиИБ.Количество() = 1 Или ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		// Авторизуется администратор, созданный в конфигураторе.
		ТребуетсяСоздатьАдминистратора = Истина;
	Иначе
		// Авторизуется обычный пользователь, созданный в конфигураторе.
		ТекстСообщенияОбОшибке = ТекстСообщенияПользовательНеНайденВСправочнике(ТекущийПользователь.Имя);
	КонецЕсли;
	
	Если ТребуетсяСоздатьАдминистратора Тогда
		//
		Если РольДоступна(Метаданные.Роли.ПолныеПрава)
			И РольДоступна(РольАдминистратораСистемы()) Тогда
			//
			Пользователь = СоздатьПервогоАдминистратора(ТекущийПользователь);
			//
			Комментарий = НСтр("ru = 'Выполняется запуск от имени пользователя с ролью ""Полные права"",
				|который не зарегистрирован в списке пользователей. 
				|Выполнена автоматическая регистрация в списке пользователей.
				|
				|Для ведения списка и настройки прав пользователей предназначен список Пользователи, 
				|режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
			ПользователиПереопределяемый.ПослеЗаписиАдминистратораПриАвторизации(Комментарий);
			ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Пользователи.Администратор зарегистрирован в справочнике Пользователи'"),
					УровеньЖурналаРегистрации.Предупреждение,
					Метаданные.Справочники.Пользователи,
					Пользователь,
					Комментарий);
		Иначе
			ТекстСообщенияОбОшибке = НСтр("ru = 'Запуск от имени пользователя с правом Администрирование невозможен,
				|так как он не зарегистрирован в списке пользователей. 
				|
				|Для ведения списка и настройки прав пользователей предназначен список Пользователи, 
				|режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2";
	Обработчик.Процедура = "Пользователи.ЗаполнитьИдентификаторыПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.15";
	Обработчик.Процедура = "Пользователи.ЗаполнениеРегистраСоставыГруппПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ЗаполнитьСоставГруппВнешнихПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.5";
	Обработчик.Процедура = "ВнешниеПользователи.ДляВнешнихПользователейСоздатьПользователейИБ";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ТребуетсяСоздатьПервогоАдминистратора(Знач СтруктураОписанияПользователяИБ, ТекстВопроса = Неопределено) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыРоли") Тогда
			Роли = СтруктураОписанияПользователяИБ.ПользовательИнфБазыРоли;
		Иначе
			Роли = Новый Массив;
		КонецЕсли;
		
		Если ПользователиПереопределяемый.ЗапретРедактированияРолей()
			ИЛИ Роли.Найти("ПолныеПрава") = Неопределено
			ИЛИ Роли.Найти(РольАдминистратораСистемы().Имя) = Неопределено Тогда
			
			// Подготовка текста вопроса при записи первого администратора
			ТекстВопроса = НСтр("ru = 'В список пользователей программы добавляется первый пользователь,
			                          |поэтому ему автоматически будет назначена роль ""Полные права"".
			                          |Продолжить?'");
			ПользователиПереопределяемый.ТекстВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращет текущий уровень доступа на изменение свойств пользователя.
// 
// Возвращаемое значение:
// Строка.
// Возможные значения:
//  "ПолныйДоступ" - любое изменение свойств пользователя
//  "УправлениеСписком" - управление списком пользователей, без возможности
//                        изменения прав
//  "ИзменениеТекущего" - изменение свойств текущего пользователя "Имя", 
//                        "Пароль" и "Язык"
//  "НетДоступа"        - права на изменение пользователей отсутствуют
//
Функция ПолучитьУровеньДоступаНаИзменениеСвойствПользователяИБ() Экспорт
	
	Если ЭтоПолноправныйПользователь() Тогда
		Возврат "ПолныйДоступ";
		
	ИначеЕсли РольДоступна(Метаданные.Роли.ДобавлениеИзменениеПользователей) Тогда
		Возврат "УправлениеСписком";
		
	ИначеЕсли РольДоступна(Метаданные.Роли.ИзменениеТекущегоПользователя) Тогда
		Возврат "ИзменениеТекущего";
	Иначе
		Возврат "НетДоступа";
	КонецЕсли;
	
КонецФункции

// Только для внутреннего использования
Функция ПолноеИмяНеуказанногоПользователя() Экспорт
	
	Возврат НСтр("ru = '<Не указан>'");
	
КонецФункции

// Только для внутреннего использования
Функция СвойстваНеуказанногоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = Новый Структура;
	
	// Ссылка на найденный элемент справочника
	// соответствующий неуказанному пользователю
	Свойства.Вставить("Ссылка", Неопределено);
	
	// Ссылка, используемая для поиска и создания
	// неуказанного пользователя в справочнике Пользователи
	Свойства.Вставить("СтандартнаяСсылка", Справочники.Пользователи.ПолучитьСсылку(
		Новый УникальныйИдентификатор("aa00559e-ad84-4494-88fd-f0826edc46f0")));
	
	// Полное имя, которое устанавливается в элемент справочника Пользователи
	// при создании несуществующего неуказанного пользователя
	Свойства.Вставить("ПолноеИмя", ПолноеИмяНеуказанногоПользователя());
	
	// Полное имя, которое используется для поиска неуказанного пользователя
	// старым способом, необходимым для поддержки старых версий
	// неуказанного пользователя. Это имя не требуется изменять.
	Свойства.Вставить("ПолноеИмяДляПоиска", НСтр("ru = '<Не указан>'"));
	
	// Поиск по уникальному идентификатору
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Свойства.СтандартнаяСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Запрос.УстановитьПараметр("ПолноеИмя", Свойства.ПолноеИмяДляПоиска);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &ПолноеИмя";
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Свойства.Ссылка = Выборка.Ссылка;
		КонецЕсли;
	Иначе
		Свойства.Ссылка = Свойства.СтандартнаяСсылка;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Функция ПрочитатьПользователяИБ считывает свойства пользователя
// информационной базы по строковому или уникальному идентификатору.
//
// Параметры:
//  Идентификатор - Неопределено, Строка, УникальныйИдентификатор (идентификатор пользователя).
//  Свойства     - Структура:
//                 ПользовательИнфБазыУникальныйИдентификатор   - УникальныйИдентификатор
//                 ПользовательИнфБазыИмя                       - Строка
//                 ПользовательИнфБазыПолноеИмя                 - Строка
//
//                 ПользовательИнфБазыАутентификацияOpenID      - Булево
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Булево
//                 ПользовательИнфБазыПароль                    - Неопределено
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Строка
//                 ПользовательИнфБазыПарольУстановлен          - Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Булево
//                 ПользовательИнфБазыПользовательОС            - Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Строка (имя языка из коллекции Метаданные.Языки)
//
//  Роли           - Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//  
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево,
//  если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено) Экспорт
	
	Свойства = НовоеОписаниеПользователяИБ();
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден."), Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Если ПользователиСерверПовтИсп.АутентификацияOpenIDНастраивается() Тогда
		Свойства.ПользовательИнфБазыАутентификацияOpenID    = ПользовательИБ.АутентификацияOpenID;
	КонецЕсли;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ПользовательИБ.ОсновнойИнтерфейс = Неопределено, "", ПользовательИБ.ОсновнойИнтерфейс.Имя);
	ПолноеИмяЗначенияРежимЗапуска = ПолучитьПолноеИмяПредопределенногоЗначения(ПользовательИБ.РежимЗапуска);
	Свойства.ПользовательИнфБазыРежимЗапуска                = Сред(ПолноеИмяЗначенияРежимЗапуска, Найти(ПолноеИмяЗначенияРежимЗапуска, ".") + 1);
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", ПользовательИБ.Язык.Имя);
	
	Для каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет корректность заполнения структуры описания пользователя ИБ.
// В случае нахождения ошибок устанавливает параметр Отказ в Истина и
// отправляет сообщения об ошибках.
//
// Параметры:
//  СтруктураОписанияПользователяИБ - Структура - описание пользователя ИБ
//                 заполнение которого требуется проверить.
//
//  Отказ        - Булево - флаг отказа от выполнения операции.
//                 Устанавливается в случае ошибки.
//
// Возвращаемое значение:
//  Булево - если Истина, ошибок не найдено.
//
Функция ПроверитьЗаполнениеСтруктурыОписанияПользователяИБ(Знач СтруктураОписанияПользователяИБ, Отказ) Экспорт
	
	Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыИмя") Тогда
	
		Если ПустаяСтрока(СтруктураОписанияПользователяИБ.ПользовательИнфБазыИмя) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено имя пользователя информационной базы.'"),
				,
				"ПользовательИнфБазыИмя",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыПароль") Тогда
		
		Если СтруктураОписанияПользователяИБ.ПользовательИнфБазыПароль <> Неопределено
			И СтруктураОписанияПользователяИБ.ПользовательИнфБазыПароль <> СтруктураОписанияПользователяИБ.ПодтверждениеПароля Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Пароль и подтверждение пароля не совпадают.'"),
				,
				"Пароль",
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыПользовательОС") Тогда
		
		Если НЕ ПустаяСтрока(СтруктураОписанияПользователяИБ.ПользовательИнфБазыПользовательОС) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.ПользовательОС = СтруктураОписанияПользователяИБ.ПользовательИнфБазыПользовательОС;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Пользователь ОС должен быть в формате
					           |""\\ИмяДомена\ИмяПользователя"".'"),
					,
					"ПользовательИнфБазыПользовательОС",
					,
					Отказ);
			КонецПопытки;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

// Перезаписывает свойства пользователя ИБ, найденного по строковому или уникальному идентификатору,
// либо создает нового пользователя ИБ (если задано создать существующего пользователя - будет ошибка).
//
// Параметры:
//  Идентификатор - Строка, УникальныйИдентификатор (идентификатор пользователя).
//  ИзмененныеСвойства - Структура (свойство может быть не задано,
//                 тогда используется прочитанное или начальное значение):
//
//                 ПользовательИнфБазыУникальныйИдентификатор   - Неопределено (возвращаемое значение, устанавливается после записи пользователя ИБ)
//                 ПользовательИнфБазыИмя                       - Неопределено, Строка
//                 ПользовательИнфБазыПолноеИмя                 - Неопределено, Строка
//
//                 ПользовательИнфБазыАутентификацияOpenID      - Неопределено, Булево
//
//                 ПользовательИнфБазыАутентификацияСтандартная - Неопределено, Булево
//                 ПользовательИнфБазыПоказыватьВСпискеВыбора   - Неопределено, Булево
//                 ПользовательИнфБазыПароль                    - Неопределено, Строка
//                 ПользовательИнфБазыСохраняемоеЗначениеПароля - Неопределено, Строка
//                 ПользовательИнфБазыПарольУстановлен          - Неопределено, Булево
//                 ПользовательИнфБазыЗапрещеноИзменятьПароль   - Неопределено, Булево
//
//                 ПользовательИнфБазыАутентификацияОС          - Неопределено, Булево
//                 ПользовательИнфБазыПользовательОС            - Неопределено, Строка
//
//                 ПользовательИнфБазыОсновнойИнтерфейс         - Неопределено, Строка (имя интерфейса из коллекции Метаданные.Интерфейсы)
//                 ПользовательИнфБазыРежимЗапуска              - Неопределено, Строка (значения: "Авто", "ОбычноеПриложение", "УправляемоеПриложение")
//                 ПользовательИнфБазыЯзык                      - Неопределено, Строка (имя языка из коллекции Метаданные.Языки)
//
//  НовыеРоли      - Неопределено, Массив значений типа Строка (имена ролей из коллекции Метаданные.Роли)
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если чтение не удалось.
//
// Возвращаемое значение:
//  Булево, если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция ЗаписатьПользователяИБ(Знач Идентификатор, Знач ИзмененныеСвойства, Знач НовыеРоли, Знач СоздатьНового = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(Идентификатор, СтарыеСвойства, , ОписаниеОшибки, ПользовательИБ);
	
	Если НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового = Неопределено ИЛИ СоздатьНового = Истина Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового = Истина Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1"",
					|так как он уже существует.'"),
				Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовка новых значений свойств
	НовыеСвойства = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		Если ИзмененныеСвойства.Свойство(КлючИЗначение.Ключ) И ИзмененныеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ИзмененныеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	ПользовательИБ.Имя                         = НовыеСвойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = НовыеСвойства.ПользовательИнфБазыПолноеИмя;
	
	Если ПользователиСерверПовтИсп.АутентификацияOpenIDНастраивается() Тогда
		ПользовательИБ.АутентификацияOpenID    = НовыеСвойства.ПользовательИнфБазыАутентификацияOpenID;
	КонецЕсли;
	ПользовательИБ.АутентификацияСтандартная   = НовыеСвойства.ПользовательИнфБазыАутентификацияСтандартная;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	Иначе
		ПользовательИБ.ПоказыватьВСпискеВыбора = НовыеСвойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	КонецЕсли;
	
	Если НовыеСвойства.ПользовательИнфБазыПароль <> Неопределено Тогда
		ПользовательИБ.Пароль                  = НовыеСвойства.ПользовательИнфБазыПароль;
	ИначеЕсли НовыеСвойства.ПользовательИнфБазыСохраняемоеЗначениеПароля <> Неопределено Тогда
		ПользовательИБ.СохраняемоеЗначениеПароля = НовыеСвойства.ПользовательИнфБазыСохраняемоеЗначениеПароля
	КонецЕсли;
	
	ПользовательИБ.ЗапрещеноИзменятьПароль     = НовыеСвойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	
	ПользовательИБ.АутентификацияОС            = НовыеСвойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = НовыеСвойства.ПользовательИнфБазыПользовательОС;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
		ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[НовыеСвойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
		ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыРежимЗапуска) Тогда
		ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[НовыеСвойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыеСвойства.ПользовательИнфБазыЯзык) Тогда
		ПользовательИБ.Язык                    = Метаданные.Языки[НовыеСвойства.ПользовательИнфБазыЯзык];
	Иначе
		ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	Если НовыеРоли <> Неопределено Тогда
		ПользовательИБ.Роли.Очистить();
		Для каждого Роль Из НовыеРоли Цикл
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
		
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		
		Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы()) Тогда
		
			ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы());
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина = Неопределено Тогда
			ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		Иначе
			ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи пользователя информационной базы:'") + Символы.ПС + ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Пользователи'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Ложь;
	КонецПопытки;
	
	ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, НовыеСвойства);
	
	ИзмененныеСвойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	Возврат Истина;
	
КонецФункции

// Записывает указанного Пользователя ИБ с учетом режима разделения данных.
//  Если режим разделения данных включен, тогда перед записью проверяются
// права записываемого пользователя.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - объект, который требуется записать.
//
Процедура ЗаписатьПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если СтандартныеПодсистемыПереопределяемый.ЭтоНеразделенныйПользовательИБ(ПользовательИБ.УникальныйИдентификатор) Тогда
			ВызватьИсключение(НСтр("ru = 'Запись неразделенных пользователей
			                             |при включенном использовании разделителей запрещена.'"))
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьПраваПользователя(ПользовательИБ);
	
	ПользовательИБ.Записать();

КонецПроцедуры

// Проверяет права указанного Пользователя ИБ в режиме разделения данных.
//
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы.
//
Процедура ПроверитьПраваПользователя(ПользовательИБ) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ПользовательИБ.РазделениеДанных.Количество() > 0 Тогда
			
			НедоступныеПрава = ПользователиСерверПовтИсп.НедоступныеПраваПоТипуПользователя(
				Перечисления.ТипыПользователей.ПользовательОбластиДанных);
				
			НедоступнаяРоль = Неопределено;
			
			Для каждого Роль Из ПользовательИБ.Роли Цикл
				
				ДоступныеДляИзмененияОбщиеДанные = ПользователиСерверПовтИсп.ОбщиеДанныеДоступныеДляИзменения(Роль.Имя);
				
				Если ДоступныеДляИзмененияОбщиеДанные.Количество() > 0 Тогда
					НедоступнаяРоль = Роль;
					
					Запись = Новый ЗаписьXML;
					Запись.УстановитьСтроку();
					СериализаторXDTO.ЗаписатьXML(Запись, ДоступныеДляИзмененияОбщиеДанные);
					ТаблицаСтрокой = Запись.Закрыть();
					
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Пользователи.Запись'"),
						УровеньЖурналаРегистрации.Ошибка,
						,
						ПользовательИБ,
						НСтр("ru = 'Разделенному пользователю назначена роль,
						           |предоставляющая права на изменение общих данных:
						           |'") + ТаблицаСтрокой);
				КонецЕсли;
					
				Для каждого Право Из НедоступныеПрава Цикл
					
					Если ПравоДоступа(Право, Метаданные, Роль) Тогда
						НедоступнаяРоль = Роль;
						
						ШаблонСообщения = НСтр("ru = 'Разделенному пользователю назначена роль,
						                             |предоставляющая право %1.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Право);
						
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Пользователи.Запись'"),
							УровеньЖурналаРегистрации.Ошибка,
							,
							ПользовательИБ,
							ТекстСообщения);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если НедоступнаяРоль <> Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'Разделенным пользователям не может быть назначена
				                             |роль %1.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, НедоступнаяРоль.Представление());
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет указанного пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ,
//                   УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  ОписаниеОшибки - Строка, содержит описание ошибки, если удаление не удалось.
//
// Возвращаемое значение:
//  Булево, если Истина - успех, иначе отказ, см. ОписаниеОшибки.
//
Функция УдалитьПользователяИБ(Знач Идентификатор, ОписаниеОшибки = "") Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И СтандартныеПодсистемыПереопределяемый.ЭтоНеразделенныйПользовательИБ(Идентификатор) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Удаление неразделенных пользователей
		                             |при включенном использовании разделителей запрещено.'"));
	КонецЕсли;
	
	ПользовательИБ = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) Тогда
		Возврат Ложь;
	Иначе
		Попытка
			ПользовательИБ.Удалить();
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении пользователя информационной базы:'") + Символы.ПС + ИнформацияОбОшибке().Причина.Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ПользователиПереопределяемый.ПослеУдаленияПользователяИнформационнойБазы(Свойства);
	
	Возврат Истина;
	
КонецФункции

// Проверяет существование пользователя информационной базы.
//
// Параметры:
//  Идентификатор  - Строка - имя пользователя ИБ,
//                   УникальныйИдентификатор - идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБСуществует(Знач Идентификатор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Определяет наличие элемента в справочнике Пользователи
// или справочнике ВнешниеПользователи по уникальному идентификатору
// пользователя информационной.
//  Функция используется для проверки наличия связи пользователяИБ только
// с одним элементом справочников Пользователи, ВнешниеПользователи.
//
// Параметры:
//  УникальныйИдентификатор - идентификатор пользователя ИБ.
//
//  СсылкаНаТекущего - СправочникСсылка.Пользователи,
//                     СправочникСсылка.ВнешниеПользователи - исключить
//                       указанную ссылку из поиска.
//                     Неопределено - искать среди всех элементов справочников.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательПоИдентификаторуСуществует(УникальныйИдентификатор, СсылкаНаТекущего = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И Пользователи.Ссылка <> &СсылкаНаТекущего
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.ИдентификаторПользователяИБ = &УникальныйИдентификатор
	|	И ВнешниеПользователи.Ссылка <> &СсылкаНаТекущего";
	Запрос.УстановитьПараметр("СсылкаНаТекущего", СсылкаНаТекущего);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НайтиНеоднозначныхПользователейИБ(, УникальныйИдентификатор);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет связан ли пользовательИБ с элементом справочника Пользователи или
// элементом справочника ВнешниеПользователи.
// 
// Параметры:
//  ИмяПользователя - Строка - имя пользователя ИБ.
//
// Возвращаемое значение:
//  Булево.
//
Функция ПользовательИБНеЗанят(Знач ИмяПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователя);
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

//  Используется в процедурах ОбновитьСоставыГруппПользователей,
// ОбновитьСоставГруппВнешнихПользователей.
//
// Параметры:
//  Таблица      - полное имя объекта метаданных.
//
// Возвращаемое значение:
//  ТаблицаЗначений (Ссылка, Родитель)
//
Функция ТаблицаГруппРодителей(Таблица) Экспорт
	
	// Подготовка состава групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыТаблицы.Ссылка,
	|	ГруппыТаблицы.Родитель
	|ИЗ
	|	" + Таблица + " КАК ГруппыТаблицы");
	ТаблицаЭлементов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭлементов.Индексы.Добавить("Родитель");
	ТаблицаГруппРодителей = ТаблицаЭлементов.Скопировать(Новый Массив);
	
	Для каждого ОписаниеЭлемента Из ТаблицаЭлементов Цикл
		ОписаниеГруппыРодителя = ТаблицаГруппРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = ОписаниеЭлемента.Ссылка;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеЭлемента.Ссылка;
		ЗаполнитьГруппыРодителя(ОписаниеЭлемента.Ссылка, ОписаниеЭлемента.Ссылка, ТаблицаЭлементов, ТаблицаГруппРодителей);
	КонецЦикла;
	
	Возврат ТаблицаГруппРодителей;
	
КонецФункции

// Обновляет состав пользователей группы пользователей с учетом иерархии
// в регистре сведений "Состав групп пользователей".
//  Данные регистра используются в форме списка и формы выбора пользователей.
//  Данные регистра могут быть использованы для повышения производительности запросов,
// т.к. не требуется работать с иерархией.
//
// Параметры:
//  ГруппаПользователей - СправочникСсылка.ГруппыПользователей.
//
Процедура ОбновитьСоставыГруппПользователей(Знач ГруппаПользователей) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка групп родителей.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаГруппРодителей.Родитель,
	|	ТаблицаГруппРодителей.Ссылка
	|ПОМЕСТИТЬ ТаблицаГруппРодителей
	|ИЗ
	|	&ТаблицаГруппРодителей КАК ТаблицаГруппРодителей");
	Запрос.УстановитьПараметр("ТаблицаГруппРодителей", ТаблицаГруппРодителей("Справочник.ГруппыПользователей"));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Выполнение для текущий группы и каждой группы-родителя.
	Пока НЕ ГруппаПользователей.Пустая() Цикл
		
		Запрос.УстановитьПараметр("ГруппаПользователей", ГруппаПользователей);
		
		Если ГруппаПользователей <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			// Удаление связей для удаленных пользователей.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|			ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|				И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей
			|	И ГруппыПользователейСостав.Ссылка ЕСТЬ NULL ";
			ПользователиУдаленныеИзГруппы = Запрос.Выполнить().Выбрать();
			МенеджерЗаписи = РегистрыСведений.СоставыГруппПользователей.СоздатьМенеджерЗаписи();
			Пока ПользователиУдаленныеИзГруппы.Следующий() Цикл
				МенеджерЗаписи.ГруппаПользователей = ГруппаПользователей;
				МенеджерЗаписи.Пользователь        = ПользователиУдаленныеИзГруппы.Пользователь;
				МенеджерЗаписи.Удалить();
			КонецЦикла;
		КонецЕсли;
		
		// Добавление связей для добавленных пользователей.
		Если ГруппаПользователей = Справочники.ГруппыПользователей.ВсеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи) КАК ГруппаПользователей,
			|	Пользователи.Ссылка КАК Пользователь
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
			|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Пользователи.Ссылка,
			|	Пользователи.Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = Пользователи.Ссылка)
			|			И (СоставыГруппПользователей.Пользователь = Пользователи.Ссылка)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ГруппаПользователей КАК ГруппаПользователей,
			|	ГруппыПользователейСостав.Пользователь
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГруппРодителей КАК ТаблицаГруппРодителей
			|		ПО (ТаблицаГруппРодителей.Ссылка = ГруппыПользователейСостав.Ссылка)
			|			И (ТаблицаГруппРодителей.Родитель = &ГруппаПользователей)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|		ПО (СоставыГруппПользователей.ГруппаПользователей = &ГруппаПользователей)
			|			И (СоставыГруппПользователей.Пользователь = ГруппыПользователейСостав.Пользователь)
			|ГДЕ
			|	СоставыГруппПользователей.Пользователь ЕСТЬ NULL ";
		КонецЕсли;
		ПользователиДобавленныеВГруппу = Запрос.Выполнить().Выгрузить();
		Если ПользователиДобавленныеВГруппу.Количество() > 0 Тогда
			НаборЗаписей = РегистрыСведений.СоставыГруппПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ПользователиДобавленныеВГруппу);
			НаборЗаписей.Записать(Ложь); // Добавление недостающих записей связей.
		КонецЕсли;
		
		ГруппаПользователей = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ГруппаПользователей, "Родитель");
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьСохраняемоеЗначениеПароляПоПаролю(Знач Пароль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	ВременныйПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
	ВременныйПользовательИБ.АутентификацияСтандартная = Истина;
	ВременныйПользовательИБ.Имя = Новый УникальныйИдентификатор;
	ВременныйПользовательИБ.Пароль = Пароль;
	ВременныйПользовательИБ.Записать();
	
	ВременныйПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВременныйПользовательИБ.УникальныйИдентификатор);
	
	СохраняемоеЗначениеПароля = ВременныйПользовательИБ.СохраняемоеЗначениеПароля;
	ОтменитьТранзакцию();
	
	Возврат СохраняемоеЗначениеПароля;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция ТекстСообщенияПользовательНеНайденВСправочнике(ИмяПользователя)
	
	Если ВнешниеПользователи.ИспользоватьВнешнихПользователей() Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
		                                    |
		                                    |Пользователь ""%1"" не найден в справочниках
		                                    |""Пользователи"" и ""Внешние пользователи"".
		                                    |
		                                    |Обратитесь к администратору.'");
	Иначе
		ТекстСообщенияОбОшибке = НСтр("ru = 'Авторизация не выполнена. Работа системы будет завершена.
		                                    |
		                                    |Пользователь ""%1"" не найден в справочнике ""Пользователи"".
		                                    |
		                                    |Обратитесь к администратору.'");
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ИмяПользователя);
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

Процедура ЗаполнитьГруппыРодителя(Знач Родитель, Знач ТекущийРодитель, Знач ТаблицаЭлементов, Знач ТаблицаРодителей)
	
	ОписанияГруппРодителя = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Родитель", ТекущийРодитель));
	Для каждого ОписаниеГруппы Из ОписанияГруппРодителя Цикл
		ОписаниеГруппыРодителя = ТаблицаРодителей.Добавить();
		ОписаниеГруппыРодителя.Родитель = Родитель;
		ОписаниеГруппыРодителя.Ссылка   = ОписаниеГруппы.Ссылка;
		ЗаполнитьГруппыРодителя(Родитель, ОписаниеГруппы.Ссылка, ТаблицаЭлементов, ТаблицаРодителей);
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаПользователяПоПолномуНаименованию(ПолноеИмя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.Пользователи КАК Пользователи
					|ГДЕ
					|	Пользователи.Наименование = &ПолноеИмя";
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Пользователь = Выборка.Ссылка;
	
	Если ПользовательИБНеЗанят(Пользователь.ИдентификаторПользователяИБ) Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Процедура вызывается при обновлении конфигурации на версию 1.0.5.2
// Выполняет попытку сопоставления / заполнения реквизита "ИдентификаторПользователяИБ"
// для каждого элемента справочника Пользователи.
//
Процедура ЗаполнитьИдентификаторыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайтиНеоднозначныхПользователейИБ();
	
	СписокПользователей = Справочники.Пользователи.Выбрать();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	СвойстваНеуказанногоПользователя = СвойстваНеуказанногоПользователя();
	
	Пока СписокПользователей.Следующий() Цикл
		Пользователь = СписокПользователей.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь <> СвойстваНеуказанногоПользователя.Ссылка Тогда
			
			ПолноеИмяПользователя = СокрЛП(Пользователь.Наименование);
			Для Каждого ПользовательИБ Из ПользователиИБ Цикл
				Если ПолноеИмяПользователя = СокрЛП(Лев(ПользовательИБ.ПолноеИмя, Метаданные.Справочники.Пользователи.ДлинаНаименования))
				   И Не ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор) Тогда
					ОбъектПользователь = Пользователь.ПолучитьОбъект();
					ОбъектПользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
					ОбъектПользователь.Записать();
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при обновлении конфигурации на версию 1.0.5.15
// Выполняется перезапись всех пользователей.
// Возможен вызов с любой версии начиная с 1.0.5.15.
//
Процедура ЗаполнениеРегистраСоставыГруппПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		Объект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
