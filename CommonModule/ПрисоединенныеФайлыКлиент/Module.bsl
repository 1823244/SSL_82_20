////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает файл для просмотра или редактирования.
//  Если файл открывается для просмотра, тогда получает файл в рабочий каталог пользователя,
// при этом ищет файл в рабочем каталоге и предлагает открыть существующий или
// получить файл с сервера.
//  Если файл открывается для редактирования, тогда открывает файл в рабочем каталоге (если есть) или
// получает его с сервера.
//
// Параметры:
//  ДанныеФайла       - Структура - данные файла.
//  ДляРедактирования - Булево - истина, если файл открывается для редактирования, иначе ложь.
//
Процедура ОткрытьФайл(Знач ДанныеФайла, Знач ДляРедактирования = Истина) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Отказ = Ложь;
		
		ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует) // Файл уже редактируется.
		   И ДляРедактирования
		   И ФайлНаДиске.Существует() Тогда
			
			ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			ПолучитьФайл = Ложь;
			
		ИначеЕсли ФайлНаДиске.Существует() Тогда
			ПолучитьФайл = ДиалогНужноПолучитьФайлССервера(ПолноеИмяФайлаНаКлиенте, ДанныеФайла, ДляРедактирования, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ПолучитьФайл = Истина;
		КонецЕсли;
		
		ФайлМожноОткрывать = Истина;
		
		Если ПолучитьФайл Тогда
			ПолноеИмяФайлаНаКлиенте = "";
			ФайлМожноОткрывать = ПолучитьФайлВРабочийКаталог(
				ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
				ДанныеФайла.ОтносительныйПуть,
				ДанныеФайла.ДатаМодификацииУниверсальная,
				ДанныеФайла.ИмяФайла,
				РабочийКаталогПользователя,
				ПолноеИмяФайлаНаКлиенте);
		КонецЕсли;
		
		Если ФайлМожноОткрывать Тогда
			Если ДляРедактирования Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			Иначе
				ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			КонецЕсли;
			ОткрытьФайлПриложением(ПолноеИмяФайлаНаКлиенте);
		КонецЕсли;
	Иначе
		Если ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ФайловыеФункцииКлиент.ПоказатьНапоминаниеПриРедактировании();
		КонецЕсли;
		
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды добавления файлов.
//  Предлагает пользователю выбирать файлы в диалоге выбора файлов и
// пытается поместить выбранные файлы в хранилище файлов, когда:
// - размер файла не превышает максимально допустимый,
// - файл имеет допустимое расширение,
// - имеется свободное место в томе (при хранении файлов в томах),
// - прочие условия.
//
// Параметры:
//  ВладелецФайла      - Ссылка - владелец файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//  Фильтр             - Строка - необязательный параметр,
//                       позволяет задать фильтр выбираемого файла,
//                       например, картинки для номенклатуры.
//
Процедура ДобавитьФайлы(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач Фильтр = "") Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр, НСтр("ru = 'Все файлы'") + " (*.*)|*.*");
		
		Если ВыборФайла.Выбрать() Тогда
			ПрисоединенныеФайлыМассив = Новый Массив;
			ПоместитьВыбранныеФайлыВХранилище(
				ВыборФайла.ВыбранныеФайлы,
				ВладелецФайла,
				НастройкиРаботыСФайлами,
				ПрисоединенныеФайлыМассив,
				ИдентификаторФормы);
			
			Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
				ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Создание:'"),
					ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
					ПрисоединенныйФайл,
					БиблиотекаКартинок.Информация32);
				
				ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
				ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
			КонецЕсли;
			
			Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
				ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
				Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), ПрисоединенныеФайлыМассив);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе // Если веб-клиент без подключенного расширения.
#Если ВебКлиент Тогда
		ПрисоединенныйФайл = ПоместитьВыбранныеФайлыВХранилищеВеб(ВладелецФайла, НастройкиРаботыСФайлами, ИдентификаторФормы);
		
		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание'"),
				ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
				ПрисоединенныйФайл,
				БиблиотекаКартинок.Информация32);
			
			ОповеститьОбИзменении(ПрисоединенныйФайл);
			
			ПараметрыФормы = Новый Структура("ПрисоединенныйФайл", ПрисоединенныйФайл);
			ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет файл вместе вместе с ЭЦП.
// Используется в обработчике команды сохранения файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ДанныеФайла        - Структура - данные файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура СохранитьВместеСЭЦП(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла);
		
		Если ПолноеИмяФайла = "" Тогда
			Возврат; // Пользователь нажал Отмена или это веб клиент без расширения.
		КонецЕсли;
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		
		Если Настройка = "Спрашивать" Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Объект",                  ПрисоединенныйФайл);
			ПараметрыФормы.Вставить("УникальныйИдентификатор", ИдентификаторФормы);
			
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
			
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			МассивСтруктурПодписей = ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ПрисоединенныйФайл, ИдентификаторФормы);
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				ИдентификаторФормы,
				МассивСтруктурПодписей);
		КонецЕсли;
		
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения данной операции необходимо
		                          |установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Помещает данные файла с сервера в рабочий каталог на диске.
//
// ОСОБЫЕ УСЛОВИЯ.
// Требуется наличие подключенного расширения для работы с файлами.
//
// Параметры:
//  АдресДвоичныхДанныхФайла     - Строка - адрес во временном хранилище с двоичными данными,
//                                 либо навигационная ссылка на данные файла в ИБ.
//  ОтносительныйПуть            - Строка - путь к файлу относительно рабочего каталога.
//  ДатаМодификацииУниверсальная - Дата - универсальная дата модификации файла.
//  ИмяФайла                     - Строка - имя файла (с расширением).
//  РабочийКаталогПользователя   - Строка - путь к рабочему каталогу.
//  ПолноеИмяФайлаНаКлиенте      - Строка (возращаемое значение) - устанавливается при успешном выполнении.
//
// Возвращаемое значение: булево
//  Истина - файл получен и сохранен успешно, иначе Ложь.
//
Функция ПолучитьФайлВРабочийКаталог(Знач АдресДвоичныхДанныхФайла,
                                    Знач ОтносительныйПуть,
                                    Знач ДатаМодификацииУниверсальная,
                                    Знач ИмяФайла,
                                    Знач РабочийКаталогПользователя = "",
                                    ПолноеИмяФайлаНаКлиенте) Экспорт
	
	Если РабочийКаталогПользователя = Неопределено
	 ИЛИ ПустаяСтрока(РабочийКаталогПользователя) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	КаталогСохранения = РабочийКаталогПользователя + ОтносительныйПуть;
	
	Попытка
		СоздатьКаталог(КаталогСохранения);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		СообщениеОбОшибке = НСтр("ru = 'Ошибка создания каталога на диске:'") + " " + СообщениеОбОшибке;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;
	КонецПопытки;
	
	Файл = Новый Файл(КаталогСохранения + ИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(КаталогСохранения + ИмяФайла);
	КонецЕсли;
	
	ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(КаталогСохранения + ИмяФайла, АдресДвоичныхДанныхФайла);
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	
	ПолученныеФайлы = Новый Массив;
	
	Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
		ПолноеИмяФайлаНаКлиенте = ПолученныеФайлы[0].Имя;
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Файл.УстановитьУниверсальноеВремяИзменения(ДатаМодификацииУниверсальная);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Помещает файл с диска клиента во временное хранилище.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ПолноеИмяФайлаНаКлиенте - Строка - имя файла на диске клиента.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина - файл успешно помещен в хранилище, иначе Ложь.
//
Функция ПоместитьФайлНаДискеВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ПолноеИмяФайлаНаКлиенте, Знач ИдентификаторФормы) Экспорт
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	МаксРазмерФайла                   = НастройкиРаботыСФайлами.МаксимальныйРазмерФайла;
	ЗапретЗагрузкиФайловПоРасширению  = НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений       = НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
				ЗапретЗагрузкиФайловПоРасширению,
				СписокЗапрещенныхРасширений,
				Файл.Расширение) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
			           |Обратитесь к администратору.'"),
			Файл.Расширение);
	КонецЕсли;
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Файл.Размер(), МаксРазмерФайла, Файл.Имя));
		Возврат Ложь;
	КонецЕсли;
	
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	
	Если ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста = "";
	Иначе
		АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
	КонецЕсли;
	
	Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайлаНаКлиенте, "");
	ПомещаемыеФайлы = Новый Массив;
	ПомещаемыеФайлы.Добавить(Описание);
	ПомещенныеФайлы = Новый Массив;
	
	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка передачи файла на сервер:
			           |""%1"".'"),
			ПолноеИмяФайлаНаКлиенте) );
		Возврат Ложь;
	КонецЕсли;
	
	АдресФайлаВоВременномХранилище = ПомещенныеФайлы[0].Хранение;
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Файл.ПолучитьУниверсальноеВремяИзменения());
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	ИнформацияОФайле.Вставить("Расширение",                     Прав(Файл.Расширение, СтрДлина(Файл.Расширение)-1) );
	
	Возврат Истина;
	
КонецФункции

// Сохраняет файл в каталог на диске.
// Так же используется, как вспомогательная функция при сохранении файла с ЭЦП.
//
// Параметры:
//  ДанныеФайла  - Структура - данные файла.
//
// Возвращаемое значение:
//  Строка - имя сохраненного файла.
//
Функция СохранитьФайлКак(Знач ДанныеФайла) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
		ВыборФайла.Расширение = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат "";
		КонецЕсли;
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб)
				           |Пожалуйста, подождите...'"),
				ДанныеФайла.ИмяФайла, 
				ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб) );
		
		Состояние(ТекстПояснения);
		
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
		
		ПолученныеФайлы = Новый Массив;
		
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файл успешно сохранен.'"), , ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		
		Возврат ВыборФайла.ПолноеИмяФайла;
	Иначе
#Если ВебКлиент Тогда
		ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ИмяФайла, Истина);
		Возврат ДанныеФайла.ИмяФайла;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Открывает общую форму присоединенного файла из формы элемента
// справочника присоедиенных файлов. Форма элемента закрывается.
// 
// Параметры:
//  Форма     - форма справочника присоединенных файлов.
//
Процедура ПерейтиКФормеПрисоединенногоФайла(Знач Форма) Экспорт
	
	ПрисоединенныйФайл = Форма.Ключ;
	
	Форма.Закрыть();
	
	Для Каждого ОкноКП Из ПолучитьОкна() Цикл
		
		Содержимое = ОкноКП.ПолучитьСодержимое();
		
		Если Содержимое = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Содержимое.ИмяФормы = "ОбщаяФорма.ПрисоединенныйФайл" Тогда
			Если Содержимое.Параметры.Свойство("ПрисоединенныйФайл")
			   И Содержимое.Параметры.ПрисоединенныйФайл = ПрисоединенныйФайл Тогда
				ОкноКП.Активизировать();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОткрытьФормуПрисоединенногоФайла(ПрисоединенныйФайл);
	
КонецПроцедуры

// Открывает форму выбора файлов.
// Используется в обработчике выбора для переопределения стандартного поведения.
//
// Параметры:
//  ВладелецФайлов       - Ссылка на объект с файлами.
//  ЭлементФормы         - элемент формы, которому будет отправлено оповещение о выборе.
//  СтандартнаяОбработка - Булево (возвращаемое значение), всегда устанавливается в Ложь.
//
Процедура ОткрытьФормуВыбораФайлов(Знач ВладелецФайлов, Знач ЭлементФормы, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",      ВладелецФайлов);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенныхФайлов", ПараметрыФормы, ЭлементФормы);
	
КонецПроцедуры

// Открывает форму присоединенного файла.
// Может использоваться как обработчик открытия присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл   - Ссылка на файл, карточку которого нужно открыть.
//  СтандартнаяОбработка - Булево (возвращаемое значение), всегда устанавливается в Ложь.
//
Процедура ОткрытьФормуПрисоединенногоФайла(Знач ПрисоединенныйФайл, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайл);
		
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Добавляет файлы перетаскиваением в список файлов.
//
// Параметры:
//  ВладелецФайла      - Ссылка - владелец файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//  МассивИменФайлов   - Массив Строк - путей к файлам.
//
Процедура ДобавитьФайлыПеретаскиванием(Знач ВладелецФайла, Знач ИдентификаторФормы, Знач МассивИменФайлов) Экспорт
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	ПрисоединенныеФайлыМассив = Новый Массив;
	ПоместитьВыбранныеФайлыВХранилище(
		МассивИменФайлов,
		ВладелецФайла,
		НастройкиРаботыСФайлами,
		ПрисоединенныеФайлыМассив,
		ИдентификаторФормы);
	
	Если ПрисоединенныеФайлыМассив.Количество() = 1 Тогда
		ПрисоединенныйФайл = ПрисоединенныеФайлыМассив[0];
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл),
			ПрисоединенныйФайл,
			БиблиотекаКартинок.Информация32);
		
		ПараметрыФормы = Новый Структура("ПрисоединенныйФайл, ЭтоНовый", ПрисоединенныйФайл, Истина);
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыФормы, , ПрисоединенныйФайл);
	КонецЕсли;
	
	Если ПрисоединенныеФайлыМассив.Количество() > 0 Тогда
		ОповеститьОбИзменении(ПрисоединенныеФайлыМассив[0]);
		Оповестить("Запись_ПрисоединенныйФайл", Новый Структура("ЭтоНовый", Истина), ПрисоединенныеФайлыМассив);
	КонецЕсли;
	
КонецПроцедуры

#Если ВебКлиент Тогда
// Помещает файл с диска в хранилище присоединенных файлов (веб-клиент).
// 
// Параметры:
//  ВладелецФайла           - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами - Структура.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Ссылка на файл.
//
Функция ПоместитьВыбранныеФайлыВХранилищеВеб(Знач ВладелецФайла, Знач НастройкиРаботыСФайлами, Знач ИдентификаторФормы)
	
	АдресВременногоХранилищаФайла = "";
	ИмяФайла = "";
	Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		Расширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище:
			           |""%1"".'"),
			ИмяФайла);
	КонецЕсли;
	
	ЗапретЗагрузкиФайловПоРасширению = НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений      = НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
				ЗапретЗагрузкиФайловПоРасширению,
				СписокЗапрещенныхРасширений,
				Расширение) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
			           |Обратитесь к администратору.'"),
			Расширение);
	КонецЕсли;
	
	// Создание карточки Файла в базе данных.
	ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
		ВладелецФайла,
		ИмяБезРасширения,
		Расширение,
		,
		,
		АдресВременногоХранилищаФайла,
		"");
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции
#КонецЕсли

// Обновляет данные файла из файла, выбранного пользователем.
// Используется, как обработчик команды обновления присоединенного файла из другого файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура - данные файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина, если файл успешно обновлен в хранилище.
//           Ложь, если файл не обновлен в хранилище.
//
Функция ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ИнформацияОФайле = Новый Структура;
	
	Если ВыбратьФайлНаДискеИПоместитьВХранилище(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы) Тогда
		ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


// Помещает отредактированные файлы в хранилище.
// Используется, как обработчик команды окончания редактирования файлов.
//
// Параметры
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно помещен во временное хранилище.
//
Функция ПоместитьРедактируемыйФайлНаДискеВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяФайлаНаКлиенте);
		Если НЕ Файл.Существует() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Файл не найден в рабочем каталоге.'"));
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПоместитьФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, ПолноеИмяФайлаНаКлиенте, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Результат = ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
		
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ДанныеФайла.ИмяФайла <> ИнформацияОФайле.ИмяФайла Тогда
			ТекстВопроса = НСтр("ru = 'Имя выбранного файла
			                          |""%1""
			                          |отличается от имени файла в хранилище
			                          |""%2"",
			                          |продолжить?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ИнформацияОФайле.ИмяФайла, ДанныеФайла.ИмяФайла);
			КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Результат;
#КонецЕсли
	КонецЕсли;
	
КонецФункции

// Выбирает файл с диска и помещает его во временное хранилище на сервере.
//
// Параметры:
//  ДанныеФайла        - Структура с данными файла.
//  ИнформацияОФайле   - Структура (возвращаемое значение) - информация о файле.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - файл успешно выбран и помещен во временное хранилище, иначе Ложь.
//
Функция ВыбратьФайлНаДискеИПоместитьВХранилище(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла     = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		ВыборФайла.Расширение         = ДанныеФайла.Расширение;
		ВыборФайла.Фильтр             = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                                НСтр("ru = 'Все файлы (*.%1)|*.%1'"), ДанныеФайла.Расширение);
		
		Если НЕ ВыборФайла.Выбрать() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат ПоместитьФайлНаДискеВХранилище(ДанныеФайла, ИнформацияОФайле, ВыборФайла.ПолноеИмяФайла, ИдентификаторФормы);
		
	Иначе
#Если ВебКлиент Тогда
		Возврат ПоместитьФайлНаДискеВХранилищеВеб(ДанныеФайла, ИнформацияОФайле, ИдентификаторФормы);
#КонецЕсли
	КонецЕсли;
	
КонецФункции

#Если ВебКлиент Тогда
// Помещает файл с диска клиента во временное хранилище.
//  Аналог функции ПоместитьФайлНаДискеВХранилище
// для веб-клиента без расширения для работы с файлами.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  ИнформацияОФайле        - Структура (возвращаемое значение) с информацией о файле.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево - Истина - файл успешно помещен в хранилище, иначе Ложь.
//
Функция ПоместитьФайлНаДискеВХранилищеВеб(Знач ДанныеФайла, ИнформацияОФайле, Знач ИдентификаторФормы)
	
	НастройкиРаботыСФайлами = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами();
	
	АдресВременногоХранилищаФайла = "";
	ВыбранноеИмяФайла = "";
	
	Если Не ПоместитьФайл(АдресВременногоХранилищаФайла, ДанныеФайла.ИмяФайла, ВыбранноеИмяФайла, Истина, ИдентификаторФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиПути = ФайловыеФункцииКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранноеИмяФайла);
	
	Если СтрокиПути.Количество() >= 2 Тогда
		НовоеИмя = СтрокиПути[СтрокиПути.Количество()-2];
		НовоеРасширение = СтрокиПути[СтрокиПути.Количество()-1];
		ИмяФайла = НовоеИмя + "." + НовоеРасширение;
	ИначеЕсли СтрокиПути.Количество() = 1 Тогда
		НовоеИмя = СтрокиПути[0];
		НовоеРасширение = "";
		ИмяФайла = НовоеИмя;
	КонецЕсли;
	
	ЗапретЗагрузкиФайловПоРасширению = НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений      = НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
				ЗапретЗагрузкиФайловПоРасширению,
				СписокЗапрещенныхРасширений,
				НовоеРасширение) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
			           |Обратитесь к администратору.'"),
			НовоеРасширение);
	КонецЕсли;
	
	ИнформацияОФайле = Новый Структура;
	ИнформацияОФайле.Вставить("ДатаМодификацииУниверсальная",   Неопределено);
	ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", АдресВременногоХранилищаФайла);
	ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
	ИнформацияОФайле.Вставить("ИмяФайла",                       ИмяФайла);
	ИнформацияОФайле.Вставить("Расширение",                     НовоеРасширение);
	
	Возврат Истина;
	
КонецФункции
#КонецЕсли

// Открывает каталог с файлом (при необходимости получает файл из хранилища).
// Используется, как обработчик команды открытия каталога с файлом.
//
// Параметры:
//  ДанныеФайла - Структура с данными файла.
//
Процедура ОткрытьКаталогСФайлом(Знач ДанныеФайла) Экспорт
	
	Перем ПолноеИмяФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		
		Если ПустаяСтрока(РабочийКаталогПользователя) Тогда
			Предупреждение(НСтр("ru = 'Не задан путь к локальному кэшу файлов'"));
			Возврат;
		КонецЕсли;
		
		ПолныйПуть = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПуть);
		
		Если НЕ Файл.Существует() Тогда
			КодВозврата = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |отсутствует в рабочем каталоге. Получить файл с сервера?'"), Файл.Имя),
			РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			ПолноеИмяФайлаНаКлиенте = "";
			ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ДанныеФайла.ОтносительныйПуть, ДанныеФайла.ДатаМодификацииУниверсальная, ДанныеФайла.ИмяФайла, РабочийКаталогПользователя, ПолноеИмяФайлаНаКлиенте);
			
		КонецЕсли;
		
		ФайловыеФункцииКлиент.ОткрытьПроводникСФайлом(ПолныйПуть);
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения операции требуется
		                          |установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭЦП

// Подписывает присоединенный файл:
// - предлагает пользователю выбрать ЭЦП для подписания и получает данные подписи,
// - записывает файл с эцп в хранилище.
// Используется в обработчике команды "Подписать" формы списка.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка присоединенный файл.
//  ДанныеФайла        - Структура с данными файла.
//
// Возвращаемое значение:
//  Булево - Истина - файл успешно подписан и сохранен в хранилище,
//           Ложь - ошибки или отказ во время работы.
//
Функция СформироватьПодписьФайла(Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	ДанныеПодписи = Неопределено;
	
	Если ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(ПрисоединенныйФайл, ДанныеФайла, ДанныеПодписи) Тогда
		ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует подпись для двоичных данных файла:
// - предлагает пользователю диалог выбора сертификатов ЭЦП,
// - подписывает двоичные данные присоединенного файла с целью получения подписи.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//  ДанныеПодписи      - Структура (возвращаемое значение) - сформированная подпись.
//
// Возвращаемое значение:
//  Булево - Истина, если данные присоединенного файла успешно подписаны,
//           Ложь, если пользователь отказался от подписания или произошла ошибка.
//
Функция ВыбратьСертификатыЭЦПИСформироватьДанныеПодписи(Знач ПрисоединенныйФайл, Знач ДанныеФайла, ДанныеПодписи) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено,
		                          |операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ПрисоединенныйФайл);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
		МенеджерКриптографии,
		ПрисоединенныйФайл,
		ДвоичныеДанные,
		СтруктураПараметровПодписи);
	
	Возврат Истина;
	
КонецФункции

// Добавляет ЭЦП из файла(ов) на диске.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл, которому требуется добавить подпись.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура ДобавитьЭЦПИзФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено,
		                          |операция прервана.'"));
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		МассивПодписей = ПолучитьМассивПодписей(ПрисоединенныйФайл, ИдентификаторФормы);
		
		Если МассивПодписей.Количество() > 0 Тогда
			ПрисоединенныеФайлы.ЗанестиИнформациюОПодписях(ПрисоединенныйФайл, МассивПодписей, ИдентификаторФормы);
			ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, МассивПодписей.Количество());
		КонецЕсли;
	Иначе
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'Для выполнения операции требуется
		                          |установить расширение работы с файлами.'"));
#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Возвращает подписи, для чего вызывает диалог добавления подписей.
//
// ОСОБЫЕ УСЛОВИЯ
// Требуется наличие подключенного расширения для работы с файлами
// и расширения для работы со средствами криптографии.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Массив Структур подписей.
//
Функция ПолучитьМассивПодписей(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
	
	Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиент.СформироватьПодписиДляЗанесениюВБазу(
		ПрисоединенныйФайл, МассивФайловПодписей, ИдентификаторФормы);
	
КонецФункции

// Служебная процедура используется для оповещения системы об изменении объекта,
// а так же для отображения оповещения пользователя о добавлении подписей.
// Параметры
//  ПрисоединенныйФайл - ссылка на файл с добавленными подписями
//  КоличествоПодписей - количество добавленных подписей
//
Процедура ОповеститьОДобавленииПодписиИзФайла(ПрисоединенныйФайл, КоличествоПодписей) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Если КоличествоПодписей = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для ""%1"".'"),
			ПрисоединенныйФайл);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для ""%1"".'"),
			ПрисоединенныйФайл);
	КонецЕсли;
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шифрование.

// Шифрует файл в хранилище:
// - предлагает пользователю выбрать сертификаты для шифрования,
// - выполняет шифрование файла,
// - записывает зашифрованные данные вместе с отпечатками в хранилище,
// - оповещает систему и пользователя об изменениях.
// Используется в обработчике команды шифрования файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл, который требуется зашифровать.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
// 
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	ЗашифрованныеДанные = Неопределено;
	МассивОтпечатков = Новый Массив;
	
	Если НЕ ПолучитьЗашифрованныеДанные(ПрисоединенныйФайл,
	                                    ДанныеФайла,
	                                    ИдентификаторФормы,
	                                    ЗашифрованныеДанные,
	                                    МассивОтпечатков) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.Зашифровать(ПрисоединенныйФайл, ЗашифрованныеДанные, МассивОтпечатков);
	
	ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(ПрисоединенныйФайл, ДанныеФайла);
	
КонецПроцедуры

// Шифрует двоичные данные файла с помощью сертификатов, выбранных пользователем.
//
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на файл.
//  ДанныеФайла         - Структура с данными файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//  ЗашифрованныеДанные - Структура (возвращаемое значение) - содержит зашифрованные данные файла (для записи).
//  МассивОтпечатков    - Массив    (возвращаемое значение) - содержит отпечатки.
//
// Возвращаемое значение:
//  Истина, если данные успешно зашифрованы, Ложь - иначе.
//
Функция ПолучитьЗашифрованныеДанные(Знач ПрисоединенныйФайл,
                                    Знач ДанныеФайла,
                                    Знач ИдентификаторФормы,
                                    ЗашифрованныеДанные,
                                    МассивОтпечатков) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено,
		                          |операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	Если ДанныеФайла.Зашифрован Тогда
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |уже зашифрован.'"), Строка(ПрисоединенныйФайл)));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	
	ОтпечатокЛичногоСертификатаДляШифрования = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ОтпечатокЛичногоСертификатаДляШифрования;
	
	// Отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить.
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено
	 ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		
		МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(
				"ЭЦП",
				"ОтпечатокЛичногоСертификатаДляШифрования",
				ОтпечатокЛичногоСертификатаДляШифрования);
		Иначе
			Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов",               МассивСтруктурСертификатов);
	ПараметрыФормы.Вставить("ФайлСсылка",                               ПрисоединенныйФайл);
	ПараметрыФормы.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	
	МассивСертификатов = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
	
	Если ТипЗнч(МассивСертификатов) = Тип("Массив") Тогда
		
		Возврат ВыполнитьШифрованиеПоПараметрам(МассивСертификатов,
		                                        ДанныеФайла,
		                                        ИдентификаторФормы,
		                                        ЗашифрованныеДанные,
		                                        МассивОтпечатков);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Шифрует двоичные данные файла по указанному массиву сертификатов.
//
// Параметры:
//  МассивСертификатов  - Массив сертификатов для шифрования.
//  ДанныеФайла         - Структура данных файла.
//  ИдентификаторФормы  - УникальныйИдентификатор формы.
//  ЗашифрованныеДанные - Структура (возвращаемое значение) - содержит зашифрованные данные файла.
//  МассивОтпечатков    - Массив    (возвращаемое значение) - содержит отпечатки.
//
// Возвращаемое значение:
//  Истина - шифрование выполнено успешно, иначе Ложь.
//
Функция ВыполнитьШифрованиеПоПараметрам(Знач МассивСертификатов,
                                        Знач ДанныеФайла,
                                        Знач ИдентификаторФормы,
                                        ЗашифрованныеДанные,
                                        МассивОтпечатков)
	
	МассивОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Состояние(НСтр("ru = 'Выполняется шифрование ...'"));
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, ИдентификаторФормы);
	
	ЗашифрованныеДанные = Новый Структура;
	ЗашифрованныеДанные.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	
	Состояние(НСтр("ru = 'Шифрование завершено.'"));
	
	Возврат Истина;
	
КонецФункции

Процедура ОповеститьОбИзмененииИУдалитьФайлВРабочемКаталоге(Знач ПрисоединенныйФайл, Знач ДанныеФайла) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |зашифрован.'"),
		ПрисоединенныйФайл) );
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
		РабочийКаталогПользователя = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
		ПолныйПутьКФайлу = РабочийКаталогПользователя + ДанныеФайла.ИмяФайла;
		
		Файл = Новый Файл(ПолныйПутьКФайлу);
		
		Если Файл.Существует() Тогда
			Попытка
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПутьКФайлу);
			Исключение
				// Попытка удалить файл с диска.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Расшифровывает файл в хранилище:
// - показывает пользователю диалог с предложением расшифровать файл,
// - получает двоичные данные и массив отпечатков,
// - производит расшифровку,
// - записывает расшифрованные данные файла в хранилище.
// Используется как обработчик команды расшифровки файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//  ДанныеФайла        - Структура с данными файла.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач ДанныеФайла, Знач ИдентификаторФормы) Экспорт
	
	РасшифрованныеДанные = Неопределено;
	
	Если НЕ ПолучитьРасшифрованныеДанные(ПрисоединенныйФайл, ДанныеФайла, РасшифрованныеДанные, ИдентификаторФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.Расшифровать(ПрисоединенныйФайл, РасшифрованныеДанные);
	
	ОповеститьОРасшифровкеФайла(ПрисоединенныйФайл);
	
КонецПроцедуры

// Получает расшифрованные данные файла.
//
// Параметры:
//  ПрисоединенныйФайл   - Ссылка на файл.
//  ДанныеФайла          - Структура с данными файла.
//  РасшифрованныеДанные - Структура (возвращаемое значение) - содержит расшифрованные данные.
//  ИдентификаторФормы   - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Истина - данные успешно расшифрованы, Ложь - данные не расшифрованы.
// 
Функция ПолучитьРасшифрованныеДанные(Знач ПрисоединенныйФайл, Знач ДанныеФайла, РасшифрованныеДанные, Знач ИдентификаторФормы) Экспорт
	
#Если ВебКлиент Тогда
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(НСтр("ru = 'Расширение для работы с криптографией не подключено,
		                          |операция прервана.'"));
		Возврат Ложь;
	КонецЕсли;
#КонецЕсли
	
	ПредставленияСертификатов = "";
	
	МассивСертификатовШифрования = ДанныеФайла.МассивСертификатовШифрования;
	Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
		Отпечаток = СтруктураСертификата.Отпечаток;
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, Истина);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",                 НСтр("ru = 'Введите пароль для расшифровки'"));
	ПараметрыФормы.Вставить("ПредставленияСертификатов", ПредставленияСертификатов);
	ПараметрыФормы.Вставить("Файл",                      ПрисоединенныйФайл);
	
	КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
	
	Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
		Пароль = КодВозврата;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется расшифровка ...'"));
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Ложь
	КонецЕсли;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	АдресВременногоХранилищаРасшифрованныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРасшифрованные, ИдентификаторФормы);
	
#Если ВебКлиент Тогда
	АдресВременногоХранилищаТекста = "";
#Иначе
	ИзвлекатьТекстыФайловНаСервере = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИзвлекатьТекстыФайловНаСервере;
	Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
		ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
		ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
		АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ПолныйПутьКФайлу, ИдентификаторФормы);
		УдалитьФайлы(ПолныйПутьКФайлу);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
#КонецЕсли
	
	РасшифрованныеДанные = Новый Структура;
	РасшифрованныеДанные.Вставить("АдресВременногоХранилища",       АдресВременногоХранилищаРасшифрованныхДанных);
	РасшифрованныеДанные.Вставить("АдресВременногоХранилищаТекста", АдресВременногоХранилищаТекста);
	
	Состояние(НСтр("ru = 'Расшифровка завершена.'"));
	
	Возврат Истина;
	
КонецФункции

// Оповещает систему и пользователя о расшифровке файла.
// 
// Параметры:
//  ПрисоединенныйФайл - Ссылка на файл.
//
Процедура ОповеститьОРасшифровкеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ОповеститьОбИзменении(ПрисоединенныйФайл);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1""
		           |расшифрован.'"),
		ПрисоединенныйФайл) );
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Помещает файлы с диска в хранилище присоединенных файлов.
// 
// Параметры:
//  ВыбранныеФайлы                 - Массив - пути к файлам на диске.
//  ВладелецФайла                  - Ссылка на владельца файла.
//  НастройкиРаботыСФайлами        - Структура.
//  ПрисоединенныеФайлыМассив      - Массив (возвращаемое значение) - заполняется ссылками
//                                   на добавленные файлы.
//  ИдентификаторФормы             - УникальныйИдентификатор формы.
//
Процедура ПоместитьВыбранныеФайлыВХранилище(Знач ВыбранныеФайлы,
                                            Знач ВладелецФайла,
                                            Знач НастройкиРаботыСФайлами,
                                            ПрисоединенныеФайлыМассив,
                                            Знач ИдентификаторФормы)
	
	МаксРазмерФайла                  = НастройкиРаботыСФайлами.МаксимальныйРазмерФайла;
	ИзвлекатьТекстыФайловНаСервере   = НастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере;
	ЗапретЗагрузкиФайловПоРасширению = НастройкиРаботыСФайлами.ЗапретЗагрузкиФайловПоРасширению;
	СписокЗапрещенныхРасширений      = НастройкиРаботыСФайлами.СписокЗапрещенныхРасширений;
	
	ТекущаяПозиция = 0;
	
	ПоследнийСохраненныйФайл = Неопределено;
	
	Для Каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекущаяПозиция = ТекущаяПозиция + 1;
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		Если Файл.Размер() > МаксРазмерФайла Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Файл.Размер(), МаксРазмерФайла, Файл.Имя));
			Продолжить;
		КонецЕсли;
		
		Если Не ФайловыеФункцииКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(
					ЗапретЗагрузкиФайловПоРасширению,
					СписокЗапрещенныхРасширений,
					Файл.Расширение) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
				           |Обратитесь к администратору.'"),
				Файл.Расширение);
		КонецЕсли;
		
		Если ИзвлекатьТекстыФайловНаСервере Тогда
			АдресВременногоХранилищаТекста = "";
		Иначе
			АдресВременногоХранилищаТекста = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				ПолноеИмяФайла, ИдентификаторФормы);
		КонецЕсли;
	
		ВремяИзменения = ОбщегоНазначенияКлиент.ДатаСеанса();
		ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
		
		ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, Файл, ТекущаяПозиция);
		ПоследнийСохраненныйФайл = Файл;
		
		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла в хранилище:
					           |""%1"".'"),
					Файл.ПолноеИмя) );
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		
		// Создание карточки Файла в базе данных.
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
			ВладелецФайла,
			Файл.ИмяБезРасширения,
			ФайловыеФункцииКлиентСервер.РасширениеБезТочки(Файл.Расширение),
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста);
		
		Если ПрисоединенныйФайл = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПрисоединенныеФайлыМассив.Добавить(ПрисоединенныйФайл);
		
	КонецЦикла;
	
	ОбновитьСостояниеОСохраненииФайлов(ВыбранныеФайлы, ПоследнийСохраненныйФайл);
	
КонецПроцедуры

Функция ДиалогНужноПолучитьФайлССервера(Знач ПолноеИмяФайлаНаКлиенте, Знач ДанныеФайла, Знач ФайлРедактируется, Отказ = Ложь)
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайлаНаКлиенте);
	
	ДатаФайлаВБазе   = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
	ДатаФайлаНаДиске = МестноеВремя(ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения());
	
	Если (ДатаФайлаНаДиске - ДатаФайлаВБазе) > 1 Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Файл",                     ПолноеИмяФайлаНаКлиенте);
		ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",  ДатаФайлаВБазе);
		ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",         ДатаФайлаНаДиске);
		ПараметрыОткрытияФормы.Вставить("Заголовок",                НСтр("ru = 'В рабочем каталоге более новый файл'"));
		
		Если ФайлРедактируется Тогда
			Сообщение = НСтр("ru = 'Файл, отмеченный как взятый на редактирование, имеет на локальном компьютере более позднюю дату изменения. Открыть существующий файл или взять с сервера и перезаписать существующий?'");
		Иначе
			Сообщение = НСтр("ru = 'Файл на локальном компьютере имеет более позднюю дату, возможно, он был изменен. Открыть существующий файл или взять с сервера и перезаписать существующий?'");
		КонецЕсли;
		
		ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		Иначе
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли (ДатаФайлаВБазе - ДатаФайлаНаДиске) > 1 Тогда // В базе более новый.
		Если ФайлРедактируется Тогда // В рабочем каталоге на редактирование.
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Файл",                     ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВремяИзмененияНаСервере",  ДатаФайлаВБазе);
			ПараметрыОткрытияФормы.Вставить("ВРабочемКаталоге",         ДатаФайлаНаДиске);
			ПараметрыОткрытияФормы.Вставить("Заголовок",                НСтр("ru = 'В рабочем каталоге более старый файл'"));
			
			Сообщение = НСтр("ru = 'Файл, отмеченный как взятый на редактирование, имеет на локальном компьютере более раннюю дату изменения, чем на сервере. Открыть существующий файл или взять с сервера и перезаписать существующий?'");
			
			ПараметрыОткрытияФормы.Вставить("Сообщение", Сообщение);
			
			Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВыборДействияПриОбнаруженииБолееНовогоФайла", ПараметрыОткрытияФормы);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда  // Открыть существующий.
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда // Выйти ничего не делая.
				Отказ = Истина;
				Возврат Ложь;
			ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда  // Перезаписать.
				УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
				Возврат Истина;
			КонецЕсли;
		Иначе // В рабочем каталоге на чтение.
			УдалитьФайл(ПолноеИмяФайлаНаКлиенте);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УдалитьФайл(Знач ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(Ложь);
	УдалитьФайлы(ПолноеИмяФайла);
	
КонецПроцедуры

Функция СообщениеОПревышенииМаксимальноДопустимогоРазмераФайла(Знач РазмерФайла, Знач МаксимальныйРазмерФайла, Знач ИмяФайла)
	
	РазмерВМб     = РазмерФайла / (1024 * 1024);
	РазмерВМбМакс = МаксимальныйРазмерФайла / (1024 * 1024);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Размер файла ""%1"" (%2 Мб)
		           |превышает максимально допустимый размер файла (%3 Мб).'"),
		ИмяФайла,
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс) );
	
КонецФункции

Процедура ОткрытьФайлПриложением(Знач ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Открытие Файла.
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При открытии файла
				           |""%1""
				           |произошла ошибка:
				           |""%2"".'"),
				ИмяОткрываемогоФайла,
				ИнформацияОбОшибке.Описание));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСостояниеОСохраненииФайлов(Знач ВыбранныеФайлы, Знач Файл, Знач ТекущаяПозиция = Неопределено);
	
	Если Файл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазмерВМб = ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(Файл.Размер() / (1024 * 1024));
	
	Если ВыбранныеФайлы.Количество() > 1 Тогда
		
		Если ТекущаяПозиция = Неопределено Тогда
			Состояние(НСтр("ru = 'Сохранение файлов завершено.'"));
		Иначе
			ИндикаторПроцент = ТекущаяПозиция * 100 / ВыбранныеФайлы.Количество();
			
			НадписьПодробнее = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб) ...'"), Файл.Имя, РазмерВМб);
				
			ТекстСостояния = НСтр("ru = 'Сохранение нескольких файлов.'");
			
			Состояние(ТекстСостояния, ИндикаторПроцент, НадписьПодробнее, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	Иначе
		Если ТекущаяПозиция = Неопределено Тогда
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохранение файла ""%1"" (%2 Мб)
				           |завершено.'"), Файл.Имя, РазмерВМб);
		Иначе
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сохраняется файл ""%1"" (%2 Мб).
				           |Пожалуйста, подождите...'"), Файл.Имя, РазмерВМб);
		КонецЕсли;
		Состояние(ТекстПояснения);
	КонецЕсли;
	
КонецПроцедуры
