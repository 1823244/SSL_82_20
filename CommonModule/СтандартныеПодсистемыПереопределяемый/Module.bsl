////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// СтандартныеПодсистемы.ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиСервер.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Обработчики.Вставить("ОграничиватьДоступПоВиду*",               "УправлениеДоступом.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВидыДоступа*",                            "УправлениеДоступом.УстановкаПараметровСеанса");
	Обработчики.Вставить("ДобавлятьРуководителямДоступПодчиненных", "УправлениеДоступом.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "Пользователи.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "Пользователи.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Обработчики.Вставить("ТекущийЗамерВремени", "ОценкаПроизводительностиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ДанныеБизнесПроцессов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Валюты
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсточникиВнешнихЗадач.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВнешниеБизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Пользователи
	Массив.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Массив.Добавить(Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Массив.Добавить(Метаданные.РегистрыСведений.СвязиПоставляемыхДанных.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗависимостиПравДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПодчиненныеПользователи.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа.ПолноеИмя());
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	Возврат Массив;
	
КонецФункции

// Формирует список имен неразделенных регистров сведений, хранящих разделенные данные.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив строк.
// 
Процедура ПолучитьОбщиеРегистрыСведенийСРазделеннымиДанными(Знач ОбщиеРегистры) Экспорт
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбщиеРегистры.Добавить("ВерсииПодсистем");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОбщиеРегистры.Добавить("ОчередьЗаданий");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ОбщиеРегистры.Добавить("СвязиПоставляемыхДанных");
	ОбщиеРегистры.Добавить("ОбластиДляОбновленияПоставляемыхДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Формирует список типов данных которые не могут быть скопированы между областями
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНезагружаемыеВОбластиДанныхТипы(Знач Типы) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Для каждого СтрокаСоответствия Из ОбщегоНазначения.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(СтрокаСоответствия.ТипОбщихДанных);
		Если Справочники.ТипВсеСсылки().СодержитТип(СтрокаСоответствия.ТипОбщихДанных) Тогда
			Типы.Добавить(Тип("СправочникОбъект." + МетаданныеТипа.Имя));
		Иначе // Регистр сведений
			Типы.Добавить(Тип("РегистрСведенийНаборЗаписей." + МетаданныеТипа.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.СвязиПоставляемыхДанных"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОбластиДляОбновленияПоставляемыхДанных"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.Пользователи
	Типы.Добавить(Тип("СправочникОбъект.ВнешниеПользователи"));
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОчередьЗаданий"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	Типы.Добавить(Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
КонецПроцедуры

// Формирует список типов данных которые не должны передаваться между
// информационными базам.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНевыгружаемыеИзИнформационнойБазыТипы(Знач Типы) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныеСокращения"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныйКлассификатор"));
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.СвязиПоставляемыхДанных"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОбластиДляОбновленияПоставляемыхДанных"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Вызывается при удалении области данных.
// В процедуре необходимо удалить данные области данных, которые не
// могут быть удалены стандартным механизмом
//
// Параметры:
// ОбластьДанных - Тип значения разделителя - значение разделителя
// удаляемой области данных.
// 
Процедура ПриУдаленииОбластиДанных(Знач ОбластьДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	Удаление = Новый УдалениеОбъекта(ПоставляемыеДанныеПовтИсп.ПолучитьУзелОбластиДанных(ОбластьДанных));
	Удаление.ОбменДанными.Загрузка = Истина;
	Удаление.Записать();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПолучитьТаблицуПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьРазделениеПоОбластямДанных");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "РежимИспользованияИнформационнойБазы");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "КопироватьОбластиДанныхИзЭталонной");
	КонецЕсли;
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.ЗапретЧтения = Истина;
	
	// Для совместимости с предыдущими версиями
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	СтрокаПараметра.Имя = "URLСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ИмяСлужебногоПользователяСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ПарольСлужебногоПользователяСервиса";
	СтрокаПараметра.ЗапретЧтения = Истина;
	// Конец Для совместимости с предыдущими версиями
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ВерсияКонфигурации";
	СтрокаПараметра.Описание = НСтр("ru = 'Версия конфигурации'");
	СтрокаПараметра.ЗапретЗаписи = Истина;
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресСервисаПоставляемыхДанных");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяСервисаПоставляемыхДанных");
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, 
		"ПарольСлужебногоПользователяСервисаПоставляемыхДанных");
	СтрокаПараметра.ЗапретЧтения = Истина;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "СообщениеБлокировкиПриОбновленииКонфигурации");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	// (для совместимости с предыдущими версиями)
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресВебСервисаОбменаДанными");
	СтрокаПараметра.Имя = "URLСервисаОбмена";
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой получения значений параметров ИБ из одноименных
// констант.
//
// Параметры:
// ИменаПараметров - Массив строк - имена параметров, значения которых необходимо получить.
// В случае если значение параметра получается в данной процедуре, необходимо удалить
// имя обработанного параметра из массива.
// ЗначенияПараметров - Структура - значения параметров.
//
Процедура ПриПолученииЗначенийПараметровИБ(Знач ИменаПараметров, Знач ЗначенияПараметров) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// ВерсияКонфигурации
	Индекс = ИменаПараметров.Найти("ВерсияКонфигурации");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ВерсияКонфигурации", Метаданные.Версия);
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// URLСервиса
	Индекс = ИменаПараметров.Найти("URLСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервиса", Константы.ВнутреннийАдресМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// ИмяСлужебногоПользователяСервиса
	Индекс = ИменаПараметров.Найти("ИмяСлужебногоПользователяСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ИмяСлужебногоПользователяСервиса", Константы.ИмяСлужебногоПользователяМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// URLСервисаОбмена
	Индекс = ИменаПараметров.Найти("URLСервисаОбмена");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервисаОбмена", Константы.АдресВебСервисаОбменаДанными.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	Если ЗначенияПараметров.Свойство("URLСервиса") Тогда
		Константы.ВнутреннийАдресМенеджераСервиса.Установить(ЗначенияПараметров.URLСервиса);
		ЗначенияПараметров.Удалить("URLСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ИмяСлужебногоПользователяСервиса") Тогда
		Константы.ИмяСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ИмяСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ИмяСлужебногоПользователяСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ПарольСлужебногоПользователяСервиса") Тогда
		Константы.ПарольСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ПарольСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ПарольСлужебногоПользователяСервиса");
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	Если ЗначенияПараметров.Свойство("URLСервисаОбмена") Тогда
		Константы.АдресВебСервисаОбменаДанными.Установить(ЗначенияПараметров.URLСервисаОбмена);
		ЗначенияПараметров.Удалить("URLСервисаОбмена");
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОчередьЗаданий.ОбновитьРазделенныеРегламентныеЗадания();
	
	Если Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Получить() = 0 Тогда
		Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Установить(600);
	КонецЕсли;
	
	Если Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить() = 0 Тогда
		Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Установить(1);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.УдалитьЭлементыСправочникаСтраныМира();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наооборот.
//
Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступом.ОбновитьПоставляемыеПрофилиИГруппыДоступа();
	УправлениеДоступом.ОбновитьТаблицыРолейПрофилейГруппДоступа();
	УправлениеДоступом.ОбновитьЗависимостиПравДоступа();
	УправлениеДоступом.ОбновитьТаблицыПравПоЗначениямДоступа();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Блокирует текущую область, начиная транзакцию и накладывая исключительную блокировку
// на все разделяемые объекты метаданных области.
//
Процедура ЗаблокироватьТекущуюОбластьДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	НачатьТранзакцию();
	РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(Истина);
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Снимает блокировки с текущей области, фиксируя (или, в случае ошибки, откатывая) транзакцию.
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	// Если ИнформацияОбОшибке().Описание заполнено - код выполняется
	// из Исключение ...
	Если ПустаяСтрока(ИнформацияОбОшибке().Описание) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Дополнительные действия, выполняемые при изменении разделения сеанса.
//
Процедура ПриИзмененииОбластиДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.ОчиститьВсеПараметрыСеансаКромеРазделителей();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Устанавливает разделение сеанса.
//
// Параметры:
// Использование - Булево - Использование разделителя ОбластьДанных в сеансе
// ОбластьДанных - Число - Значение разделителя ОбластьДанных
//
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Возвращает значение разделителя текущей области данных.
// В случае если значение не установлено выдается ошибка.
// 
// Возвращаемое значение: 
// Тип значения разделителя.
// Значение разделителя текущей области данных. 
// 
Функция ЗначениеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

// Возвращает флаг использования разделителя ОбластьДанных для текущего сеанса.
// 
// Возвращаемое значение: 
// Булево - Истина разделение используется, иначе нет.
// 
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

// Переопределяемый обработчик, вызываемый перед записью пользователя.
//
// Параметры:
// ПользовательОбъект - СправочникОбъект.Пользователи - записываемый пользователь
//
Процедура ПередЗаписьюПользователя(ПользовательОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ПередЗаписьюПользователя(ПользовательОбъект);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Переопределяемый обработчик, вызываемый при записи пользователя.
//
// Параметры:
// ПользовательОбъект - СправочникОбъект.Пользователи - записываемый пользователь
// ОписаниеПользователя - Объект XDTO: {"http://www.1c.ru/SaaS/1.0/XMLSchema/ManageApplication"}UserInfo -
//   описание пользователя менеджера сервиса
// ПользовательСуществует - Булево - пользователь существовал до начала транзакции записи
// ДоступРазрешен - Булево - после записи пользователя, доступ к ИБ должен быть разрешен
// СоздатьПользователяСервиса - Булево - требуется создать нового пользователя сервиса
//
Процедура ПриЗаписиПользователя(ПользовательОбъект, ОписаниеПользователя, ПользовательСуществует, ДоступРазрешен, СоздатьПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ПриЗаписиПользователя(ПользовательОбъект, ОписаниеПользователя, ПользовательСуществует, 
		ДоступРазрешен, СоздатьПользователяСервиса);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Переопределяемый обработчик, вызываемый при получении формы справочника Пользователи
//
// Параметры:
//  См. параметры платформенного обработчика ОбработкаПолученияФормы
//
Процедура ОбработкаПолученияФормыПользователя(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиВМоделиСервиса.ОбработкаПолученияФормыПользователя(ВидФормы, Параметры, ВыбраннаяФорма, 
		ДополнительнаяИнформация, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Переопределяемый обработчик, вызываемый при записи задания дополнительной обработки.
//
// Параметры:
// РегламентноеЗадание - РегламентноеЗадание - записываемое регламентное задание.
// Использование - Булево - флаг использования задания.
//
Процедура ПриЗаписиЗаданияДопОбработки(РегламентноеЗадание, Использование) Экспорт

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	ДополнительныеОтчетыИОбработкиВМоделиСервиса.УточнитьПараметрыЗаданияВОчереди(РегламентноеЗадание, Использование);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
КонецПроцедуры

// Устанавливает использование регламентного задания заполнения данных управления доступом.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Знач Использование) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомВМоделиСервиса.УстановитьИспользованиеЗаданияЗаполненияДанных(Использование);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Добавляет дополнительные параметры работы клиента при работе в модели сервиса.
//
// Параметры:
// Параметры - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентаВМоделиСервиса(Знач Параметры) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.ДобавитьПараметрыРаботыКлиентаВМоделиСервиса(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность
//

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификатор.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	БизнесПроцессыИЗадачиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.Валюты
	РаботаСКурсамиВалют.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзмененияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	КалендарныеГрафики.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурации.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	ОбновлениеИнформационнойБазыВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	ПолнотекстовыйПоискСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеФайловИзИнтернета.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.Пользователи
	Пользователи.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	ЭлектроннаяПочта.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиВызовСервера.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.ОчередьЗаданий
	ОчередьЗаданий.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОчередьЗаданий
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.ФизическиеЛица
	ФизическиеЛица.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	// СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	ЭлектроннаяЦифроваяПодпись.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	Возврат Обработчики;
	
КонецФункции

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
// ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
// пользователя ИБ принадлежность которого к неразделенным пользователям
// требуется проверить.
//
Функция ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиВМоделиСервиса.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат Ложь;
	
КонецФункции

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиВМоделиСервиса.ЗарегистрироватьНеразделенногоПользователя();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Функция ДоступноИзменениеПользователей() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиВМоделиСервиса.ДоступноИзменениеПользователей();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат Истина;
	
КонецФункции

// Возвращает флаг доступности подсистемы ПолучениеФайловИзИнтернета.
//
// ВозвращаемоеЗначение - Булево - 
//  Истина - подсистема доступна, любое другое значение - подсистемв
//  не доступна
//
Процедура ДоступноПолучениеФайловИзИнтернета(ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = Истина;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные
//

// Функция создает таблицу соответствия разделенных типов данных общим данным
//
// Возвращаемое значение:
// ТаблицаЗначений - соответствия типов данных
//
Функция ТаблицаСоответствияРазделенныхДанныхОбщим() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ТаблицаЗначений.Колонки.Добавить("ВидПоставляемыхДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипОбщихДанных");
	ТаблицаЗначений.Колонки.Добавить("ТипРазделенныхДанных");
	ТаблицаЗначений.Колонки.Добавить("КопироватьВоВсеОбластиДанных");
	
	ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаЗначений);
	ПоставляемыеДанныеПереопределяемый.ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаЗначений);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Процедура формирует таблицу соответствия разделенных типов данных 
// общим данным библиотеки
//
// Параметры:
// ТаблицаСоответствия - ТаблицаЗначений - таблица, которую необходимо 
// заполнить соответствиями типов
//
Процедура ПолучитьТаблицуСоответствияРазделенныхДанныхОбщим(ТаблицаСоответствия) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.Справочник_Валюты;
	НоваяСтрока.ТипОбщихДанных = Тип("СправочникСсылка.КлассификаторВалют");
	НоваяСтрока.ТипРазделенныхДанных = Тип("СправочникСсылка.Валюты");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Ложь;
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_КурсыВалют;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийКлючЗаписи.КурсыВалютПоКлассификатору");
	НоваяСтрока.ТипРазделенныхДанных = Тип("РегистрСведенийКлючЗаписи.КурсыВалют");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Неопределено;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.Справочник_СтраныМира;
	НоваяСтрока.ТипОбщихДанных = Тип("СправочникСсылка.СтраныМира");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Ложь;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_АдресныйКлассификатор;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийНаборЗаписей.АдресныйКлассификатор");
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_АдресныеСокращения;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийНаборЗаписей.АдресныеСокращения");
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.Справочник_ПроизводственныеКалендари;
	НоваяСтрока.ТипОбщихДанных = Тип("СправочникСсылка.ПроизводственныеКалендари");
	НоваяСтрока.ТипРазделенныхДанных = Тип("СправочникСсылка.Календари");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Ложь;
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	НоваяСтрока.ВидПоставляемыхДанных = Перечисления.ВидыПоставляемыхДанных.РегистрСведений_ДанныеПроизводственногоКалендаря;
	НоваяСтрока.ТипОбщихДанных = Тип("РегистрСведенийКлючЗаписи.ДанныеПроизводственногоКалендаря");
	НоваяСтрока.ТипРазделенныхДанных = Тип("РегистрСведенийКлючЗаписи.КалендарныеГрафики");
	НоваяСтрока.КопироватьВоВсеОбластиДанных = Неопределено;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Процедура переопределяет действия при подборе поставляемых данных в область данных
// для библиотечных поставляемых данных
//
// Параметры:
// СсылкаОбщихДанных - Ссылка - ссылка на элемент подбираемый в область данных
//
Процедура ПриПодбореПоставляемыхДанныхВОбласть(СсылкаОбщихДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	Если ТипЗнч(СсылкаОбщихДанных) = Тип("СправочникСсылка.КлассификаторВалют") Тогда
		ПоставляемыеДанные.ЗарегистрироватьИзмененияДанныхРегистраСведений(СсылкаОбщихДанных, "КурсыВалютПоКлассификатору", "Валюта", "Период,Валюта");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если ТипЗнч(СсылкаОбщихДанных) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда
		ПоставляемыеДанные.ЗарегистрироватьИзмененияДанныхРегистраСведений(СсылкаОбщихДанных, "ДанныеПроизводственногоКалендаря", "ПроизводственныйКалендарь", "ПроизводственныйКалендарь,Дата,Год");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Вызывается при необходимости обновления разделенного набора записей из неразделенного.
//
// Параметры:
// Эталон - РегистрСведенийНаборЗаписей - неразделенный набор записей по которому необходимо
//        обновить разделенный.
// ОбъектМД - ОбъектМетаданных - метаданные неразделенного регистра сведений
// Менеджер - РегистрСведенийМенеджер - менджер разделенного регистра сведений
// ТипИсточника - Тип - тип ключа записи неразделенного регистра
// ТипПриемник - Тип - тип ключа записи разделенного регистра
// ОбъектПриемник - РегистрСведенийНаборЗаписей - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить незаписанный
//        набор записей этому параметру.
// СтандартнаяОбработка - Булево - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить этому 
//        параметру значение Ложь.
//
Процедура ПередКопированиемНабораЗаписейИзЭталона(Эталон, МетаданныеОбъекта, Менеджер, ТипИсточника, 
	ТипПриемника, ОбъектПриемник, СтандартаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если МетаданныеОбъекта.Имя = "ДанныеПроизводственногоКалендаря" Тогда
		
		СтандартаяОбработка = Ложь;
		
		СоответствиеИменРеквизитов = Новый Соответствие;
		СоответствиеИменРеквизитов.Вставить("ПроизводственныйКалендарь", "Календарь");
		СоответствиеИменРеквизитов.Вставить("Дата",	"ДатаГрафика");
		
		ВключаемыеВидыДней = Новый Массив;
		ВключаемыеВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
		ВключаемыеВидыДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
		
		Результат = Менеджер.СоздатьНаборЗаписей();
		
		Для Каждого ЭлементОтбора Из Эталон.Отбор Цикл
			Если НЕ ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если СоответствиеИменРеквизитов[ЭлементОтбора.Имя] <> Неопределено Тогда
				Результат.Отбор[СоответствиеИменРеквизитов[ЭлементОтбора.Имя]].Установить(ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(ЭлементОтбора.Значение));	
			Иначе 
				Результат.Отбор[ЭлементОтбора.Имя].Установить(ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(ЭлементОтбора.Значение));
			КонецЕсли;
		КонецЦикла;
		
		Результат.ОбменДанными.Загрузка = Истина;
		
		МетаданныеПриемника = Результат.Метаданные();
		
		Для Каждого СтрокаЭталона Из Эталон Цикл
			СтрокаРезультата = Результат.Добавить();
			СтрокаРезультата.Календарь		= ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(СтрокаЭталона.ПроизводственныйКалендарь);
			СтрокаРезультата.Год			= СтрокаЭталона.Год;
			СтрокаРезультата.ДатаГрафика	= СтрокаЭталона.Дата;
			СтрокаРезультата.ДеньВключенВГрафик	= ВключаемыеВидыДней.Найти(СтрокаЭталона.ВидДня) <> Неопределено;
		КонецЦикла;
			
		ОбъектПриемник = Результат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры
	
// Вызывается при необходимости обновления разделенного элемента из неразделенного.
//
// Параметры:
// Эталон - СправочникОбъект - неразделенный объект по которому необходимо
//        обновить разделенный.
// ОбъектМД - ОбъектМетаданных - метаданные неразделенного справочника
// Менеджер - СправочникМенеджер - менджер разделенного регистра сведений
// ТипИсточника - Тип - тип ссылки неразделенного справочника
// ТипПриемник - Тип - тип ссылки разделенного справочника
// ОбъектПриемник - СправочникОбъект - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить незаписанный
//        объект этому параметру.
// СтандартнаяОбработка - Булево - в случае если в процедуре выполнено
//        переопределение стандартного поведения обновления, необходимо присвоить этому 
//        параметру значение Ложь.
//
Процедура ПередКопированиемОбъектаИзЭталона(Эталон, МетаданныеИсточника, Менеджер, ТипИсточника, 
	ТипПриемника, ОбъектПриемник, СтандартаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	// СтандартныеПодсистемы.КалендарныеГрафики
	Если МетаданныеИсточника.Имя = "ПроизводственныеКалендари" Тогда
		
		СоответствиеИменРеквизитов = Новый Соответствие;
		СоответствиеИменРеквизитов.Вставить("ПроизводственныйКалендарь", "Ссылка");
		
		СтандартаяОбработка = Ложь;
		
		СсылкаРезультата = ПоставляемыеДанные.РазделеннаяСсылкаПоОбщей(Эталон.Ссылка);
		
		МетаданныеПриемника = СсылкаРезультата.Метаданные();
		
		ИерархическийСправочник = МетаданныеПриемника.Иерархический И МетаданныеИсточника.Иерархический;
		
		Результат = СсылкаРезультата.ПолучитьОбъект();
		Если Результат = Неопределено Тогда
			Результат = Менеджер.СоздатьЭлемент();
			Результат.УстановитьСсылкуНового(СсылкаРезультата);
		КонецЕсли;
		Результат.ОбменДанными.Загрузка = Истина;
		
		Результат.Наименование = Эталон.Наименование;
		
		Если ИерархическийСправочник Тогда
			Результат.Родитель = ПоставляемыеДанные.ПреобразоватьОбщееЗначениеВРазделенное(Эталон.Родитель);
		КонецЕсли;
		
		ИерархияГрупп = МетаданныеПриемника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		
		Результат["ПроизводственныйКалендарь"] 	= Эталон["Ссылка"];
		Результат["ВидКалендаря"] 				= Перечисления.ВидыКалендарей.Пятидневка;
		
		ОбъектПриемник = Результат;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Процедура копирует список элементов общего справочника в новую область данных
//
// Параметры:
// СписокКодовСправочника - массив - массив кодов справочника
// ТипИсточника           - тип - тип общего справочника,
//                                откуда будут скопированы элементы
//
Процедура СкопироватьЭлементыСправочникаПоставляемыхДанных(СписокКодовСправочника, ТипИсточника) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СкопироватьЭлементыСправочника(СписокКодовСправочника, ТипИсточника);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Считывает текущее состояние разделенного объекта и приводит форму
// в соответстие с ним
//
Процедура СчитатьФлагРучногоИзмененияПоставляемыхДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СчитатьФлагРучногоИзменения(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Записывает состояние разделенного объекта
//
Процедура ЗаписатьФлагРучногоИзменениеПоставляемыхДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗаписатьФлагРучногоИзменение(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Копирует данные общего объекта в разделенный и изменяет
// состояние разделенного объекта
//
Процедура ВосстановитьЭлементИзОбщихДанных(Знач Форма) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ВосстановитьЭлементИзОбщихДанных(Форма);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// При необходимости создает узел для области данных с переданным значеним
// разделителя.
//
// Параметры:
//  ОбластьДанных - Число - значение разделеителя области данных для которой
//   требуется создать узел.
//
Процедура СоздатьУзелОбластиДанных(Знач ОбластьДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СоздатьУзелОбластиДанных(ОбластьДанных);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Очередь заданий
//

// Заполняет список имен неразделенных регламентных заданий, которые
// должны выполняться в разделенном режиме.
//
// Параметры:
// СписокРазделенныхРегламентныхЗаданий - Массив - Массив с именами неразделенных 
//                                        регламентных заданий, которые будут 
//                                        выполняться механизмом подсистемы "Регламентные задания"
//                                        в областях данных.
//
Процедура ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗаполнениеДанныхДляОграниченияДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗапускДополнительныхОбработок");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ФайловыеФункции
	СписокРазделенныхРегламентныхЗаданий.Добавить("ИзвлечениеТекста");
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	СписокРазделенныхРегламентныхЗаданий.Добавить("МониторингЗадач");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УведомлениеИсполнителейОНовыхЗадачах");
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	СписокРазделенныхРегламентныхЗаданий.Добавить("ОбновлениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПерестроениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	// Конец СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения 
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Взаимодействия
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПолучениеИОтправкаЭлектронныхПисем");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Процедура формирует таблицу регламентных заданий
// с признаком использования
//
// Параметры:
// ТаблицаИспользования - ТаблицаЗначений - таблица, которую необходимо 
// заполнить регламентными заданиями и признаком использования
//
Процедура ЗаполнитьТаблицуИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
	// СтандартныеПодсистемы.Валюты
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКурсовВалют";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ОбменДанными
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ВыполнениеОбменаДанными";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.Банки
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКлассификатораБанковРФССайтаРБК";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Банки
	
КонецПроцедуры

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Встреча") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Тема, ПредставлениеОбъекта);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Формирует список методов разрешенных к вызову через механизм очереди заданий
//
// Параметры:
//  РазрешенныеМетоды - Массив - имена методов, разрешенных к вызову через
//    механизм очереди заданий
//
Процедура ПолучитьРазрешенныеМетодыОчередиЗаданий(Знач РазрешенныеМетоды) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбновлениеИнформационнойБазыВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ОчиститьОбластьДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ПоставляемыеДанные.ОбновитьПоставляемыеДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	РазрешенныеМетоды.Добавить("УправлениеДоступом.ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами
//  МассивРеквизитов - Массив - Массив имён реквизитов (из метаданных), содержащих даты
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
		
	// СтандартныеПодсистемы.ЗаметкиПользователя
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Заметки") Тогда
		МассивРеквизитов.Очистить();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗаметкиПользователя
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Завершение работы пользователей
//

// СтандартныеПодсистемы.ЗавершениеРаботыПользователей 

// Вызывается при отключении сеанса на стороне сервера 1С:Предприятия.
//
// Параметры
//  НомерСеанса - Число - номер сеанса для отключения.
//  Результат - Булево – результат отключения сеанса.
//  СообщениеОбОшибке - Строка - в этом параметре возвращается текст сообщения об ошибке в случае неудачи.
//  СтандартнаяОбработка - Булево - вернуть Ложь, если необходимо запретить стандартную обработку отключения сеанса.
//
Процедура ПриОтключенииСеанса(НомерСеанса, Результат, СообщениеОбОшибке, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
		Возврат;
	КонецЕсли;	
		
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;	
	
	// Если сервер работает не под управлением ОС Microsoft Windows, то передаем управление Агенту сервиса.
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Параметры = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Попытка
		Результат = РаботаВМоделиСервиса.УдалитьСеансыИРазорватьСоединенияЧерезАгентСервиса(НомерСеанса, Параметры);	
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей 

// СтандартныеПодсистемы.КалендарныеГрафики 

/////////////////////////////////////////////////////////////////////////////////
// Календарные графики 
//

// Процедура выполняет необходимые действия перед записью набора записей 
// регистра сведений ДанныеПроизводственногоКалендаря.
// В частности, формирует в переданном объекте Запрос временную таблицу 
// ВТ_СтарыеКлючи, содержащую данные набора записей 
//
// Параметры:
// Запрос - объект запрос, в менеджере временных таблиц которого формируется таблица данных регистра
// НаборЗаписей - набор записей регистра сведений
//
Процедура ДанныеПроизводственногоКалендаряПередЗаписьюНабораЗаписей(Отказ, Замещение, НаборЗаписей, Запрос) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.СформироватьВременнуюТаблицуДанныхНабораЗаписей(Запрос, НаборЗаписей, "ПроизводственныйКалендарь, Дата, Год"); 
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Процедура выполняет необходимые действия при записи набора записей 
// регистра сведений ДанныеПроизводственногоКалендаря.
// В частности, регистрирует изменения данных набора записей регистра сведений 
// в плане обмена "Поставляемые данные".
//
// Параметры:
// Запрос - объект запрос, в менеджере временных таблиц которого сформирована временная таблица данных регистра до изменения
// НаборЗаписей - набор записей регистра сведений
//
Процедура ДанныеПроизводственногоКалендаряПриЗаписиНабораЗаписей(Отказ, Замещение, НаборЗаписей, Запрос) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ПоставляемыеДанные.ЗарегистрироватьИзмененияДанныхНабораЗаписей(Запрос, НаборЗаписей, "ПроизводственныйКалендарь", "ПроизводственныйКалендарь, Дата, Год"); 
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КалендарныеГрафики 


/////////////////////////////////////////////////////////////////////////////////
// Версионирование интерфейсов
//

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсии(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
КонецПроцедуры

// Выполняет дополнительные преобразования параметров подключения.
//
// Параметры:
// СтруктураПараметровПодключения - Структура:
//	- URL - Строка - Адрес опубликованного приложения.
//	- UserName - Строка - Имя пользователя сервиса.
//	- Password - Строка - Пароль пользователя сервиса.
// ИмяИнтерфейса - Строка.
//
// Пример реализации:
// 	// Перед подключением к сервису надо декодировать пароль из base64-представления:
//	Если СтруктураПараметровПодключения.Свойство("Password")
//		И ЗначениеЗаполнено(СтруктураПараметровПодключения.Password) Тогда
//
// 		СтруктураПараметровПодключения.password = Base64ВСтроку(СтруктураПараметровПодключения.password);
//
//  КонецЕсли;
//
Процедура ПреобразоватьПараметрыПодключенияКСервису(Знач СтруктураПараметровПодключения, Знач ИмяИнтерфейса = Неопределено) Экспорт
	
	
КонецПроцедуры
