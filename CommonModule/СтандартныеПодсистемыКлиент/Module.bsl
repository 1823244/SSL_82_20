////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает заголовок главного окна приложения, используя представление текущего пользователя,
// значение константы ЗаголовокПриложения и заголовок приложения по умолчанию.
//
Процедура УстановитьРасширенныйЗаголовокПриложения() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеПользователя = ПараметрыКлиента.АвторизованныйПользователь;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
				ШаблонЗаголовка = "%1 / %2 / %3 / ";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПараметрыКлиента.ПредставлениеОбластиДанных, ПараметрыКлиента.ПодробнаяИнформация, 
					ПредставлениеПользователя);
			Иначе
				ШаблонЗаголовка = "%1 / %2 / ";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПараметрыКлиента.ПодробнаяИнформация, ПредставлениеПользователя);
			КонецЕсли;
		Иначе
			ШаблонЗаголовка = "%1 / %2 / %3 / ";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
				СокрЛП(ПредставлениеЗаголовка), ПредставлениеПользователя, ПредставлениеКонфигурации);
		КонецЕсли;
		
		УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	Иначе
		ШаблонЗаголовка = "%1 / %2 / ";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			НСтр("ru = 'Не установлены разделители'"), ОбщегоНазначения.ПолучитьПодробнуюИнформациюКонфигурации());
		
		УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Стандартные действия выполняемые перед началом работы системы.
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения операции. 
//  В случае установки в Истина вход в систему осуществлен не будет.
//
Процедура ДействияПередНачаломРаботыСистемы(Отказ) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ПервыйЗапуск() Тогда
		
		Если Найти(ПараметрЗапуска, "ИнициализироватьРазделеннуюИБ") <> 0
			ИЛИ Найти(ПараметрЗапуска, "InitializeSeparatedIB") <> 0 Тогда
			
			ОбщегоНазначения.УстановитьПараметрыРазделенияИнформационныйБазы(Истина);
			
			ПрекратитьРаботуСистемы(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступноИспользованиеРазделенныхДанных = ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных();
	
	Если НЕ ДоступноИспользованиеРазделенныхДанных Тогда
		ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрЗапуска) Тогда
		ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
		ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
		
		Если ЗначениеПараметраЗапуска = ВРег("ВойтиВОбластьДанных") Тогда
			Если ПараметрыЗапуска.Количество() < 2 Тогда
				ВызватьИсключение(НСтр("ru = 'При указании параметра запуска ВойтиВОбластьДанных,
						|дополнительным параметром необходимо указать значение разделителя.'"));
			КонецЕсли;
			
			Попытка
				ЗначениеРазделителя = Число(ПараметрыЗапуска[1]);
			Исключение
				ВызватьИсключение(НСтр("ru = 'Значением разделителя должно быть число.'"));
			КонецПопытки;
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
			ДоступноИспользованиеРазделенныхДанных = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступноИспользованиеРазделенныхДанных Тогда
		
		СтандартныеПодсистемыКлиентПереопределяемый.ПередНачаломРаботыСистемы(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Стандартные действия выполняемые при начале работы системы.
//
// Параметры
//  ОбрабатыватьПараметрыЗапуска - Булево - Истина, если обработчик вызван при 
//  непосредсвенном входе пользователя в систему и должен обработать параметры
//  запуска (если это предусмотрено его логикой). Ложь, если обработчик вызван
//  при интерактивном входе неразделенного пользователя в область данных и
//  обрабатывать параметры запуска не следует.
//
Процедура ДействияПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска = Истина) Экспорт
	
	СтандартныеПодсистемыКлиентПереопределяемый.ПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска);
	ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска);
	
КонецПроцедуры

// Соответствует обработчику ПередЗавершениемРаботыСистемы
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
Процедура ДействияПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	СтандартныеПодсистемыКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Отказ);
	
КонецПроцедуры

// Показывает пользователю диалог подтверждения выхода из программы.
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
// Возвращаемое значение:
//  Булево - Истина, если пользователь отказался от закрытия программы;
//           Ложь, если пользователь согласился закрыть программу, или диалог закрытия не вызывался.
//
Функция ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	// Если программно не отключено предупреждение, то зачитываем из настроек
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы <> Истина Тогда 
		ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Не СтандартныеПодсистемыВызовСервера.ЗагрузитьНастройкуПодтвержденияПриЗавершенииПрограммы();
	КонецЕсли;
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БольшеНеЗадаватьЭтотВопрос = Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru = 'Завершить'"));
	Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru = 'Не завершать'"));
	
	Результат = ВопросПользователю(НСтр("ru = 'Завершить работу с программой?'"), Кнопки, , КодВозвратаДиалога.Да, НСтр("ru = 'Завершение работы'"), 
		КодВозвратаДиалога.Нет, БольшеНеЗадаватьЭтотВопрос);
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(НЕ БольшеНеЗадаватьЭтотВопрос);
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь
	
КонецФункции

// Отключает выдачу предупреждения пользователю при завершении работы программы.
//
Процедура ПропуститьПредупреждениеПередЗавершениемРаботыСистемы() Экспорт
	
	ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
	
КонецПроцедуры

// Проверяет версию платформы, в зависмости от места вызова и возвращает Истина, 
// если она подходит для запуска конфигурации.
//
// Параметры:
//	МестоВызова - Строка - место, из которого вызывается процедура.
//						   Варианты: 	"ПередНачаломРаботы" - если вызывается из обработчика ПередНачаломРаботыСистемы()
//										"ПриНачалеРаботы" - если вызывается из обработчика ПриНачалеРаботыСистемы()
//
// Возвращаемое значение - Булево - Если версия актуальна, тогда Истина, иначе - Ложь.
//
Функция ПроверитьВерсиюПлатформыПриЗапуске(МестоВызова) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Для Обычного режима проверка выполняется в обработчике "ПриНачалеРаботыСистемы".
	// Для Управляемого режима проверка выполняется в обработчике "ПередНачаломРаботыСистемы".
	#Если ТолстыйКлиентОбычноеПриложение Тогда  
		Если МестоВызова = "ПередНачаломРаботы" Тогда 
			Возврат Истина;
		КонецЕсли;
	#Иначе
		Если МестоВызова = "ПриНачалеРаботы" Тогда 
			Возврат Истина;
		КонецЕсли;
	#КонецЕсли	
	
	ПараметрыПроверки = Новый ФиксированнаяСтруктура("ВерсияПлатформы, РаботаВПрограммеЗапрещена", "8.2.15.310", Ложь);
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки);
	
	Возврат ПроверитьВерсиюПлатформы(ПараметрыПроверки.ВерсияПлатформы, ПараметрыПроверки.РаботаВПрограммеЗапрещена);
	
КонецФункции	

// Проверяет минимально допустимую версию платформы для запуска.
// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы, то пользователю будет 
// показано оповещение. Работа программы будет прекращена, если ЗавершитьРаботу = Истина.
//
// Параметры:
//  РекомендуемаяВерсияПлатформы - Строка - версия платформы рекомендуемая для работы;
//  РаботаВПрограммеЗапрещена    - Булево - если Истина и текущая версия платформы меньше рекомендуемой, 
//                                          то продолжение работы в программе невозможно.
//
// Возвращаемое значение:
//  Булево - Истина, если версия платформы подходит для работы.
//
Функция ПроверитьВерсиюПлатформы(знач РекомендуемаяВерсияПлатформы, знач РаботаВПрограммеЗапрещена = Ложь) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияПлатформы) >= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РаботаВПрограммеЗапрещена Тогда
		ТекстСообщения = НСтр("ru='Продолжение невозможно, работа программы будет завершена.
			|Необходимо обновить версию платформы 1С:Предприятие.'");
	Иначе
		ТекстСообщения = 
			НСтр("ru='Рекомендуется прекратить работу программы и обновить версию платформы 1С:Предприятие.
		         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.
				 |
		         |Прекратить работу программы?'");
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	Параметры.Вставить("ЗавершитьРаботу", РаботаВПрограммеЗапрещена);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", РекомендуемаяВерсияПлатформы);
	Результат = ОткрытьФормуМодально("ОбщаяФорма.НерекомендуемаяВерсияПлатформы", Параметры);
	Если РаботаВПрограммеЗапрещена Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.OK Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывает форму вопроса.
//
// Параметры:
//  ТекстСообщения - строка - текст вопроса для пользователя
//  Кнопки - РежимДиалогаВопрос; СписокЗначений. 
//           Задает состав и текст кнопок диалога, а также, связанные с кнопками значения.
//           При использовании типа СписокЗначений:
//           Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки.
//           В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;
//           Примечание: значение должно поддерживать XDTO сериализацию.
//           Представление – задает текст кнопки.
//  Таймаут - значение таймаута в секундах, по истечению этого времени функцию вернет значение КодВозвратаДиалога.Таймаут
//
// Возвращаемое значение:
//  КодВозвратаДиалога
//
Функция ВопросПользователю(ТекстСообщения, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", 
	КнопкаТаймаута = Неопределено, БольшеНеЗадаватьЭтотВопрос = Ложь) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстСообщения);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", Параметры);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		Возврат Результат.Значение;
	Иначе
		Возврат КодВозвратаДиалога.Отмена;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление значения типа КодВозвратаДиалога
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выводит форму сообщений пользователю при закрытии программы,
// либо выводит сообщение.
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ) Экспорт
	Предупреждения = Новый Массив;
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьСписокПредупреждений(Предупреждения);
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Предупреждения", Предупреждения);
	
	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
	
	Если Предупреждения.Количество() = 0 Тогда
		Если ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Предупреждения.Количество() = 1 Тогда
		Отказ = ОткрытьПрикладнуюФормуПредупреждения(Предупреждения.Получить(0), ИмяФормы, ПараметрыПередачи);
	ИначеЕсли Предупреждения.Количество() > 1 Тогда	
		Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
	КонецЕсли;	
КонецПроцедуры	

// Формирует отображение одного вопроса.
//
//	Если в ПредупреждениеПользователю есть свойство "ТекстГиперссылки", то открыватеся "ФормаИндивидуальногоОткрытия" из Структуры вопроса.
//	Если в ПредупреждениеПользователю есть свойство "ТекстФлажка", то открывается форма "ОбщаяФорма.ВопросПередЗавершениемРаботыСистемы".
//
// Параметры:
//	ПредупреждениеПользователю - Структура - структура передаваемого предупреждения.
//	ИмяФормы - Строка - имя общей формы с вопросамию
//	ПараметрыПередачи - Структура - параметры для формы с вопросами.
//
// Возвращаемое значение:
//	Блулево - Истина, если форма открыта, Ложь - Иначе.
//
Функция ОткрытьПрикладнуюФормуПредупреждения(ПредупреждениеПользователю, ИмяФормы, ПараметрыПередачи)
	Отказ = Ложь;
	
	ТекстФлажка = "";
	Если ПредупреждениеПользователю.Свойство("ТекстФлажка", ТекстФлажка) Тогда 
		Если Не ПустаяСтрока(ТекстФлажка) Тогда 
			Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	ТекстГиперссылки = "";
	Если ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда 
		Если Не ПустаяСтрока(ТекстГиперссылки) Тогда 
			ДействиеПриНажатииГипперссылки = Неопределено;
			Если ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГипперссылки", ДействиеПриНажатииГипперссылки) Тогда 
				ДействиеГипперссылка = ПредупреждениеПользователю.ДействиеПриНажатииГипперссылки;
				Форма = Неопределено;
				Если ДействиеГипперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГипперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
						
						ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",	"Завершить");
						ПараметрыФормы.Вставить("ЗаголовокКнопкиНет",	"Не завершать");
						
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				ИначеЕсли ДействиеГипперссылка.Свойство("Форма", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГипперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	Возврат Отказ;
КонецФункции

// Определеяет отказ по ответу формы.
//
// Параметры:
//	Ответ - ответ формы.
//
Функция ОпределитьОтветФормы(Ответ)
	Возврат Ответ = Неопределено Или Ответ = КодВозвратаДиалога.Нет Или Ответ = Истина;
КонецФункции	
	
	