////////////////////////////////////////////////////////////////////////////////
// Подсистема "Свойства"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Создает реквизиты и поля формы, необходимые для работы.
// Вызывается из обработчика ПриСозданииНаСервере формы объекта со свойствами
// 
// Параметры:
//   Форма                    - УправляемаяФорма.
//   Объект                   - ДанныеФормыСтруктура.
//   ИмяЭлементаДляРазмещения - Строка - имя группы формы, в которой будут размещены свойства.
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = Неопределено) Экспорт
	
	ИспользоватьДопРеквизиты = ИспользоватьДопРеквизиты(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект.Ссылка);
	Иначе
		ИмяТипа = ОбщегоНазначения.ВидОбъектаПоСсылке(Объект.Ссылка) + "Объект." + Объект.Ссылка.Метаданные().Имя;
		ОбъектЗначение = ДанныеФормыВЗначение(Объект, Тип(ИмяТипа));
		НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(ОбъектЗначение);
	КонецЕсли;
	
	СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта, ИспользоватьДопРеквизиты);
	
	Если Не Форма.Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Свойства_ОсновнойНабор = НаборСвойствОбъекта;
	
	Если ИспользоватьДопРеквизиты Тогда
		ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект из реквизитов, созданных в форме.
// Вызывается из обработчика ПередЗаписьюНаСервере формы объекта со свойствами.
//
// Параметры:
//   Форма         - УправляемаяФорма.
//   ТекущийОбъект - Объект.
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если Форма.Свойства_ИспользоватьСвойства И Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		// Перенос значений дополнительных реквизитов из реквизитов формы в объект.
		ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет отображаемые данные на форме объекта со свойствами.
Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма, Объект) Экспорт
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты Тогда
		
		Возврат;
	КонецЕсли;
	
	НаборСвойствОбъекта = ПолучитьДоступныеНаборыСвойств(Объект);
	Форма.Свойства_ОсновнойНабор = НаборСвойствОбъекта;
	
	ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект);
	
	ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)
	
КонецПроцедуры

// Обновляет наборы дополнительных реквизитов и сведений для вида объектов со свойствами.
//  Используется при записи элементов справочников, которые являются видами объектов со свойствами.
//  Например, если есть справочник Сущности к которому применяется подсистема Свойства, для него создан
// справочник ВидыСущностей, то при записи элемента ВидыСущностей необходимо вызывать эту процедуру.
//
// Параметры:
//  ВидОбъекта             - Объект, запись которого выполняется.
//  ИмяОбъектаСоСвойствами - Строка - имя объекта со свойствами вид которого записывается.
//
Процедура ПередЗаписьюВидаОбъекта(ВидОбъекта, ИмяОбъектаСоСвойствами) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидОбъекта.НаборСвойств) Тогда
		ОбъектНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.СоздатьЭлемент();
	Иначе
		Если Не НаборСвойствНужноИзменить(ВидОбъекта) Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектНабора = ВидОбъекта.НаборСвойств.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ОбъектНабора.Ссылка);
	КонецЕсли;
	
	ОбъектНабора.Наименование    = ВидОбъекта.Наименование;
	ОбъектНабора.Родитель        = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяОбъектаСоСвойствами];
	ОбъектНабора.ПометкаУдаления = ВидОбъекта.ПометкаУдаления;
	ОбъектНабора.Записать();
	ВидОбъекта.НаборСвойств = ОбъектНабора.Ссылка;
	
КонецПроцедуры

// Возвращает свойства владельца.
//
// Параметры:
//  ВладелецСвойств      - Ссылка на владелеца свойств.
//  ПолучатьДопРеквизиты - Булево - в результат включать дополнительные реквизиты.
//  ПолучатьДопСведения  - Булево - в результат включать дополнительные сведения.
//
// Возвращаемое значение:
//  Массив значений типа ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
//
Функция ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты = Истина, ПолучатьДопСведения = Истина) Экспорт
	
	Если НЕ (ПолучатьДопРеквизиты ИЛИ ПолучатьДопСведения) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	НаборСвойств = ПолучитьДоступныеНаборыСвойств(ВладелецСвойств);
	
	Если ТипЗнч(НаборСвойств) = Тип("СписокЗначений") Тогда
		МассивСвойств = НаборСвойств.ВыгрузитьЗначения();
	Иначе // элемент справочника
		МассивСвойств = Новый Массив;
		МассивСвойств.Добавить(НаборСвойств);
	КонецЕсли;
	
	ТекстЗапросаДопРеквизиты = 
		"ВЫБРАТЬ
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Ссылка В (&МассивСвойств)";
	
	ТекстЗапросаДопСведения = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Ссылка В (&МассивСвойств)";
	
	Запрос = Новый Запрос;
	
	Если ПолучатьДопРеквизиты И ПолучатьДопСведения Тогда
		Запрос.Текст = ТекстЗапросаДопСведения +
		"
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапросаДопРеквизиты;
		
	ИначеЕсли ПолучатьДопРеквизиты Тогда
		Запрос.Текст = ТекстЗапросаДопРеквизиты;
		
	ИначеЕсли ПолучатьДопСведения Тогда
		Запрос.Текст = ТекстЗапросаДопСведения;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("МассивСвойств", МассивСвойств);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения дополнительных свойств объекта.
//
// Параметры:
//  ВладелецСвойств      - Ссылка на владелеца свойств.
//  ПолучатьДопРеквизиты - Булево - в результат включать дополнительные реквизиты.
//  ПолучатьДопСведения  - Булево - в результат включать дополнительные сведения.
//  МассивСвойств        - Массив значений типа ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения,
//                         значения которых следует получить.
//                         Неопределено - все свойства владельца.
// Возвращаемое значение :
//   ТаблицаЗначений - колонки "Свойство" и "Значение".
//
Функция ПолучитьЗначенияСвойств(ВладелецСвойств,
                                ПолучатьДопРеквизиты = Истина,
                                ПолучатьДопСведения = Истина,
                                МассивСвойств = Неопределено) Экспорт
	
	Если МассивСвойств = Неопределено Тогда
		МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств, ПолучатьДопРеквизиты, ПолучатьДопСведения);
	КонецЕсли;
	
	ИмяОбъектаСоСвойствами = ОбщегоНазначения.ИмяТаблицыПоСсылке(ВладелецСвойств);
	
	ТекстЗапросаДопРеквизиты =
		"ВЫБРАТЬ [РАЗРЕШЕННЫЕ]
		|	ТаблицаСвойств.Свойство КАК Свойство,
		|	ТаблицаСвойств.Значение КАК Значение,
		|	ВЫБОР
		|		КОГДА ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода > 0
		|			ТОГДА ТаблицаСвойств.ТекстоваяСтрока
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТекстоваяСтрока
		|ИЗ
		|	[ИмяОбъектаСоСвойствами].ДополнительныеРеквизиты КАК ТаблицаСвойств
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|		ПО ТаблицаСвойств.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
		|ГДЕ
		|	ТаблицаСвойств.Ссылка = &ВладелецСвойств
		|	И ТаблицаСвойств.Свойство В (&МассивСвойств)";
	
	ТекстЗапросаДопСведения =
		"ВЫБРАТЬ [РАЗРЕШЕННЫЕ]
		|	ТаблицаСвойств.Свойство КАК Свойство,
		|	ТаблицаСвойств.Значение КАК Значение,
		|	"""" КАК ТекстоваяСтрока
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Объект = &ВладелецСвойств
		|	И ТаблицаСвойств.Свойство В (&МассивСвойств)";
	
	Запрос = Новый Запрос;
	
	Если ПолучатьДопРеквизиты И ПолучатьДопСведения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопРеквизиты, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ") +
			"
			| ОБЪЕДИНИТЬ ВСЕ
			|" + СтрЗаменить(ТекстЗапросаДопСведения, "[РАЗРЕШЕННЫЕ]", "");
		
	ИначеЕсли ПолучатьДопРеквизиты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопРеквизиты, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ");
		
	ИначеЕсли ПолучатьДопСведения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапросаДопСведения, "[РАЗРЕШЕННЫЕ]", "РАЗРЕШЕННЫЕ");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяОбъектаСоСвойствами]", ИмяОбъектаСоСвойствами);
	
	Запрос.Параметры.Вставить("ВладелецСвойств", ВладелецСвойств);
	Запрос.Параметры.Вставить("МассивСвойств", МассивСвойств);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выгрузить();
	РезультатСТекстовымиСтроками = Неопределено;
	ИндексСтроки = 0;
	Для каждого ЗначениеСвойства Из Результат Цикл
		ТекстоваяСтрока = ЗначениеСвойства.ТекстоваяСтрока;
		Если Не ПустаяСтрока(ТекстоваяСтрока) Тогда
			Если РезультатСТекстовымиСтроками = Неопределено Тогда
				РезультатСТекстовымиСтроками = Результат.Скопировать(,"Свойство");
				РезультатСТекстовымиСтроками.Колонки.Добавить("Значение");
				РезультатСТекстовымиСтроками.ЗагрузитьКолонку(Результат.ВыгрузитьКолонку("Значение"), "Значение");
			КонецЕсли;
			РезультатСТекстовымиСтроками[ИндексСтроки].Значение = ТекстоваяСтрока;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Возврат ?(РезультатСТекстовымиСтроками <> Неопределено, РезультатСТекстовымиСтроками, Результат);
	
КонецФункции

// Проверяет, есть ли у объекта свойство.
//
// Параметры:
//  ВладелецСвойств - Ссылка на владелеца свойств.
//  Свойство        - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
//
Функция ПроверитьСвойствоУОбъекта(ВладелецСвойств, Свойство) Экспорт
	
	МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств);
	
	Если МассивСвойств.Найти(Свойство) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает перечисляемые значения указанного свойства.
//
// Параметр:
//  Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
// 
// Возвращаемое значение:
//  Массив значений типа СправочникСсылка.ЗначенияСвойствОбъектов.
//
Функция ПолучитьСписокЗначенийСвойств(Свойство) Экспорт
	
	ТексЗапроса =
	"ВЫБРАТЬ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Свойство";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТексЗапроса;
	Запрос.Параметры.Вставить("Свойство", Свойство);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

// Записывает дополнительные реквизиты и сведения владельцу свойств.
// Изменения происходят в транзакции.
// 
// Параметры:
//  ВладелецСвойств         - Ссылка или Объект владельца свойств.
//  ТаблицаСвойствИЗначений - ТаблицаЗначений - с колонками:
//                              Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения.
//                              Значение - любое значение, допустимое для свойства.
//
Процедура ЗаписатьСвойстваУОбъекта(ВладелецСвойств, ТаблицаСвойствИЗначений) Экспорт
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
	
	ТаблицаДопСведений = ТаблицаДопРеквизитов.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицыСвойств Из ТаблицаСвойствИЗначений Цикл
		Если СтрокаТаблицыСвойств.Свойство.ЭтоДополнительноеСведение Тогда
			НоваяСтрока = ТаблицаДопСведений.Добавить();
		Иначе
			НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыСвойств, "Свойство,Значение");
	КонецЦикла;
	
	ЕстьДопРеквизиты = ТаблицаДопРеквизитов.Количество() > 0;
	ЕстьДопСведения  = ТаблицаДопСведений.Количество() > 0;
	
	МассивСвойств = ПолучитьСписокСвойств(ВладелецСвойств);
	
	МассивДопРеквизитов = Новый Массив;
	МассивДопСведений = Новый Массив;
	
	Для Каждого ДопСвойство Из МассивСвойств Цикл
		Если ДопСвойство.ЭтоДополнительноеСведение Тогда
			МассивДопСведений.Добавить(ДопСвойство);
		Иначе
			МассивДопРеквизитов.Добавить(ДопСвойство);
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Если ЕстьДопРеквизиты Тогда
		ВладелецСвойствОбъект = ВладелецСвойств.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ВладелецСвойствОбъект.Ссылка);
		Для Каждого ДопРеквизит Из ТаблицаДопРеквизитов Цикл
			Если МассивДопРеквизитов.Найти(ДопРеквизит.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивСтрок = ВладелецСвойствОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизит.Свойство));
			Если МассивСтрок.Количество() Тогда
				СтрокаСвойства = МассивСтрок[0];
			Иначе
				СтрокаСвойства = ВладелецСвойствОбъект.ДополнительныеРеквизиты.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаСвойства, ДопРеквизит, "Свойство,Значение");
		КонецЦикла;
		ВладелецСвойствОбъект.Записать();
	КонецЕсли;
	
	Если ЕстьДопСведения Тогда
		Для Каждого ДопСведение Из ТаблицаДопСведений Цикл
			Если МассивДопСведений.Найти(ДопСведение.Свойство) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Объект = ВладелецСвойств;
			МенеджерЗаписи.Свойство = ДопСведение.Свойство;
			МенеджерЗаписи.Значение = ДопСведение.Значение;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Проверяет, используется ли дополнительные реквизиты с объектом.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользоватьДопРеквизиты(ВладелецСвойств) Экспорт
	
	Возврат ВладелецСвойств.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено;
	
КонецФункции

// Проверяет, используется ли дополнительные сведения объектом.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИспользоватьДопСведения(ВладелецСвойств) Экспорт
	
	Возврат Метаданные.НайтиПоПолномуИмени("ОбщаяКоманда.ДополнительныеСведения") <> Неопределено
	      И Метаданные.ОбщиеКоманды.ДополнительныеСведения.ТипПараметраКоманды.Типы().Найти(ТипЗнч(ВладелецСвойств)) <> Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.7";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьСписокДополнительныхСвойств";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "УправлениеСвойствами.ОбновитьПереименованныеРоли_БСП_1_0_7_1";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Собирает все свойства подчиненных наборов для корневого набора свойств,
// который всегда является группой.
//
// Параметры:
//  Объект       - СправочникОбъект.НаборыДополнительныхРеквизитовИСведений
//                 группа наборов дополнительных свойств.
//
Процедура ПередЗаписьюГруппыНаборовСвойств(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Объект.Ссылка);
	
	// Дополнительные реквизиты.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизиты.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка.Родитель = &Родитель
	|	И ДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение = ЛОЖЬ";
	
	Объект.ДополнительныеРеквизиты.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Дополнительные сведения.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Свойство КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Ссылка.Родитель = &Родитель
	|	И ДополнительныеСведения.Свойство.ЭтоДополнительноеСведение = ИСТИНА";
	
	Объект.ДополнительныеСведения.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Возвращает список наборов доступных свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка или Объект владельца свойств.
//
Функция ПолучитьДоступныеНаборыСвойств(ВладелецСвойств) Экспорт
	
	ДоступныеНаборы = УправлениеСвойствамиПереопределяемый.ПолучитьДоступныеНаборыСвойствПоОбъекту(ВладелецСвойств);
	
	Если ДоступныеНаборы = Неопределено Тогда
		Возврат ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств);
	Иначе
		Возврат ДоступныеНаборы;
	КонецЕсли;
		
КонецФункции

// Возвращает заполненную таблицу значений свойств объекта.
Функция ПолучитьТаблицуЗначенийСвойств(ДополнительныеСвойстваОбъекта, Набор, ЭтоДополнительноеСведение) Экспорт
	
	Свойства = ДополнительныеСвойстваОбъекта.ВыгрузитьКолонку("Свойство");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборыСвойствДополнительныеРеквизиты.Свойство КАК Свойство,
	|	МИНИМУМ(НаборыСвойствДополнительныеРеквизиты.НомерСтроки) КАК Порядок
	|ПОМЕСТИТЬ ВсеСвойстваНабора
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|ГДЕ
	|	НаборыСвойствДополнительныеРеквизиты.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления)
	|	И (НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|	И (НЕ &ЭтоДополнительноеСведение)
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеРеквизиты.Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыСвойствДополнительныеСведения.Свойство,
	|	МИНИМУМ(НаборыСвойствДополнительныеСведения.НомерСтроки)
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыСвойствДополнительныеСведения
	|ГДЕ
	|	НаборыСвойствДополнительныеСведения.Ссылка В(&Набор)
	|	И (НЕ НаборыСвойствДополнительныеСведения.Ссылка.ПометкаУдаления)
	|	И (НЕ НаборыСвойствДополнительныеСведения.Ссылка.ЭтоГруппа)
	|	И &ЭтоДополнительноеСведение
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборыСвойствДополнительныеСведения.Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ЗаполненныеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Ссылка В(&Свойства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойстваНабора.Свойство,
	|	ВсеСвойстваНабора.Порядок,
	|	ЛОЖЬ КАК Удалено
	|ПОМЕСТИТЬ ВсеСвойства
	|ИЗ
	|	ВсеСвойстваНабора КАК ВсеСвойстваНабора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаполненныеСвойства.Свойство,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	ЗаполненныеСвойства КАК ЗаполненныеСвойства
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеСвойстваНабора КАК ВсеСвойстваНабора
	|		ПО ЗаполненныеСвойства.Свойство = ВсеСвойстваНабора.Свойство
	|ГДЕ
	|	ВсеСвойстваНабора.Свойство ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВсеСвойства.Свойство,
	|	ДополнительныеРеквизитыИСведения.Наименование,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.ФорматСвойства,
	|	ДополнительныеРеквизитыИСведения.МногострочноеПолеВвода,
	|	ВсеСвойства.Удалено КАК Удалено
	|ИЗ
	|	ВсеСвойства КАК ВсеСвойства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ВсеСвойства.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удалено,
	|	ВсеСвойства.Порядок";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	Запрос.УстановитьПараметр("Свойства",                  Свойства);
	Запрос.УстановитьПараметр("Набор",                     Набор);
	
	ОписаниеСвойств = Запрос.Выполнить().Выгрузить();
	ОписаниеСвойств.Индексы.Добавить("Свойство");
	ОписаниеСвойств.Колонки.Добавить("Значение");
	
	Для Каждого Строка Из ДополнительныеСвойстваОбъекта Цикл
		ОписаниеСвойства = ОписаниеСвойств.Найти(Строка.Свойство, "Свойство");
		Если ОписаниеСвойства <> Неопределено Тогда
			// Поддержка строк неограниченной длины.
			Если НЕ ЭтоДополнительноеСведение
			   И ИспользоватьНеограниченнуюСтроку(ОписаниеСвойства.ТипЗначения, ОписаниеСвойства.МногострочноеПолеВвода)
			   И НЕ ПустаяСтрока(Строка.ТекстоваяСтрока) Тогда 
				
				ОписаниеСвойства.Значение = Строка.ТекстоваяСтрока;
			Иначе
				ОписаниеСвойства.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

// Возвращает значения дополнительных сведений.
Функция ПрочитатьЗначенияСвойствИзРегистраСведений(ВладелецСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", ВладелецСвойства);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает использование набором дополнительных сведений и реквизитов.
Функция ВидыСвойствНабора(Ссылка) Экспорт
	
	ВидыСвойствНабора = Новый Структура;
	ВидыСвойствНабора.Вставить("ДополнительныеРеквизиты", Ложь);
	ВидыСвойствНабора.Вставить("ДополнительныеСведения", Ложь);
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	СвойстваСсылки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ссылка, "ПометкаУдаления, ЭтоГруппа, Предопределенный, Родитель");
	
	Если СвойстваСсылки.ПометкаУдаления Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	Если СвойстваСсылки.ЭтоГруппа Тогда
		СсылкаПредопределенного = Ссылка;
		
	ИначеЕсли СвойстваСсылки.Предопределенный
	        И СвойстваСсылки.Родитель = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
		
		СсылкаПредопределенного = Ссылка;
	Иначе
		СсылкаПредопределенного = Ссылка.Родитель;
	КонецЕсли;
	
	ИмяПредопределенного = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИмяПредопределенного(СсылкаПредопределенного);
	
	Если НЕ ЗначениеЗаполнено(ИмяПредопределенного) Тогда
		Возврат ВидыСвойствНабора;
	КонецЕсли;
	
	Позиция = Найти(ИмяПредопределенного, "_");
	
	ПерваяЧастьИмени =  Лев(ИмяПредопределенного, Позиция - 1);
	ВтораяЧастьИмени = Прав(ИмяПредопределенного, СтрДлина(ИмяПредопределенного) - Позиция);
	
	ВидыСвойствНабора = Новый Структура;
	
	// Проверка использования дополнительных реквизитов.
	МетаданныеВладельцаСвойств = Метаданные.НайтиПоПолномуИмени(ПерваяЧастьИмени + "." + ВтораяЧастьИмени);
	
	ВидыСвойствНабора.Вставить(
		"ДополнительныеРеквизиты",
		МетаданныеВладельцаСвойств <> Неопределено
		И МетаданныеВладельцаСвойств.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено );
	
	// Проверка использования дополнительных сведений.
	Тип = Тип(ПерваяЧастьИмени + "Ссылка." + ВтораяЧастьИмени);
	
	ВидыСвойствНабора.Вставить(
		"ДополнительныеСведения",
		Метаданные.ОбщиеКоманды.Найти("ДополнительныеСведения") <> Неопределено
		И Метаданные.ОбщиеКоманды.ДополнительныеСведения.ТипПараметраКоманды.СодержитТип(Тип) );
	
	Возврат ВидыСвойствНабора;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает основной набор свойств владельца.
//
// Параметры:
//  ВладелецСвойств - Ссылка или Объект владельца свойств.
//
// Возвращаемое значение:
//  СправочникСсылка.НаборыДополнительныхРеквизитовИСведений -
//   когда для типа владельца свойств не задано имя реквизита вида объекта в процедуре
//         УправлениеСвойствамиПереопределяемый.ПолучитьИмяРеквизитаВидаОбъекта(),
//   тогда возвращается предопределенный элемент с именем в формате полное имя
//         объекта метаданных, у которого символ "." заменен символом "_",
//   иначе возвращается значение реквизита НаборСвойств того вида, который
//         содержится в реквизите владельца свойств с именем заданным в
//         переопределяемой процедуре.
//
//  Неопределено - когда владелец свойств - группа элементов справочника или
//                 группа элементов плана видов характеристик.
//  
Функция ПолучитьОсновнойНаборСвойствДляОбъекта(ВладелецСвойств)
	
	МетаданныеОбъекта = ВладелецСвойств.Метаданные();
	ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
	
	ПереданОбъект = Ложь;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ВладелецСвойств) Тогда
		Ссылка = ВладелецСвойств;
	Иначе
		ПереданОбъект = Истина;
		Ссылка = ВладелецСвойств.Ссылка;
	КонецЕсли;
	
	ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка);
	ИмяРеквизитаВидаВладельцевСвойств = УправлениеСвойствамиПереопределяемый.ПолучитьИмяРеквизитаВидаОбъекта(Ссылка);
	
	Если ИмяРеквизитаВидаВладельцевСвойств = "" Тогда
		Если ВидОбъектаМетаданных = "Справочник" или ВидОбъектаМетаданных = "ПланВидовХарактеристик" Тогда
			Если ОбщегоНазначения.ОбъектЯвляетсяГруппой(ВладелецСвойств) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных;
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
		
	Иначе
		Если ПереданОбъект = Истина Тогда
			Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(
						ВладелецСвойств[ИмяРеквизитаВидаВладельцевСвойств],
						"НаборСвойств");
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ОбъектВладелецСвойств." + ИмяРеквизитаВидаВладельцевСвойств + ".НаборСвойств КАК Набор
			|ИЗ
			|	" + ВидОбъектаМетаданных + "." + ИмяОбъектаМетаданных + " КАК ОбъектВладелецСвойств
			|ГДЕ
			|	ОбъектВладелецСвойств.Ссылка = &Ссылка";

			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Результат = Запрос.Выполнить();
			
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				Если ЗначениеЗаполнено(Выборка.Набор) Тогда
					Возврат Выборка.Набор;
				Иначе
					Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
				КонецЕсли;
			Иначе
				Возврат Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

// Создает основные реквизиты, команды, элементы в форме владельца свойств.
Процедура СоздатьОсновныеОбъектыФормы(Форма, ИмяЭлементаДляРазмещения, НаборСвойствОбъекта, ИспользоватьДопРеквизиты)
	
	Реквизиты = Новый Массив;
	
	// Проверка значения функциональной опции "Использование свойств".
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("Свойства_ИспользоватьСвойства", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитИспользоватьСвойства);
	
	Если ОпцияИспользоватьСвойства Тогда
		
		РеквизитИспользоватьДопРеквизиты = Новый РеквизитФормы("Свойства_ИспользоватьДопРеквизиты", Новый ОписаниеТипов("Булево"));
		Реквизиты.Добавить(РеквизитИспользоватьДопРеквизиты);
		
		// Добавление реквизита "ОсновнойНабор".
		ИмяТипа = ?(ТипЗнч(НаборСвойствОбъекта) = Тип("СписокЗначений"), "СписокЗначений", "СправочникСсылка.НаборыДополнительныхРеквизитовИСведений");
		РеквизитОсновнойНабор = Новый РеквизитФормы("Свойства_ОсновнойНабор", Новый ОписаниеТипов(ИмяТипа));
		Реквизиты.Добавить(РеквизитОсновнойНабор);
			
		Если ИспользоватьДопРеквизиты Тогда
			// Добавление реквизита таблица значений "ОписаниеДополнительныхРеквизитов" с колонками.
			ИмяОписания = "Свойства_ОписаниеДополнительныхРеквизитов";
			РеквизитОписание_0 = Новый РеквизитФормы(ИмяОписания,            Новый ОписаниеТипов("ТаблицаЗначений"));
			РеквизитОписание_1 = Новый РеквизитФормы("ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания);
			РеквизитОписание_2 = Новый РеквизитФормы("ИмяРеквизитаСвойство", Новый ОписаниеТипов("Строка"), ИмяОписания);
			РеквизитОписание_3 = Новый РеквизитФормы("Свойство",             Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), ИмяОписания);
			Реквизиты.Добавить(РеквизитОписание_0);
			Реквизиты.Добавить(РеквизитОписание_1);
			Реквизиты.Добавить(РеквизитОписание_2);
			Реквизиты.Добавить(РеквизитОписание_3);
			
			// Добавление реквизита с именем элемента в котором будут размещаться поля ввода.
			РеквизитИмяЭлемента = Новый РеквизитФормы("Свойства_ИмяЭлементаДляРазмещения", Новый ОписаниеТипов("Строка"));
			Реквизиты.Добавить(РеквизитИмяЭлемента);
		КонецЕсли;
		
		// Добавление команды формы, если установлена роль "ДобавлениеИзменениеБазовойНСИ" или это полноправный пользователь.
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеБазовойНСИ") Тогда
			// Добавление команды.
			Команда = Форма.Команды.Добавить("РедактироватьСоставСвойств");
			Команда.Заголовок = НСтр("ru = 'Изменить состав доп. реквизитов и сведений'");
			Команда.Действие = "Подключаемый_РедактироватьСоставСвойств";
			Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов и сведений'");
			Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;
			
			Кнопка = Форма.Элементы.Добавить("РедактироватьСоставСвойств", Тип("КнопкаФормы"), Форма.КоманднаяПанель);
			Кнопка.ТолькоВоВсехДействиях = Истина;
			Кнопка.ИмяКоманды = "РедактироватьСоставСвойств";
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма.Свойства_ИспользоватьСвойства = ОпцияИспользоватьСвойства;
	
	Если ОпцияИспользоватьСвойства Тогда
		Форма.Свойства_ИспользоватьДопРеквизиты = ИспользоватьДопРеквизиты;
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства И ИспользоватьДопРеквизиты Тогда
		Форма.Свойства_ИмяЭлементаДляРазмещения = ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
КонецПроцедуры

// Создает дополнительные реквизиты, команды, элементы в форме владельца свойств.
Процедура ЗаполнитьДополнительныеРеквизитыНаФорме(Форма, Объект, НаборСвойствОбъекта)
	
	Если НаборСвойствОбъекта = Неопределено Тогда
		Набор = Форма.Свойства_ОсновнойНабор;
	Иначе
		Набор = НаборСвойствОбъекта;
	КонецЕсли;
	
	ОписаниеСвойств = ПолучитьТаблицуЗначенийСвойств(Объект.ДополнительныеРеквизиты.Выгрузить(), Набор, Ложь);
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаСвойство");
	ОписаниеСвойств.Колонки.Добавить("Булево");
	
	УдалитьСтарыеРеквизиты(Форма);
	Форма.Свойства_ОписаниеДополнительныхРеквизитов.Очистить();
	
	// Создание реквизитов.
	Номер = 0;
	ДобавляемыеРеквизиты = Новый Массив();
	Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		Номер = Номер + 1;
		ТипЗначенияСвойства = ОписаниеСвойства.ТипЗначения;
		
		// Поддержка строк неограниченной длины.
		Если ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, ОписаниеСвойства.МногострочноеПолеВвода) Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		ОписаниеСвойства.ИмяРеквизитаЗначение = "ДополнительныйРеквизитЗначение" + Формат(Номер, "ЧГ=0");
		
		Если ОписаниеСвойства.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , ОписаниеСвойства.Наименование, Истина);
		
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		ОписаниеСвойства.ИмяРеквизитаСвойство = "";
		Если ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства) Тогда
			ОписаниеСвойства.ИмяРеквизитаСвойство = "ДополнительныйРеквизитСвойство" + Формат(Номер, "ЧГ=0");
			Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаСвойство, Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"), , , Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		ОписаниеСвойства.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
		
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		НоваяСтрока = Форма.Свойства_ОписаниеДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизитаЗначение = ОписаниеСвойства.ИмяРеквизитаЗначение;
		НоваяСтрока.ИмяРеквизитаСвойство = ОписаниеСвойства.ИмяРеквизитаСвойство;
		НоваяСтрока.Свойство             = ОписаниеСвойства.Свойство;
		
		Форма[ОписаниеСвойства.ИмяРеквизитаЗначение] = ОписаниеСвойства.Значение;
		
		ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения;
		Родитель = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		
		Если ОписаниеСвойства.Булево И ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка
		Иначе
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
		Элемент.Подсказка   = ОписаниеСвойства.Свойство.Подсказка;
		
		Если ОписаниеСвойства.Свойство.МногострочноеПолеВвода > 0 Тогда
			Элемент.МногострочныйРежим = Истина;
			Элемент.Высота= ОписаниеСвойства.Свойство.МногострочноеПолеВвода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Формат               = ОписаниеСвойства.ФорматСвойства;
			Элемент.ФорматРедактирования = ОписаниеСвойства.ФорматСвойства;
		КонецЕсли;
		
		Если ОписаниеСвойства.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.НедоступныеДанныеЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элемент.КнопкаОчистки = Истина;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.КнопкаОткрытия = Ложь;
				Элемент.КнопкаСпискаВыбора = Ложь;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеСвойства.ИмяРеквизитаСвойство <> "" Тогда
			Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", ОписаниеСвойства.ИмяРеквизитаСвойство);
			Связи = Новый Массив;
			Связи.Добавить(Связь);
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
			Форма[ОписаниеСвойства.ИмяРеквизитаСвойство] = ОписаниеСвойства.Свойство;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит значения свойств из реквизитов формы в табличную часть объекта.
Процедура ПеренестиЗначенияСвойствИзРеквизитовФормы(Форма, Объект)
	
	Объект.ДополнительныеРеквизиты.Очистить();
	
	Для Каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		Значение = Форма[Строка.ИмяРеквизитаЗначение];
		Если ЗначениеЗаполнено(Значение) Тогда
			Если ТипЗнч(Значение) = Тип("Булево") И Значение = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство = Строка.Свойство;
			НоваяСтрока.Значение = Значение;
			
			// Поддержка строк неограниченной длины.
			Свойство = Строка.Свойство.ПолучитьОбъект();
			Если ИспользоватьНеограниченнуюСтроку(Свойство.ТипЗначения, Свойство.МногострочноеПолеВвода) Тогда
				НоваяСтрока.ТекстоваяСтрока = Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет старые реквизиты и элементы формы.
Процедура УдалитьСтарыеРеквизиты(Форма)
	
	УдаляемыеРеквизиты = Новый Массив;
	Для Каждого ОписаниеСвойства Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
		
		УдаляемыеРеквизиты.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение);
		Если Не ПустаяСтрока(ОписаниеСвойства.ИмяРеквизитаСвойство) Тогда
			УдаляемыеРеквизиты.Добавить(ОписаниеСвойства.ИмяРеквизитаСвойство);
		КонецЕсли;
		
		Форма.Элементы.Удалить(Форма.Элементы[ОписаниеСвойства.ИмяРеквизитаЗначение]);
		
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() Тогда
		Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, что тип значения может быть СправочникСсылка.ЗначенияСвойствОбъектов.
Функция ТипЗначенияСодержитЗначенияСвойств(ТипЗначения)
	
	Возврат ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено;
	
КонецФункции

// Определяет, что изменился набор свойств у вида владельцев свойств.
// Используется для обновления набора свойств во владельце свойств.
// 
Функция НаборСвойствНужноИзменить(ВидОбъекта)
	
	Результат = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(
		ВидОбъекта.НаборСвойств,
		"Наименование, ПометкаУдаления");
	
	Возврат (Результат.Наименование    <> ВидОбъекта.Наименование)
	    ИЛИ (Результат.ПометкаУдаления <> ВидОбъекта.ПометкаУдаления);
	
КонецФункции

// Проверяет возможность использования для свойства строки неограниченный длины.
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода)
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И МногострочноеПолеВвода > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обновляет наборы дополнительных реквизитов и сведений в информационной базе.
// Используется для перехода к новому формату хранения.
//
Процедура ОбновитьСписокДополнительныхСвойств() Экспорт
	
	НаборыДополнительныхРеквизитовИСведений = Справочники.НаборыДополнительныхРеквизитовИСведений.Выбрать();
	
	Пока НаборыДополнительныхРеквизитовИСведений.Следующий() Цикл
		
		ДопСведения = Новый Массив;
		
		НаборСвойствОбъект = НаборыДополнительныхРеквизитовИСведений.Ссылка.ПолучитьОбъект();
		
		Для Каждого Запись Из НаборСвойствОбъект.ДополнительныеРеквизиты Цикл
			Если Запись.Свойство.ЭтоДополнительноеСведение Тогда
				ДопСведения.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Если ДопСведения.Количество() > 0 Тогда
			
			Для Каждого ДопСведение Из ДопСведения Цикл
				НоваяСтрока = НаборСвойствОбъект.ДополнительныеСведения.Добавить();
				НоваяСтрока.Свойство = ДопСведение.Свойство;
				НаборСвойствОбъект.ДополнительныеРеквизиты.Удалить(
					НаборСвойствОбъект.ДополнительныеРеквизиты.Индекс(ДопСведение));
				
			КонецЦикла;
			НаборСвойствОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет имена ролей в профилях групп доступа.
Процедура ОбновитьПереименованныеРоли_БСП_1_0_7_1() Экспорт
	
	Если Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.УправлениеДоступом") <> Неопределено Тогда
		
		УправлениеДоступомМодуль = Вычислить("УправлениеДоступом");
	
		ПереименованныеРоли = Новый ТаблицаЗначений;
		ПереименованныеРоли.Колонки.Добавить("СтароеИмяРоли");
		ПереименованныеРоли.Колонки.Добавить("НовоеИмяРоли");
		
		ПереименованнаяРоль = ПереименованныеРоли.Добавить();
		ПереименованнаяРоль.СтароеИмяРоли = "ДобавлениеИзменениеДополнительныхСведений";
		ПереименованнаяРоль.НовоеИмяРоли  = "ИзменениеДополнительныхСведений";
		
		УправлениеДоступомМодуль.ОбновитьПереименованныеРоли(ПереименованныеРоли);
		
	КонецЕсли;
	
КонецПроцедуры

