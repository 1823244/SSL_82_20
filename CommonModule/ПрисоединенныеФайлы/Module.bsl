////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Настраивает форму присоединенного файла ПриСозданииНаСервере.
Процедура ПриСозданииНаСервереПрисоединенныйФайл(Знач Форма) Экспорт
	
	// Пропуск инициализации, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("Ключ", Форма.Ключ) Тогда
		Форма.Ключ = Форма.Параметры.Key;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Присоединенный файл'");
	
	Команда = Форма.Команды.Добавить("ПерейтиКФормеФайла");
	Команда.Действие = "Подключаемый_ПерейтиКФормеФайла";
	
	Декорация = Форма.Элементы.Добавить("ПоясняющийТекст", Тип("ДекорацияФормы"));
	Декорация.Заголовок = НСтр("ru = 'Для того, чтобы перейти к карточке файла, нажмите на гиперссылку'");
	
	Кнопка = Форма.Элементы.Добавить("ПерейтиКФормеФайла1", Тип("КнопкаФормы"));
	Кнопка.Вид        = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Заголовок  = НСтр("ru = 'Перейти к форме файла'");
	Кнопка.ИмяКоманды = "ПерейтиКФормеФайла";
	
КонецПроцедуры

// Возвращает двоичные данные присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  ДвоичныеДанные.
//
Функция ПолучитьДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ХранимыйФайл.Получить();
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла: файл не найден в информационной базе.
				           |Обратитесь к администратору.
				           |
				           |Файл: ""%1.%2"".'"),
				ФайлОбъект.Наименование,
				ФайлОбъект.Расширение);
		КонецЕсли;
	Иначе
		ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть)
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Получение файла из тома'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла: файл не найден на сервере.
				           |Обратитесь к администратору.
				           |
				           |Файл: ""%1.%2"".'"),
				ФайлОбъект.Наименование,
				ФайлОбъект.Расширение);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру данных файла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл, Знач ИдентификаторФормы = Неопределено, Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПрисоединенныеФайлы.ХранимыйФайл
			|ИЗ
			|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
			
			Выборка = Запрос.Выполнить().Выбрать();
			ДвоичныеДанные = Неопределено;
			Если Выборка.Следующий() Тогда
				ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			КонецЕсли;
		 
			Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
		Иначе
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				КонецЕсли;
			Исключение
				СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
				ЗаписьЖурналаРегистрации("Открытие файла",
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				                         ПрисоединенныйФайл,
				                         СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла: файл не найден на сервере.
					           |Возможно файл удален антивирусной программой.
					           |Обратитесь к администратору.
					           |
					           |Файл: ""%1.%2"".'"),
					ФайлОбъект.Наименование,
					ФайлОбъект.Расширение);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	ДополнительнаяИнформация.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	ДополнительнаяИнформация.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	ДополнительнаяИнформация.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Наименование",                 ФайлОбъект.Наименование);
	ДополнительнаяИнформация.Вставить("Расширение",                   ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Размер",                       ФайлОбъект.Размер);
	ДополнительнаяИнформация.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	ДополнительнаяИнформация.Вставить("ПодписанЭЦП",                  ФайлОбъект.ПодписанЭЦП);
	ДополнительнаяИнформация.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	ДополнительнаяИнформация.Вставить("ФайлРедактируется",            ФайлОбъект.Редактирует <> Справочники.Пользователи.ПустаяСсылка() );
	ДополнительнаяИнформация.Вставить("ФайлРедактируетТекущийПользователь",
		?(ДополнительнаяИнформация.ФайлРедактируется, ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь(), Ложь) );
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		ДополнительнаяИнформация.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

// Заполняет массив ссылками на файлы объекта.
//
// Параметры:
//  Объект       - Ссылка на объект, который может содержать присоединенные файлы.
//  МассивФайлов - Массив, в который будут добавлены ссылки на файлы объекта.
// 
Процедура ПолучитьПрикрепленныеФайлыКОбъекту(Знач Объект, Знач МассивФайлов) Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		
		МассивФайловЛокальный = ПолучитьВсеПодчиненныеФайлы(Объект);
		Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл
			МассивФайлов.Добавить(СсылкаНаФайл);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ВладелецФайла                  - Ссылка на владелеца файла.
//  ИмяБезРасширения               - Строка - имя файла без расширения.
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
//  ВремяИзменения                 - Дата - дата и время изменения файла (местное время).
//  ВремяИзмененияУниверсальное    - Дата - дата и время изменения файла (UTC+0:00).
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//
// Возвращаемое значение:
//  Ссылка - ссылка на созданный объект.
//
Функция ДобавитьФайл(Знач ВладелецФайла,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ВремяИзменения) Тогда 
		ВремяИзменения = ТекущаяДатаСеанса();
		ВремяИзмененияУниверсальное = УниверсальноеВремя(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ПолноеИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	СсылкаНового = Справочники[ПолноеИмяСправочника].ПолучитьСсылку();
	ПрисоединенныйФайл = Справочники[ПолноеИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайла;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = "";
	ПрисоединенныйФайл.ПодписанЭЦП                  = Ложь;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункции.ПолучитьТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	
	СвояТранзакцияОткрыта = Ложь;
	ОперацияЗаписиФайла = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			ЗаписатьФайлВИнформационнуюБазу(СсылкаНового, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			// Добавление в один из томов (где есть свободное место).
			ФайловыеФункции.ДобавитьНаДиск(
				ДвоичныеДанные,
				ПрисоединенныйФайл.ПутьКФайлу,
				ПрисоединенныйФайл.Том,
				ВремяИзменения,
				"",
				ИмяБезРасширения,
				РасширениеБезТочки,
				ПрисоединенныйФайл.Размер,
				ПрисоединенныйФайл.Зашифрован);
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		ОперацияЗаписиФайла = Истина;
		ПрисоединенныйФайл.Записать();
		ОперацияЗаписиФайла = Ложь;
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Добавление присоединенного файла'"),
			УровеньЖурналаРегистрации.Ошибка, , , КомментарийЖурналаРегистрации);
		
		Если ОперацияЗаписиФайла Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Иначе
			ВызватьИсключение КомментарийЖурналаРегистрации;
		КонецЕсли;
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Обновляет свойства файла - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
// Параметры:
//  ИнформацияОФайле - Структура со свойствами:
//                     <обязательные>
//                       АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//                       АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                        извлеченного из файла.
//                     <необязательные>
//                       ДатаМодификацииУниверсальная   - Дата - дата последнего изменения файла, если
//                                                        свойство не указано или не заполнено, тогда будет
//                                                        установлена текущая дата сеанса.
//                       Расширение                     - Строка - новое расширение файла.
//                       Редактирует                    - Ссылка - новый пользователь, редактирующий файл.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	Перем Отказ;
	
	РеквизитыЗначения = Новый Структура;
	
	Если НЕ ИнформацияОФайле.Свойство("ДатаМодификацииУниверсальная")
	 ИЛИ НЕ ЗначениеЗаполнено(ИнформацияОФайле.ДатаМодификацииУниверсальная) Тогда
		// Заполнение текущей даты в формате универсального времени.
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", УниверсальноеВремя(ТекущаяДатаСеанса()));
	Иначе
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ИнформацияОФайле.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	ИзвлеченныйТекст = "";
	
	Если ЭтоАдресВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста);
		РеквизитыЗначения.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	ИначеЕсли НЕ ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
		// Тексты извлекаются сразу, а не в фоновом задании
		РеквизитыЗначения.СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
	КонецЕсли;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст));
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

// Возвращает имя формы объекта присоединенных файлов по владельцу.
Функция ПолучитьИмяФормыОбъектаПрисоединенныхФайловПоВладельцу(Знач ВладелецФайлов) Экспорт
	
	ПолноеИмяОМ = "Справочник." + ВладелецФайлов.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	МетаданныеПрисоединенныхФайлов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	
	Если МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта = Неопределено Тогда
		ИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
	Иначе
		ИмяФормы = МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// одной подсистемы к другой в каком-либо объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайлов - Ссылка на владелеца файлов.
//
Функция СконвертироватьФайлыВПрисоединенные(Знач ВладелецФайлов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файл.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файл
	|ГДЕ
	|	Файл.ВладелецФайла = &ВладелецФайлов";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайлов", ВладелецФайлов);
	ФайлыИсточник = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПолноеИмяОМ = ВладелецФайлов.Метаданные().ПолноеИмя();
	КраткоеИмяОМ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОМ, ".")[1];
	МенеджерПрисоединенныхФайлов = Справочники[КраткоеИмяОМ + "ПрисоединенныеФайлы"];
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭЦП                  = ФайлИсточникОбъект.ПодписанЭЦП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.СертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.СертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Для Каждого ЭЦПСтрока Из ТекущаяВерсияОбъект.ЭлектронныеЦифровыеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭЦПСтрока);
			КонецЦикла;
			
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				
				// "Вычислить" применяется для случая, когда подсистема РаботаСФайлами отсутствует в конфигурации.
				ХранилищеФайла = Вычислить("РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка)");
				ДвоичныеДанные = ХранилищеФайла.Получить();
				
				МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ТекущаяВерсияПутьКФайлу = "";
				ФайлИсточникОбъект.ТекущаяВерсияТом = "";
				ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Операции с ЭЦП

// Заносит информацию о одной ЭЦП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  ДанныеПодписи      - Структура для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОднойПодписи(Знач ПрисоединенныйФайл, Знач ДанныеПодписи) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитов.Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;

	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
		ПрисоединенныйФайл,
		ДанныеПодписи.НоваяПодписьДвоичныеДанные,
		ДанныеПодписи.Отпечаток,
		ДанныеПодписи.ДатаПодписи,
		ДанныеПодписи.Комментарий,
		ДанныеПодписи.ИмяФайлаПодписи,
		ДанныеПодписи.КомуВыданСертификат,
		ДанныеПодписи.ДвоичныеДанныеСертификата);
	
КонецПроцедуры

// Заносит информацию о массиве ЭЦП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  МассивПодписей     - Массив Структур данных подписей для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОПодписях(Знач ПрисоединенныйФайл, Знач МассивПодписей, Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Редактирует = ФайлОбъект.Редактирует;
	Зашифрован  = ФайлОбъект.Зашифрован;

	Если НЕ Редактирует.Пустая() Тогда
		СтрокаИсключения = ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	Если Зашифрован Тогда
		СтрокаИсключения = ФайловыеФункцииКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ФайлСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
		
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
			ФайлОбъект,
			ДанныеПодписи.НоваяПодписьДвоичныеДанные,
			ДанныеПодписи.Отпечаток,
			ДанныеПодписи.ДатаПодписи,
			ДанныеПодписи.Комментарий,
			ДанныеПодписи.ИмяФайлаПодписи,
			ДанныеПодписи.КомуВыданСертификат,
			ДанныеПодписи.ДвоичныеДанныеСертификата);
		
	КонецЦикла;
	
	ФайлОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает новый идентификатор объекта.
//  Для получения нового идентификатора выбирает последний идентификатор объекта
// из регистра НаличиеПрисоединенныхФайлов увеличивает его значение
// на одну единицу и возвращает полученный результат.
//
// Возвращаемое значение:
//  Строка (10) - новый идентификатор объекта.
//
Функция ПолучитьОчереднойИдентификаторОбъекта()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторОбъекта УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	
	// Вычисление нового идентификатора объекта.
	
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		Строка = "0000000000"; // По длине ресурса ИдентификаторОбъекта.
	Иначе
		Выборка = РезультатВыполненияЗапроса.Выбрать();
		Выборка.Следующий();
		Строка = Выборка.ИдентификаторОбъекта;
		
		// Правила вычисления, как в обычном сложении - при 
		// заполнении текущего разряда следующий разряд увеличивается
		// на единицу, при этом в текущем разряде значение становится
		// равным нулю. Значениями разрядов выступают символы
		// [0..9] и [a..z]. Таким образом один разряд может содержать
		// 34 значения.
		
		Позиция = 10; // 9- индекс 10-го символа
		Пока Позиция > 0 Цикл
			
			Символ = Сред(Строка, Позиция, 1);
			
			Если Символ = "z" Тогда
				Строка = Лев(Строка, Позиция-1) + "0" + Прав(Строка, 10 - Позиция);
				Позиция = Позиция - 1;
				Продолжить;
				
			ИначеЕсли Символ = "9" Тогда
				НовыйСимвол = "a";
			Иначе
				НовыйСимвол = Символ(КодСимвола(Символ)+1);
			КонецЕсли;
			
			Строка = Лев(Строка, Позиция-1) + НовыйСимвол + Прав(Строка, 10 - Позиция);
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

// Возвращает идентификатор владельца присоединенного файла.
Функция ПолучитьИдентификаторОбъекта(Знач ВладелецФайлов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|ГДЕ
	|	НаличиеПрисоединенныхФайлов.ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

// Обновляет свойства файла при окончании редактирования.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ИнформацияОФайле   - Структура со свойствами:
//                       <обязательные>
//                         АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//                         АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                          извлеченного из файла.
//                       <необязательные>
//                         ДатаМодификацииУниверсальная   - Дата - дата последнего изменения файла, если
//                                                          свойство не указано или не заполнено, тогда будет
//                                                          установлена текущая дата сеанса.
//                         Расширение                     - Строка - новое расширение файла.
//
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ИнформацияОФайле.Вставить("Редактирует", Справочники.Пользователи.ПустаяСсылка());
	
	ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле)
	
КонецПроцедуры

// Отменяет редактирование файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла, который требуется освободить.
//
Процедура ОсвободитьФайл(Знач ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если НЕ ФайлОбъект.Редактирует.Пустая() Тогда
		ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		ФайлОбъект.Записать();
	Конецесли;
	
КонецПроцедуры

// Отмечает файл, как редактируемый.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла, который требуется отметить.
//
Процедура ЗанятьФайлДляРедактированияСервер(Знач ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь();
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Помещает зашифрованные данные файла в хранилище и устанавливает файлу признак Зашифрован.
//
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на присоединенный файл.
//  ЗашифрованныеДанные - Структура со свойством:
//                          АдресВременногоХранилища - Строка - адрес зашифрованных двоичных данных.
//  МассивОтпечатков    - Массив Структур отпечатков по сертификатам.
// 
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ЗашифрованныеДанные, Знач МассивОтпечатков) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
		НоваяСтрока = ПрисоединенныйФайлОбъект.СертификатыШифрования.Добавить();
		НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
		НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
		НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
	КонецЦикла;
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Истина);
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(""));
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ЗашифрованныеДанные.АдресВременногоХранилища, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Помещает расшифрованные данные файла в хранилище и снимает файлу признак Зашифрован.
// 
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на присоединенный файл.
//  ЗашифрованныеДанные - Структура со свойством:
//                          АдресВременногоХранилища - Строка - адрес расшифрованных двоичных данных.
//
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач РасшифрованныеДанные) Экспорт
	
	Перем Отказ;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СертификатыШифрования.Очистить();
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Ложь);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилища);
	СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИзвлеченныйТекст = "";
	
	Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = ФайловыеФункции.ПолучитьСтрокуИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста);
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	ИначеЕсли НЕ ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
		// Тексты извлекаются сразу, а не в фоновом задании.
		СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9)));
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ДвоичныеДанные, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывает исключение в стандартной форме списка справочника присоединенных файлов.
Процедура ВызватьИсключениеОткрытияФормы(Форма) Экспорт
	
	// Пропуск инициализации, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Форма.Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Самостоятельное использование формы не предусмотрено.'");
	
КонецПроцедуры

// Размещает файлы из сформированного образа.
Процедура ДобавитьФайлыВТомаПриРазмещении(Знач СоответствиеПутейФайлов, Знач ТипХраненияФайлов, Знач Файлы) Экспорт
	
	Для Каждого ЭлементСоответствия Из СоответствиеПутейФайлов Цикл
		
		Позиция = Найти(ЭлементСоответствия.Ключ, "CatalogRef");
		
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(ЭлементСоответствия.Ключ);
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Лев(ЭлементСоответствия.Ключ, Позиция - 1));
		
		ИмяСправочника = Прав(ЭлементСоответствия.Ключ, СтрДлина(ЭлементСоответствия.Ключ) - Позиция -10);
		Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(УникальныйИдентификатор);
		
		Если Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файлы.Найти(ТипЗнч(Объект)) = Неопределено Тогда
			Файлы.Добавить(ТипЗнч(Объект));
		КонецЕсли;
		
		// Размещение файлов в базе-приемнике внутри базы, независимо от хранения в базе-источнике.
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			
			ОбновитьДвоичныеДанныеФайлаНаСервере(Объект, ПоместитьВоВременноеХранилище(ДвоичныеДанные));
			
		Иначе // Размещение файлов в базе-приемнике внутри тома, независимо от хранения в базе-источнике.
			
			ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
			РазмерФайла = ФайлИсх.Размер();
			
			ВремяИзменения = Объект.ДатаМодификацииУниверсальная;
			ИмяБезРасширения = Объект.Наименование;
			Расширение = Объект.Расширение;
			Зашифрован = Объект.Зашифрован;
			
			ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// Добавление файла в один из томов (где есть свободное место).
			
			ФайловыеФункции.ДобавитьНаДиск(
				ПолныйПутьНовый,
				ПутьКФайлуНаТоме,
				СсылкаНаТом,
				ВремяИзменения,
				"",
				ИмяБезРасширения,
				Расширение,
				РазмерФайла,
				Зашифрован);
			
			Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
			Объект.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли;
		
		Объект.Записать();
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет регистрацию в плане обмена при обмене файлами.
//
// Параметры:
//  ПланОбменаСсылка - Ссылка на план обмена.
//  ТипыФайлов       - Массив Типов справочников с присоединенными файлами.
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ТипыФайлов) Экспорт
	
	Для Каждого Тип Из ТипыФайлов Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает свойства присоедиеннного файла - двоичные данные и подпись.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  АдресПодписи       - Строка - адрес подписи во временном хранилище.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    ДвоичныеДанные        - ДвоичныеДанные присоединенного файла.
//    ДвоичныеДанныеПодписи - ДвоичныеДанные подписи.
//
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(Знач ПрисоединенныйФайл, Знач АдресПодписи) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДвоичныеДанные",        ПолучитьДвоичныеДанныеФайла(ПрисоединенныйФайл));
	Свойства.Вставить("ДвоичныеДанныеПодписи", ПолучитьИзВременногоХранилища(АдресПодписи));
	
	Возврат Свойства;
	
КонецФункции

// Заполняет текст запроса для получения присоединенных файлов у которых не извлечен текст.
//  Текст запроса формируется по всем справочникам присоединенных файлов. В качестве параметра
// может прийти другой запрос, с которым следует сделать объединение.
//
// Параметры:
//  ТекстЗапроса - Строка (возвращаемое значение), варианты передаваемых значений:
//                   Пустая строка   - будет возвращен требуемый текст запроса.
//                   Непустая строка - будет возвращен требуемый текст запроса, добавленный
//                                     к переданному тексту посредством "ОБЪЕДИНИТЬ ВСЕ".
// 
//  ПолучитьВсеФайлы - Булево - начальное значение Ложь. Позволяет отключить выборку присоединенных
//                              файлов по частям, если передать Истина.
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса = "", ПолучитьВсеФайлы = Ложь) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	
	ЧислоФайловВВыборке = Цел(100 / ТипыВладельцев.Количество());
	ЧислоФайловВВыборке = ?(ЧислоФайловВВыборке < 10, 10, ЧислоФайловВВыборке);
	
	Индекс = 1;
	Для Каждого Тип Из ТипыВладельцев Цикл
		
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляФайловСНеизвлеченнымТекстом(
			ИмяСправочникаПрисоединенныхФайлов,
			ЧислоФайловВВыборке,
			ПолучитьВсеФайлы);
			
		Если Индекс < ТипыВладельцев.Количество() Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает путь к файлу на диске. Если файл хранится в информационной базе,
// предварительно сохраняет его.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  Строка - полный путь к файлу на диске.
//
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(Знач ПрисоединенныйФайл) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ПрисоединенныйФайл.Расширение);
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			ДвоичныеДанные.Записать(ИмяФайлаСПутем);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия файла: файл не найден в информационной базе.
				           |Обратитесь к администратору.
				           |
				           |Файл: ""%1.%2"".'"),
				ПрисоединенныйФайл.Наименование,
				ПрисоединенныйФайл.Расширение);
		КонецЕсли;
	Иначе
		Если НЕ ПрисоединенныйФайл.Том.Пустая() Тогда
			ИмяФайлаСПутем = ФайловыеФункции.ПолныйПутьТома(ПрисоединенныйФайл.Том) + ПрисоединенныйФайл.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записывает присоединеннный файл в привилегированном режиме.
// 
// Параметры:
//  ФайлОбъект   - Объект присоединенного файла.
// 
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ФайлОбъект.Записать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет параметр КоличествоФайловВТомах.
Процедура ПолучитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляФайловВТомах(ИмяСправочникаПрисоединенныхФайлов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоФайловВТомах = КоличествоФайловВТомах + Выборка.КоличествоФайлов;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество версий с неизвлеченным текстом.
Функция ПолучитьКоличествоВерсийСНеизвлеченнымТекстом() Экспорт
	
	КоличествоФайлов = 0;
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляЧислаФайловСНеизвлеченнымТекстом(ИмяСправочникаПрисоединенныхФайлов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоФайлов = КоличествоФайлов + Выборка.КоличествоФайлов;
		КонецЕсли
	КонецЦикла;
	
	Возврат КоличествоФайлов;
	
КонецФункции

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
// Определяет есть ли хранимые файлы у внешнего объекта.
// 
// Параметры:
//  ВнешнийОбъект     - Ссылка на внешний объект.
//  ЕстьХранимыеФайлы - Булево (возвращаемое значение), варианты значений параметра:
//                        Истина - возврат,
//                        Ложь   - устанавливает Истина, если объект имеет хранимые файлы.
//
Процедура ОпределитьНаличиеХранимыхФайлов(Знач ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	Если ЕстьХранимыеФайлы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено Тогда
		ЕстьХранимыеФайлы = ОбъектИмеетФайлы(ВнешнийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив ХранимыеФайлы данными хранимых файлов объекта ВнешнийОбъект.
Процедура ПолучитьХранимыеФайлы(Знач ВнешнийОбъект, Знач ХранимыеФайлы) Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлыКОбъекту.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Файл.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Размер",                       Файл.Размер);
		ДанныеФайла.Вставить("Наименование",                 Файл.Наименование);
		ДанныеФайла.Вставить("Расширение",                   Файл.Расширение);
		ДанныеФайла.Вставить("ДвоичныеДанныеФайла",          ПолучитьДанныеФайла(Файл, Неопределено).СсылкаНаДвоичныеДанныеФайла);
		ДанныеФайла.Вставить("Текст",                        Файл.ТекстХранилище.Получить());
		
		ХранимыеФайлы.Добавить(ДанныеФайла);
	КонецЦикла;
		
КонецПроцедуры

Функция ТекстЗапросаДляФайловСНеизвлеченнымТекстом(Знач ИмяСправочника, Знач ЧислоФайловВВыборке, Знач ПолучитьВсеФайлы = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	(ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ПрисоединенныеФайлы.Зашифрован";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", ?(
		ПолучитьВсеФайлы,
		"",
		"ПЕРВЫЕ " + Формат(ЧислоФайловВВыборке, "ЧГ=; ЧН=")) );
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляФайловВТомах(Знач ИмяСправочника)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляЧислаФайловСНеизвлеченнымТекстом(Знач ИмяСправочника)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	(ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ПрисоединенныеФайлы.Зашифрован";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(Знач ПрисоединенныйФайл,
                                               Знач АдресФайлаВоВременномХранилищеДвоичныеДанные,
                                               Знач РеквизитыЗначения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ФайлОбъект.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(АдресФайлаВоВременномХранилищеДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = АдресФайлаВоВременномХранилищеДвоичныеДанные;
	Иначе
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилищеДвоичныеДанные);
	КонецЕсли;
	
	ФайлОбъект.Изменил = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(РеквизитыЗначения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ФайлОбъект, РеквизитыЗначения);
	КонецЕсли;
	
	ТранзакцияАктивна = Ложь;
	
	Попытка
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		Иначе
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ФайлНаДиске = Новый Файл(ПолныйПуть);
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				
				ФайловыеФункции.ДобавитьНаДиск(
					ДвоичныеДанные,
					ФайлОбъект.ПутьКФайлу,
					ФайлОбъект.Том,
					ФайлОбъект.ДатаМодификацииУниверсальная,
					"",
					ФайлОбъект.Наименование,
					ФайлОбъект.Расширение,
					ДвоичныеДанные.Размер(),
					ФайлОбъект.Зашифрован);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Запись файла на диске'"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники[ФайлСсылка.Метаданные().Имя],
					ФайлСсылка,
					ТекстОшибкиПриСохраненииФайлаВТоме(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка));
				
				ВызватьИсключение ТекстОшибкиПриСохраненииФайлаВТоме(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
		ФайлОбъект.Размер = ДвоичныеДанные.Размер();
		
		ФайлОбъект.Записать();
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			ФайлОбъект.Разблокировать();
		КонецЕсли;
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Обновление данных присоединенного файла на сервере'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает двоичные данные файла в информационную базу.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ДвоичныеДанные     - ДвоичныеДанные, которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
	МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Определяет, что к объекту присоединен по крайней мере один файл.
Функция ОбъектИмеетФайлы(Знач ВладелецФайла, Знач ФайлИсключение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса =  ТекстЗапроса +
		"
		|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если ФайлИсключение <> Неопределено Тогда
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает массив присоединенных файлов для указанного владельца.
//
// Параметры:
//  ВладелецФайла - Ссылка на владельца присоединенных файлов.
//
// Возвращаемое значение:
//  Массив ссылок на присоединенные файлы.
//
Функция ПолучитьВсеПодчиненныеФайлы(Знач ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриСохраненииФайлаВТоме(Знач СообщениеОбОшибке, Знач Файл)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка, при сохранении файла в томе:
		           |%1
		           |
		           |Ссылка на файл: ""%2"".'"),
		СообщениеОбОшибке,
		ПолучитьНавигационнуюСсылку(Файл) );
	
КонецФункции

Функция ИзвлечьТекст(Знач ДвоичныеДанные, Знач Расширение, ИзвлеченныйТекст)
	
	Если ФайловыеФункции.ЭтоПлатформаWindows()
	   И ФайловыеФункции.ФоновоеИзвлечениеТекстовФайловНаСервере() Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Отказ = Ложь;
		ИзвлеченныйТекст = ФайловыеФункцииКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяВременногоФайла, , Отказ);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Если Отказ Тогда
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		Иначе
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		ИзвлеченныйТекст = "";
		Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
КонецФункции

// Обработчик подписки на событие "Перед удалением" присоединенного файла.
Процедура ПередУдалениемПрисоединенногоФайлаСервер(Знач Ссылка, Знач ВладелецФайла, Знач Том, Знач ТипХраненияФайла, Знач ПутьКФайлу) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбъектИмеетФайлы(ВладелецФайла, Ссылка) Тогда
		МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Том) + ПутьКФайлу;
			Попытка
				Файл = Новый Файл(ПолныйПуть);
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				ПутьСПодкаталогом = Файл.Путь;
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
			Исключение
				// Если файл не удален - ошибки не было.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "при записи" присоединенного файла
//
Процедура ПриЗаписиПрисоединенногоФайлаСервер(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = ПолучитьОчереднойИдентификаторОбъекта();
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Создает у Получателя копии всех присоединенных файлов Источника.
// Источник и Получатель должны быть объектами одного типа.
//
// Параметры:
//  Источник   - Ссылка - объект, имеющий присоединенные файлы для копирования.
//  Получатель - Ссылка - объект, к которому копируются присоединенные файлы.
//
Процедура СкопироватьПрисоединенныеФайлы(Знач Источник, Знач Получатель) Экспорт
	
	КопируемыеФайлы = ПолучитьВсеПодчиненныеФайлы(Источник.Ссылка);
	Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
		Если КопируемыйФайл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КопируемыйФайл);
		КопияФайла = КопируемыйФайл.Скопировать();
		КопияФайлаСсылка = МенеджерОбъекта.ПолучитьСсылку();
		КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
		КопияФайла.ВладелецФайла = Получатель.Ссылка;
		КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		
		КопияФайла.ТекстХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
		КопияФайла.ФайлХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
		
		КопияФайла.ЭлектронныеЦифровыеПодписи.Очистить();
		Для Каждого КопируемаяСтрокаТаблицы Из КопируемыйФайл.ЭлектронныеЦифровыеПодписи Цикл
			КопияСтрокиТаблицы = КопияФайла.ЭлектронныеЦифровыеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтрокиТаблицы, КопируемаяСтрокаТаблицы);
			КопияСтрокиТаблицы.Подпись = КопируемаяСтрокаТаблицы.Подпись;
			КопияСтрокиТаблицы.Сертификат = КопируемаяСтрокаТаблицы.Сертификат;
		КонецЦикла;
		
		КопияФайла.СертификатыШифрования.Очистить();
		Для Каждого КопируемаяСтрокаТаблицы Из КопируемыйФайл.СертификатыШифрования Цикл
			КопияСтрокиТаблицы = КопияФайла.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтрокиТаблицы, КопируемаяСтрокаТаблицы);
			КопияСтрокиТаблицы.Сертификат = КопируемаяСтрокаТаблицы.Сертификат;
		КонецЦикла;
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеФайла(КопируемыйФайл);
		КопияФайла.ТипХраненияФайла = ФайловыеФункции.ПолучитьТипХраненияФайлов();
		Если ФайловыеФункции.ПолучитьТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
		Иначе
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункции.ДобавитьНаДиск(ДвоичныеДанные, КопияФайла.ПутьКФайлу, КопияФайла.Том, 
				КопияФайла.ДатаМодификацииУниверсальная, "",
				КопияФайла.Наименование, КопияФайла.Расширение, КопияФайла.Размер);
		КонецЕсли;
		КопияФайла.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Переносит файлы из "Работы с файлами" в "Присоединенные файлы".
Процедура ПометитьНаУдалениеВерсииФайла(Знач ФайлСсылка, Знач ВерсияИсключение)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &Владелец
	|	И НЕ ВерсииФайлов.ПометкаУдаления
	|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.ПометкаУдаления = Истина;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
		ВерсияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры
