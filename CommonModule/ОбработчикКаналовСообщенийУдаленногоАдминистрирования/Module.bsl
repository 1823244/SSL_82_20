////////////////////////////////////////////////////////////////////////////////
// ОбработчикКаналовСообщенийУдаленногоАдминистрирования.
//
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает список обработчиков сообщений, которые обрабатывает данная подсистема.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений
// 
Процедура ПолучитьОбработчикиКаналовСообщений(Знач Обработчики) Экспорт
	
	ИменаКаналов = СообщенияУдаленногоАдминистрированияПовтИсп.ПолучитьКаналыПакета(
		СообщенияУдаленногоАдминистрированияПовтИсп.ПакетУдаленноеАдминистрирование());
	
	Для каждого ИмяКанала Из ИменаКаналов Цикл
		Обработчик = Обработчики.Добавить();
		Обработчик.Канал = ИмяКанала;
		Обработчик.Обработчик = ОбработчикКаналовСообщенийУдаленногоАдминистрирования;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	ТипСообщения = СообщенияУдаленногоАдминистрирования.ТипСообщенияПоИмениКанала(КаналСообщений);
	
	Содержимое = СообщенияУдаленногоАдминистрирования.ПолучитьСодержимоеСообщения(ТелоСообщения);
	
	Словарь = СообщенияУдаленногоАдминистрированияПовтИсп;
	
	Если ТипСообщения = Словарь.СообщениеОбновитьПользователя() Тогда
		ОбновитьПользователя(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеПодготовитьОбластьДанных() Тогда
		ПодготовитьОбластьДанных(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУдалитьОбластьДанных() Тогда
		УдалитьОбластьДанных(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьДоступКОбластиДанных() Тогда
		УстановитьДоступКОбластиДанных(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьКонечнуюТочкуМенеджераСервиса() Тогда
		УстановитьКонечнуюТочкуМенеджераСервиса(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПараметрыИБ() Тогда
		УстановитьПараметрыИБ(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПараметрыОбластиДанных() Тогда
		УстановитьПараметрыОбластиДанных(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПолныеПраваОбластиДанных() Тогда
		УстановитьПолныеПраваОбластиДанных(Содержимое, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПраваПользователяПоУмолчанию() Тогда
		УстановитьПраваПользователяПоУмолчанию(Содержимое, Отправитель);
	Иначе
		
		СообщенияУдаленногоАдминистрирования.ОшибкаНеизвестноеИмяКанала(КаналСообщений);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////////
// Управление пользователями

// Структура содержимого сообщения
//  Имя
//  ПолноеИмя
//  СохраняемоеЗначениеПароля
//  Язык
//  Почта
//  ОбластьДанных
//  ИдентификаторПользователяСервиса
//  ИдентификаторПользователяОбластиДанных
//
Процедура ОбновитьПользователя(Содержимое, Отправитель)
	
	ОписаниеПользователя = Содержимое;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЯзыкПользователя = ПолучитьЯзыкПоКоду(ОписаниеПользователя.Язык);
	
	Если ОписаниеПользователя.Установлено("Почта") Тогда
		Почта = ОписаниеПользователя.Почта;
	Иначе
		Почта = "";
	КонецЕсли;
	
	СтруктураАдресаЭП = ПолучитьСтруктуруАдресаЭлектроннойПочты(Почта);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОписаниеПользователя.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		Если ОписаниеПользователя.Установлено("ИдентификаторПользователяОбластиДанных")
			И ЗначениеЗаполнено(ОписаниеПользователя.ИдентификаторПользователяОбластиДанных) Тогда
			
			ПользовательОбластиДанных = Справочники.Пользователи.ПолучитьСсылку(ОписаниеПользователя.ИдентификаторПользователяОбластиДанных);
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПользовательОбластиДанных);
			
			Блокировка.Заблокировать();
			
			ИдентификаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПользовательОбластиДанных, "ИдентификаторПользователяИБ");
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Ссылка,
			|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
			Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ОписаниеПользователя.ИдентификаторПользователяСервиса);
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ИдентификаторПользователяИБ = Неопределено;
				ПользовательОбластиДанных = Неопределено;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ИдентификаторПользователяИБ = Выборка.ИдентификаторПользователяИБ;
				ПользовательОбластиДанных = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательОбластиДанных) Тогда
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательОбъект.ИдентификаторПользователяСервиса = ОписаниеПользователя.ИдентификаторПользователяСервиса;
		Иначе
			ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
		КонецЕсли;
		
		ПользовательОбъект.Наименование = ОписаниеПользователя.ПолноеИмя;
		
		ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
		
		СтруктураПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		Если ЗначениеЗаполнено(ИдентификаторПользователяИБ)
			И Пользователи.ПользовательПоИдентификаторуСуществует(ИдентификаторПользователяИБ) Тогда
			СтруктураПользователяИБ.ПользовательИнфБазыУникальныйИдентификатор = ИдентификаторПользователяИБ;
		КонецЕсли;
		
		СтруктураПользователяИБ.ПользовательИнфБазыИмя = ОписаниеПользователя.Имя;
		
		СтруктураПользователяИБ.ПользовательИнфБазыПолноеИмя = ОписаниеПользователя.ПолноеИмя;
		
		СтруктураПользователяИБ.ПользовательИнфБазыАутентификацияСтандартная = Истина;
		СтруктураПользователяИБ.ПользовательИнфБазыАутентификацияOpenID      = Истина;
		СтруктураПользователяИБ.ПользовательИнфБазыПоказыватьВСпискеВыбора = Ложь;

		СтруктураПользователяИБ.ПользовательИнфБазыСохраняемоеЗначениеПароля = ОписаниеПользователя.СохраняемоеЗначениеПароля;
		
		СтруктураПользователяИБ.ПользовательИнфБазыЯзык = ЯзыкПользователя;
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ДоступКИнформационнойБазеРазрешен", Истина);
		ПользовательОбъект.ДополнительныеСвойства.Вставить("СтруктураОписанияПользователяИБ", СтруктураПользователяИБ);
		
		ПользовательОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление пользователя'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСтруктуруАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочты)
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		
		Попытка
			СтруктураАдресаЭП = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭлектроннойПочты);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Указан некорректный адрес электронной почты: %1
				|Ошибка: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				АдресЭлектроннойПочты, ИнформацияОбОшибке().Описание);
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
		Возврат СтруктураАдресаЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты(Знач ПользовательОбъект, Знач Адрес, Знач СтруктураАдресаЭП)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтруктураАдресаЭП = Неопределено Тогда
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ПользовательОбъект.КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТабличнойЧасти.Вид = ВидКИ;
		КонецЕсли;
		СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТабличнойЧасти.Представление = Адрес;
		
		Если СтруктураАдресаЭП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.АдресЭП = СтруктураАдресаЭП[0].Адрес;
			
			Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
			Если Поз <> 0 Тогда
				СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Структура содержимого сообщения
//  ИдентификаторПользователяСервиса
//  ОбластьДанных
//  Значение
//
Процедура УстановитьПолныеПраваОбластиДанных(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Содержимое.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Содержимое.ИдентификаторПользователяСервиса);
		
		Если ПользователиПереопределяемый.ЗапретРедактированияРолей()
			И Метаданные.ОбщиеМодули.Найти("УправлениеДоступом") <> Неопределено Тогда
			// Используется управление доступом
			
			ИмяСправочникка = "ГруппыДоступа";
			
			ГруппаОбъект = Справочники.ГруппыДоступа.Администраторы.Ссылка.ПолучитьОбъект();
			
			СтрокаПользователь = ГруппаОбъект.Пользователи.Найти(ПользовательОбластиДанных, "Пользователь");
			Если Содержимое.Значение Тогда
				Если СтрокаПользователь = Неопределено Тогда
					СтрокаПользователь = ГруппаОбъект.Пользователи.Добавить();
					СтрокаПользователь.Пользователь = ПользовательОбластиДанных;
				КонецЕсли;
			Иначе
				Если СтрокаПользователь <> Неопределено Тогда
					ГруппаОбъект.Пользователи.Удалить(СтрокаПользователь);
				КонецЕсли;
			КонецЕсли;
			ГруппаОбъект.Записать();
			
		Иначе
			
			ПользовательИБ = ПолучитьПользователяИБПоПользователюОбластиДанных(ПользовательОбластиДанных);
			
			РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
			Если Содержимое.Значение Тогда
				Если НЕ ПользовательИБ.Роли.Содержит(РольПолныеПрава) Тогда
					ПользовательИБ.Роли.Добавить(РольПолныеПрава);
				КонецЕсли;
			Иначе
				Если ПользовательИБ.Роли.Содержит(РольПолныеПрава) Тогда
					ПользовательИБ.Роли.Удалить(РольПолныеПрава);
				КонецЕсли;
			КонецЕсли;
			
			Пользователи.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка полных прав области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Знач ИдентификаторПользователяСервиса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
	Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
	
	НачатьТранзакцию();
	Попытка
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение пользователя области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден пользователь с идентификатором пользователя сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИдентификаторПользователяСервиса);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Функция ПолучитьПользователяИБПоПользователюОбластиДанных(Знач ПользовательОбластиДанных)
	
	ИдентфиикаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПользовательОбластиДанных, "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентфиикаторПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Для пользователя области данных с идентификатором %1 не существует пользователя информационной базы'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПользовательОбластиДанных.УникальныйИдентификатор());
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции

Функция ПолучитьЯзыкПоКоду(Знач КодЯзыка)
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		
		Для каждого Язык Из Метаданные.Языки Цикл
			Если Язык.КодЯзыка = КодЯзыка Тогда
				Возврат Язык.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый код языка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Язык);
		ВызватьИсключение(ТекстСообщения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Структура содержимого сообщения
//  ИдентификаторПользователяСервиса
//  Имя*
//  СохраняемоеЗначениеПароля*
//  Язык*
//  ОбластьДанных
//  Значение
//
Процедура УстановитьДоступКОбластиДанных(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Содержимое.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Содержимое.ИдентификаторПользователяСервиса);
		
		ИдентфиикаторПользователяИБ = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПользовательОбластиДанных, "ИдентификаторПользователяИБ");
		
		Если Содержимое.Значение Тогда
			Если НЕ ЗначениеЗаполнено(ИдентфиикаторПользователяИБ)
				ИЛИ ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентфиикаторПользователяИБ) = Неопределено Тогда
				
				ЯзыкПользователяИБ = ПолучитьЯзыкПоКоду(Содержимое.Язык);
				
				ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				ПользовательИБ.Имя = Содержимое.Имя;
				ПользовательИБ.Язык = ЯзыкПользователяИБ;
				ПользовательИБ.СохраняемоеЗначениеПароля = Содержимое.СохраняемоеЗначениеПароля;
				ПользовательИБ.ПолноеИмя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПользовательОбластиДанных, "Наименование");
				ПользовательИБ.Записать();
				
				ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
				ПользовательОбъект.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
				ПользовательОбъект.Записать();
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ИдентфиикаторПользователяИБ) Тогда
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентфиикаторПользователяИБ);
				Если ПользовательИБ <> Неопределено Тогда
					ПользовательИБ.Удалить();
				КонецЕсли;
				
				ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
				ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
				ПользовательОбъект.Записать();
				
			КонецЕсли;
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка доступа к области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПраваПользователяПоУмолчанию(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Содержимое.ОбластьДанных);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Содержимое.ИдентификаторПользователяСервиса);
		ПользователиПереопределяемый.УстановитьПраваПоУмолчанию(ПользовательОбластиДанных);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка прав пользователя'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Управление областями данных

// Структура содержимого сообщения
//  ОбластьДанных
//  ИдентификаторФайлаДанных
//
Процедура ПодготовитьОбластьДанных(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.РежимИспользованияИнформационнойБазы.Получить()) Тогда
			ТекстСообщения = НСтр("ru = 'Не установлен режим работы конфигурации'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Содержимое.ОбластьДанных);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Содержимое.ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Удалена Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 удалена'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.КУдалению Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 в процессе удаления'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Новая Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 в процессе подготовки к использованию'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Используется Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 используется.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ОбластьДанных = Содержимое.ОбластьДанных;
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Новая;
		Если ЗначениеЗаполнено(Содержимое.ИдентификаторФайлаДанных) Тогда
			МенеджерЗаписи.ИдентификаторВыгрузки = Содержимое.ИдентификаторФайлаДанных;
		КонецЕсли;
		МенеджерЗаписи.Повтор = 0;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Подготовка области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Содержимое.ОбластьДанных);
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.ИдентификаторВыгрузки) Тогда
		ПараметрыМетода.Добавить(МенеджерЗаписи.ИдентификаторВыгрузки);
	КонецЕсли;
	
	ОчередьЗаданий.ЗапланироватьВыполнениеЗадания(
		"РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию", ПараметрыМетода, "1",, Содержимое.ОбластьДанных);
	
КонецПроцедуры

// Структура содержимого сообщения
//  ОбластьДанных
//
Процедура УдалитьОбластьДанных(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Содержимое.ОбластьДанных);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Содержимое.ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ШаблонСообщения = НСтр("ru = 'Область данных %1 не существует.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		МенеджерЗаписи.ОбластьДанных = Содержимое.ОбластьДанных;
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.КУдалению;
		МенеджерЗаписи.Повтор = 0;
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Содержимое.ОбластьДанных);
	
	ОчередьЗаданий.ЗапланироватьВыполнениеЗадания(
		"РаботаВМоделиСервиса.ОчиститьОбластьДанных", ПараметрыМетода, "1",, Содержимое.ОбластьДанных);
	
КонецПроцедуры

// Структура содержимого сообщения
//  ОбластьДанных
//  ЧасовойПояс
//  Наименование
Процедура УстановитьПараметрыОбластиДанных(Содержимое, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Содержимое.ОбластьДанных);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Содержимое.ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ШаблонСообщения = НСтр("ru = 'Область данных %1 не существует.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Содержимое.ОбластьДанных);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		МенеджерЗаписи.Представление = Содержимое.Наименование;
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Содержимое.ОбластьДанных);
		
		Если ЗначениеЗаполнено(Содержимое.ЧасовойПояс) Тогда
			УстановитьЧасовойПоясИнформационнойБазы(Содержимое.ЧасовойПояс);
		Иначе
			УстановитьЧасовойПоясИнформационнойБазы();
		КонецЕсли;
		
		МенеджерЗаписи.ЧасовойПояс = Содержимое.ЧасовойПояс;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка параметров области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не ПустаяСтрока(Содержимое.Наименование) Тогда
		
		ОбновитьСвойстваПредопределенныхУзлов(Содержимое.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвойстваПредопределенныхУзлов(Знач Наименование)
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		ПланОбменаИспользуетсяВМоделиСервиса = Ложь;
		
		Попытка
			ПланОбменаИспользуетсяВМоделиСервиса = ПланыОбмена[ПланОбмена.Имя].ПланОбменаИспользуетсяВМоделиСервиса();
		Исключение
			ПланОбменаИспользуетсяВМоделиСервиса = Ложь;
		КонецПопытки;
		
		Если ПланОбменаИспользуетсяВМоделиСервиса Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			СвойстваУзла = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭтотУзел, "Код, Наименование");
			
			Если ПустаяСтрока(СвойстваУзла.Код) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			ИначеЕсли СвойстваУзла.Наименование <> Наименование Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Управление информационной базой

// Структура содержимого сообщения
//  Параметры
Процедура УстановитьПараметрыИБ(Содержимое, Отправитель)
	
	Параметры = СериализаторXDTO.ПрочитатьXDTO(Содержимое.Параметры);
	
	НачатьТранзакцию();
	Попытка
		ТаблицаПараметров = РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ();
		
		ИзменяемыеПараметры = Новый Структура;
		
		// Проверка корректности списка параметров
		Для каждого КлючИЗначение Из Параметры Цикл
			
			СтрокаПараметра = ТаблицаПараметров.Найти(КлючИЗначение.Ключ, "Имя");
			Если СтрокаПараметра = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'Не известное имя параметра %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КлючИЗначение.Ключ);
				ЗаписьЖурналаРегистрации("УдаленноеАдминистрирование.УстановитьПараметрыИБ",
					УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
				Продолжить;
			ИначеЕсли СтрокаПараметра.ЗапретЗаписи Тогда
				ШаблонСообщения = НСтр("ru = 'Параметр %1 может использоваться только для чтения'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КлючИЗначение.Ключ);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
			
			ИзменяемыеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		
		СтандартныеПодсистемыПереопределяемый.ПриУстановкеЗначенийПараметровИБ(ИзменяемыеПараметры);
		РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ(ИзменяемыеПараметры);
		
		Для каждого КлючИЗначение Из ИзменяемыеПараметры Цикл
			
			Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка параметров ИБ'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьКонечнуюТочкуМенеджераСервиса(Содержимое, Отправитель)
	
	Константы.КонечнаяТочкаМенеджераСервиса.Установить(Отправитель);
	
КонецПроцедуры
