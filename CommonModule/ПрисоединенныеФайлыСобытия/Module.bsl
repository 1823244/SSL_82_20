////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработчик подписки присоединенного файла на событие "Перед записью".
Процедура ПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Источник.Расширение);
	
	Если Источник.ЭтоНовый() Тогда
		Источник.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "Перед удалением".
Процедура ПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.ПередУдалениемПрисоединенногоФайлаСервер(Источник.Ссылка, Источник.ВладелецФайла, Источник.Том, Источник.ТипХраненияФайла, Источник.ПутьКФайлу);
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "При записи".
Процедура ПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлы.ПриЗаписиПрисоединенногоФайлаСервер(Источник.ВладелецФайла);
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "Обработка получения формы".
Процедура ОбработкаПолученияФормыПрисоединенногоФайла(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныйФайл";
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныеФайлы";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик подписки владельца присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПриложенныеФайлы(Источник);
	
КонецПроцедуры

// Обработчик подписки владельца-документа присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - ДокументОбъект - владелец присоединенного файла.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПриложенныеФайлы(Источник);
	
КонецПроцедуры

// Обработчик подписки владельца присоединенного файла на событие "При записи на сервере".
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ПрисоединенныеФайлы.СкопироватьПрисоединенныеФайлы(Параметры.ЗначениеКопирования, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок

Процедура ПометитьНаУдалениеПриложенныеФайлы(Знач Источник)
	
	Если Источник.ЭтоНовый() ТОгда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	ПолноеИмяСправочника = "Справочник." + Источник.Метаданные().Имя + "ПрисоединенныеФайлы";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Источник.ПометкаУдаления И Не Выборка.Редактирует.Пустая() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				           |т.к. содержит файл ""%2"",
				           |занятый для редактирования.'"),
				Строка(Источник.Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Знач Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Использование = Истина;
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Значение = Источник.Ссылка;
		
		Запись = НаборЗаписей.Добавить();
		Запись.ПрисоединенныйФайл = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий обмена

// Проверяет, что переданный элемент данных - это объект присоединенного файла.
Процедура ЭтоЭлементФайл(Знач ЭлементДанных, ЭтоФайл) Экспорт
	
	ЭтоФайл = ЭтоФайл Или ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных);
	
КонецПроцедуры

// Проверяет, что переданный элемент данных - это объект присоединенного файла.
Функция ЭтоЭлементПрисоединенныеФайлы(Знач ЭлементДанных) Экспорт
	
	МетаданныеЭлемента = ЭлементДанных.Метаданные();
	
	Возврат ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлемента)
	      И ВРег(Прав(МетаданныеЭлемента.Имя, СтрДлина("ПрисоединенныеФайлы"))) = ВРег("ПрисоединенныеФайлы");
	
КонецФункции

// Создает начальный образ работы с файлами.
Процедура УстановитьИмяФайлаПриОтправкеДанныхФайла(Знач ЭлементДанных, Знач ИмяКаталогаФайлов, Знач УникальныйИдентификатор, ПутьФайла) Экспорт
	
	Если ПутьФайла <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПутьФайла = Неопределено;
	
	Если ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		ПутьФайла = ИмяКаталогаФайлов + "\" + УникальныйИдентификатор + "CatalogRef_" + ЭлементДанных.Метаданные().Имя;
	КонецЕсли;
	
КонецПроцедуры

// Используется в обмене при получении данных.
Процедура ДобавитьНаДискПриПолученииДанныхФайла(Знач ЭлементДанных,
                                                Знач ДвоичныеДанные,
                                                ПутьКФайлуНаТоме,
                                                СсылкаНаТом,
                                                Знач ВремяИзменения,
                                                Знач ИмяБезРасширения,
                                                Знач Расширение,
                                                Знач РазмерФайла,
                                                Знач Зашифрован) Экспорт
	
	Если ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		
		ФайловыеФункции.ДобавитьНаДиск(
			ДвоичныеДанные,
			ПутьКФайлуНаТоме,
			СсылкаНаТом,
			ВремяИзменения,
			"", 
			ИмяБезРасширения,
			Расширение,
			РазмерФайла,
			Зашифрован);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет дополнительную обработку при отправке данных обмена.
//  Помещает данные присоединенного файла из регистра во временное хранилище,
// адрес которого запоминается в реквизите ФайлХранилище.
//
Процедура ВыполнитьДополнительнуюОбработкуПриОтправкеДанных(Знач ЭлементДанных) Экспорт
	
	Если Не ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлементДанных.Ссылка).СсылкаНаДвоичныеДанныеФайла;
	
	ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

// Выполняет дополнительную обработку при получении данных обмена.
//  Размещает присоединенные файлы в регистре.
//
Процедура ВыполнитьДополнительнуюОбработкуПриПолученииДанных(Знач ЭлементДанных) Экспорт
	
	Если Не ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ЭлементДанных.ФайлХранилище.Получить();
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", Значение);
	КонецЕсли;
	
	ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	
КонецПроцедуры
