////////////////////////////////////////////////////////////////////////////////
// Подсистема "Регламентные задания".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Запускает новый сеанс, выполняющий регламентные задания.
//  Только для тонкого и обычного клиентов (Web не поддерживается).
//
// Возвращаемое значение:
//  Структура
//    Отказ             - Булево.
//    ОписаниеОшибки    - Строка.
// 
Функция ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий() Экспорт
                                                          
	Параметры = РегламентныеЗаданияСервер.ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Ложь);
	
	Если НЕ Параметры.Отказ И Параметры.ТребуетсяОткрытьОтдельныйСеанс Тогда
		ПопыткаЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий(Параметры);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает расписание регламентного задания по идентификатору.
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания
// 
// Возвращаемое значение:
//  РасписаниеРегламентногоЗадания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(Знач Идентификатор) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(РегламентныеЗаданияСервер.ПолучитьРасписаниеРегламентногоЗаданияВСтруктуре(Идентификатор));
	
КонецФункции

// Устанавливает расписание регламентного задания по идентификатору.
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания.
//  Расписание    - РасписаниеРегламентногоЗадания.
//
Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Идентификатор, Знач Расписание) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗаданияИзСтруктуры(Идентификатор, ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Расписание));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обработчик события ПриНачалеРаботыСистемы вызывается
// для выполнения действий, требуемых для подсистемы РегламентныеЗадания.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
		ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Найти(ПараметрЗапуска, "DoScheduledJobs") <> 0 Тогда
		Предупреждать  = (Найти(ПараметрЗапуска, "SkipMessageBox") =  0);
		ОтдельныйСеанс = (Найти(ПараметрЗапуска, "AloneIBSession") <> 0);
		#Если ВебКлиент Тогда
			ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
			ЗавершитьРаботуСистемы(Ложь);
		#КонецЕсли
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			ЗаданияВыполняютсяНормально = Неопределено;
			ОписаниеОшибки = "";
			Если РегламентныеЗаданияСервер.ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально, Истина, ОписаниеОшибки) Тогда
				УстановитьЗаголовокПриложения(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выполнение регламентных заданий: %1'"),
				                                                                                      ПолучитьЗаголовокПриложения() ));
				Если ОтдельныйСеанс Тогда
					// Выполнять в отдельном сеансе.
					ОсновноеОкно = ОсновноеОкно();
	
					ИзПрограммы = (Найти(ПараметрЗапуска, "From1C") <> 0); 
					ПараметрыВФорму = Новый Структура("ЗаголовокНадписи", 
						?(ИзПрограммы, НСтр("ru = 'Сеанс закроется автоматически при закрытии основного сеанса.'"), ""));
					
					Если ОсновноеОкно = Неопределено Тогда
						ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РабочийСтолОтдельногоСеансаВыполненияРегламентныхЗаданий",ПараметрыВФорму );
					Иначе
						ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РабочийСтолОтдельногоСеансаВыполненияРегламентныхЗаданий",ПараметрыВФорму,,, ОсновноеОкно);
					КонецЕсли;
 
					Если ОткрытьФормуМодально("Обработка.РегламентныеИФоновыеЗадания.Форма.ВыполнениеРегламентныхЗаданий") = "Перезапустить" Тогда
						ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
						ЗавершитьРаботуСистемы(Ложь, Истина, " /C""" + ПараметрЗапуска + """");
					КонецЕсли;
					ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
					ЗавершитьРаботуСистемы(Ложь);
				Иначе
					// Выполнять в этом сеансе.
					ПодключитьОбработчикОжидания("ВыполнениеРегламентныхЗаданийВОсновномСеансе", 1, Истина);
				КонецЕсли;
			Иначе
				Если Предупреждать Тогда
					
					Если ЗаданияВыполняютсяНормально Тогда
						ТекстСообщения = НСтр("ru = 'Сеанс, обрабатывающий регламентные задания, уже открыт.'");
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Сеанс, выполняющий регламентные задания, уже открыт.
								| 
								|%1'"), ОписаниеОшибки);
						Предупреждение(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				Если ОтдельныйСеанс Тогда
					ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
					ЗавершитьРаботуСистемы(Ложь);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Предупреждать Тогда
				Предупреждение(НСтр("ru = 'Регламентные задания выполняются на сервере.'"));
			КонецЕсли;
			Если ОтдельныйСеанс Тогда
				ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		
		ПараметрыТолькоЧтение = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий;
		
		Если ПараметрыТолькоЧтение.Отказ Тогда
			ПриОшибкеВыполненияРегламентныхЗаданий(ПараметрыТолькоЧтение.ОписаниеОшибки);
		ИначеЕсли ПараметрыТолькоЧтение.ТребуетсяОткрытьОтдельныйСеанс Тогда
			ПодключитьОбработчикОжидания("ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданийЧерезОбработчикОжидания", 1, Истина);
		КонецЕсли;
		
		Если ПараметрыТолькоЧтение.УведомлятьОНекорректномВыполнении Тогда
			ПодключитьОбработчикОжидания("УведомлятьОНекорректномВыполненииРегламентныхЗаданий", ПараметрыТолькоЧтение.ПериодУведомления * 60, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет попытку открытия нового сеанса, обрабатывающего регламентные задания.
//
// Параметры:
//  Параметры    - Структура, используемые свойства:
//                   ДополнительныеПараметрыКоманднойСтроки - Строка.
//                   Отказ                                  - Булево, выходной параметр.
//                   ОписаниеОшибки                         - Строка, выходной параметр.
// 
Процедура ПопыткаЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданий(Знач Параметры) Экспорт
	
	#Если НЕ ВебКлиент Тогда
		Попытка
			Параметры.ВыполненаПопыткаОткрытия = Истина;
			ЗапуститьСистему(
				?(Найти(ВРег(ПараметрЗапуска), "/DEBUG") = 0, "", "/DEBUG ")
				+ Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Исключение
			Параметры.ОписаниеОшибки = ОписаниеОшибки();
			Параметры.Отказ = Истина;
		КонецПопытки;
	#Иначе
		Параметры.Отказ = Истина;
		Параметры.ОписаниеОшибки = НСтр("ru = 'Выполнение регламентных заданий в отдельном сеансе веб-клиента невозможна.
			|
			|Для выполнения регламентных заданий, необходимо, чтобы администратор настроил запуск обычного
			|или тонкого клиента на веб-сервере.'");
	#КонецЕсли
	Параметры.ОписаниеОшибки =
		?(ПустаяСтрока(Параметры.ОписаниеОшибки),
		  "",
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка открытия сеанса для выполнения регламентных заданий:
				           |
				           |%1'"),
				Параметры.ОписаниеОшибки));
	
КонецПроцедуры

// Оповещает пользователя об ошибке выполнения регламентных заданий.
//
// Вызывается из процедуры РегламентныеЗаданияГлобальный.УведомлятьОНекорректномВыполненииРегламентныхЗаданий() и
// РегламентныеЗаданияКлиент.ПриНачалеРаботыСистемы().
//
//  Вызов происходит, если обнаружено, что нет сеанса выполнения или
// сеанс есть, но "висит" (долго "не работает").
//
// Параметры:
//  ОписаниеОшибки - Строка.
//
Процедура ПриОшибкеВыполненияРегламентныхЗаданий(ОписаниеОшибки) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий.ТекущийПользовательАдминистратор Тогда
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Регламентные задания не выполняются.'"),
				"e1cib/app/Обработка.РегламентныеИФоновыеЗадания",
				ОписаниеОшибки,
				БиблиотекаКартинок.ОшибкаВыполненияРегламентныхЗаданий);
	Иначе
		ПоказатьОповещениеПользователя(
				НСтр("ru = 'Регламентные задания не выполняются.'"),
				,
				ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Обратитесь к администратору.'"),
				БиблиотекаКартинок.ОшибкаВыполненияРегламентныхЗаданий);
	КонецЕсли;
	
КонецПроцедуры

// Подключает глобальный обработчик ожидания в форме.
Процедура ПодключитьГлобальныйОбработчикОжидания(ИмяПроцедуры, Интервал, Однократно = Ложь) Экспорт
	
	ПодключитьОбработчикОжидания(ИмяПроцедуры, Интервал, Однократно);
	
КонецПроцедуры

// Отключает глобальный обработчик ожидания в форме.
Процедура ОтключитьГлобальныйОбработчикОжидания(ИмяПроцедуры) Экспорт
	
	ОтключитьОбработчикОжидания(ИмяПроцедуры);
	
КонецПроцедуры

Функция ОсновноеОкно() Экспорт
	
	ОсновноеОкно = Неопределено;
	
	Окна = ПолучитьОкна();
	Если Окна <> Неопределено Тогда
		Для каждого Окно Из Окна Цикл
			Если Окно.Основное Тогда
				ОсновноеОкно = Окно;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОсновноеОкно;
	
КонецФункции
