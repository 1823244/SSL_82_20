////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Отказ от инициализации, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
	
	// Проверка разрешения на открытие формы.
	ОписаниеОшибки = "";
	Если НЕ УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр) Тогда
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей() И ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"),        "Пользователи");
	СписокТиповПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"), "ВнешниеПользователи");

	
	// Определение режима редактирования прав.
	НастройкаПоЗначениюДоступа     = (ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.ГруппыПользователей")) И
	                                 (ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.Пользователи")) И
	                                 (ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.ГруппыВнешнихПользователей")) И
	                                 (ТипЗнч(СсылкаНаОбъект) <> Тип("СправочникСсылка.ВнешниеПользователи"));
	НастройкаПоГруппеПользователей = (ТипЗнч(СсылкаНаОбъект) =  Тип("СправочникСсылка.ГруппыПользователей")) ИЛИ
	                                 (ТипЗнч(СсылкаНаОбъект) =  Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
	ВнешнийПользовательИлиГруппа   = (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей")) ИЛИ
	                                 (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи"));
	
	// Установка заголовка формы.
	Заголовок = УправлениеДоступом.ЗаголовокПодчиненнойФормы(НСтр("ru = 'Права доступа: %1 (%2)'"), СсылкаНаОбъект);
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	Если НастройкаПоЗначениюДоступа Тогда
		НазваниеЗначенийДоступа = УправлениеДоступом.НазваниеОбъектаИзМетаданных(МетаданныеОбъекта);
		Элементы.ВидДоступа.Видимость = Ложь;
		ТаблицаЗначенийДоступа = МетаданныеОбъекта.ПолноеИмя();
		ВидыДоступа = УправлениеДоступом.ВидыДоступаТаблицы(ТаблицаЗначенийДоступа);
		Если ВидыДоступа.Количество() <> 1 ИЛИ НЕ УправлениеДоступом.СвойстваВидаДоступа(ВидыДоступа[0]).ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
			ВызватьИсключение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для значений доступа ""%1"" не найдено вида доступа через права по значениям доступа.'"),
					Метаданные.НайтиПоПолномуИмени(ТаблицаЗначенийДоступа).Синоним));
		КонецЕсли;
		ВидДоступа = ВидыДоступа[0];
	Иначе
		Элементы.НаследоватьПраваРодителей.Видимость = Ложь;
		// Подготовка списка возможных видов доступа и установка начального вида доступа.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДоступа.Ссылка,
		|	ВидыДоступа.Наименование КАК Наименование
		|ИЗ
		|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
		ВидыДоступа = Запрос.Выполнить().Выбрать();
		Пока ВидыДоступа.Следующий() Цикл
			Если УправлениеДоступом.СвойстваВидаДоступа(ВидыДоступа.Ссылка).ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
				Элементы.ВидДоступа.СписокВыбора.Добавить(ВидыДоступа.Ссылка, ВидыДоступа.Наименование);
			КонецЕсли;
		КонецЦикла;
		Если Элементы.ВидДоступа.СписокВыбора.Количество() = 0 Тогда
			ВызватьИсключение(НСтр("ru = 'Не найдено видов доступа через права по значениям доступа.'"));
		КонецЕсли;
		ВидДоступа = Элементы.ВидДоступа.СписокВыбора[0].Значение;
		ТаблицаЗначенийДоступа  = УправлениеДоступом.СвойстваВидаДоступа(ВидДоступа).Таблицы[0];
		НазваниеЗначенийДоступа = УправлениеДоступом.НазваниеОбъектаИзМетаданных(Метаданные.НайтиПоПолномуИмени(ТаблицаЗначенийДоступа));
		Элементы.ВидДоступа.Видимость = Элементы.ВидДоступа.СписокВыбора.Количество() > 1;
	КонецЕсли;
	
	ЗаполнитьПрава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	// Проверка незаполненных прав
	ИмяПервогоПрава = "";
	Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
		ИмяПервогоПрава = ВозможноеПраво.Ключ;
		Прервать;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ГруппыПрав Цикл
		НомерСтроки = ГруппыПрав.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения флажков прав.
		НетЗаполненногоПрава = Истина;
		Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
			Если ТекущаяСтрока[ВозможноеПраво.Ключ] Тогда
				НетЗаполненногоПрава = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НетЗаполненногоПрава Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ГруппыПрав[%1]." + ИмяПервогоПрава,
				НСтр("ru = 'Необходимо заполнить не менее одного права доступа.'"),
				"ГруппыПрав",
				НомерСтроки,
				НСтр("ru = 'В строке %1 необходимо заполнить не менее одного права доступа.'"));
		КонецЕсли;
		
		// Проверка незаполненных и повторяющихся пользователей.
		Если НастройкаПоЗначениюДоступа Тогда
			
			// Проверка заполнения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["Пользователь"]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"ГруппыПрав[%1].Пользователь",
					НСтр("ru = 'Пользователь не выбран.'"),
					"ГруппыПрав",
					НомерСтроки,
					НСтр("ru = 'Пользователь в строке %1 не выбран.'"));
				Продолжить;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			Отбор = Новый Структура(
				"НаследуетсяОт,
				|Пользователь",
				ТекущаяСтрока["НаследуетсяОт"],
				ТекущаяСтрока["Пользователь"]);
			
			Если ГруппыПрав.НайтиСтроки(Отбор).Количество() > 1 Тогда
				
				Если ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
					ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь повторяется.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь в строке %1 повторяется.'");
					
				ИначеЕсли ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
					ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь повторяется.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь в строке %1 повторяется.'");
					
				ИначеЕсли ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
					ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей повторяется.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей в строке %1 повторяется.'");
				Иначе
					ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей повторяется.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей в строке %1 повторяется.'");
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"ГруппыПрав[%1].Пользователь",
					ТекстДляОднойОшибки,
					"ГруппыПрав",
					НомерСтроки,
					ТекстДляНесколькихОшибок);
			КонецЕсли;
			
		ИначеЕсли НастройкаПоГруппеПользователей Тогда
			
			// Проверка заполнения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["ЗначениеДоступа"]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"ГруппыПрав[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение не выбрано.'"),
					"ГруппыПрав",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 не выбрано.'"));
				Продолжить;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			Отбор = Новый Структура("ЗначениеДоступа", ТекущаяСтрока["ЗначениеДоступа"]);
			Если ГруппыПрав.НайтиСтроки(Отбор).Количество() > 1 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.Состав[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение повторяется.'"),
					"Объект.Состав",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 повторяется.'"));
			КонецЕсли;
		Иначе
			// Проверка заполнения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["ЗначениеДоступа"]) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"ГруппыПрав[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение не выбрано.'"),
					"ГруппыПрав",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 не выбрано.'"));
				Продолжить;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			Отбор = Новый Структура(
				"ГруппаПользователей,
				|ЗначениеДоступа",
				ТекущаяСтрока["ГруппаПользователей"],
				ТекущаяСтрока["ЗначениеДоступа"]);
			
			Если ГруппыПрав.НайтиСтроки(Отбор).Количество() > 1 Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.Состав[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение повторяется.'"),
					"Объект.Состав",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 повторяется.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидДоступаПриИзменении(Элемент)
	
	ВидДоступаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидДоступаПриИзмененииНаСервере()
	
	НоваяТаблицаЗначенийДоступа = УправлениеДоступом.СвойстваВидаДоступа(ВидДоступа).Таблицы[0];
	
	Если ТаблицаЗначенийДоступа <> НоваяТаблицаЗначенийДоступа Тогда
	
		ТаблицаЗначенийДоступа  = НоваяТаблицаЗначенийДоступа;
		НазваниеЗначенийДоступа = УправлениеДоступом.НазваниеОбъектаИзМетаданных(Метаданные.НайтиПоПолномуИмени(ТаблицаЗначенийДоступа));
		
		ЗаполнитьПрава();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Предупреждение(НСтр("ru = 'Данные изменены. Запишите или отмените изменения.'"));
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаследоватьПраваРодителейПриИзменении(Элемент)
	
	НаследоватьПраваРодителейПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаследоватьПраваРодителейПриИзмененииНаСервере()
	
	Если НаследоватьПраваРодителей Тогда
		ДобавитьПраваНаследуемыеПоИерархии();
		ЗаполнитьНомераКартинокПользователей();
	Иначе
		// Очистка настроек, наследуемых от родителей по иерархии.
		Индекс = ГруппыПрав.Количество()-1;
		Пока Индекс >= 0 Цикл
			Если ТипЗнч(ГруппыПрав.Получить(Индекс).НаследуетсяОт) <> Тип("Строка") Тогда
				ГруппыПрав.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГруппыПрав

&НаКлиенте
Процедура ГруппыПравПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиИзмененияПрав(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПередУдалением(Элемент, Отказ)
	
	ПроверкаВозможностиИзмененияПрав(Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Установка начальных значений.
		Если Копирование Тогда
			Если Элементы.Найти("ГруппыПравНаследуетсяОт") <> Неопределено Тогда
				Элементы.ГруппыПрав.ТекущиеДанные.НаследуетсяОт = ДобавленныеРеквизиты.НаследуетсяОт;
			КонецЕсли;
			Если Элементы.Найти("ГруппыПравГруппаПользователей") <> Неопределено Тогда
				Элементы.ГруппыПрав.ТекущиеДанные.ГруппаПользователей = ДобавленныеРеквизиты.ГруппаПользователей;
			КонецЕсли;
		Иначе
			Элементы.ГруппыПрав.ТекущиеДанные.РаспространяетсяВИерархии = Истина;
			
			Для каждого ДобавленныйРеквизит Из ДобавленныеРеквизиты Цикл
				Элементы.ГруппыПрав.ТекущиеДанные[ДобавленныйРеквизит.Ключ] = ДобавленныйРеквизит.Значение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыПравПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ГруппыПрав.ТекущиеДанные.Пользователь) Тогда
		ЗаполнитьНомераКартинокПользователей(Элементы.ГруппыПрав.ТекущаяСтрока);
	Иначе
		Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = ДобавленныеРеквизиты.НомерКартинки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппыПрав.ТекущиеДанные.Пользователь  = ДобавленныеРеквизиты.Пользователь;
	Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = ДобавленныеРеквизиты.НомерКартинки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Пользователи.СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравЗапрещеноПриИзменении(Элемент)
	
	// При изменении вида настроки необходимо сбросить флажки прав.
	Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
		Элементы.ГруппыПрав.ТекущиеДанные[ВозможноеПраво.Ключ] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПравоПриИзменении(Элемент)
	
	// Обновить зависимости прав.
	ЗависимыеПрава = Неопределено;
	ТекущееПраво = Сред(Элемент.Имя, СтрДлина("ГруппыПрав")+1);
	Если Элементы.ГруппыПрав.ТекущиеДанные[ТекущееПраво] Тогда
		Если Элементы.ГруппыПрав.ТекущиеДанные.Запрещено Тогда
			// Увеличены запрещения.
			ОбратныеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Истина;
		Иначе
			// Увеличены разрешения.
			ПрямыеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Истина;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппыПрав.ТекущиеДанные.Запрещено Тогда
			// Уменьшены запрещения.
			ПрямыеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Ложь;
		Иначе
			// Уменьшены разрешения.
			ОбратныеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗависимыеПрава <> Неопределено Тогда
		Для каждого ЗависимоеПраво Из ЗависимыеПрава Цикл
			Элементы.ГруппыПрав.ТекущиеДанные[ЗависимоеПраво] = ЗначениеЗависимогоПрава;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	ЗаписатьПрава(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Отказ = Ложь;
	РазрешеноУправлениеПравамиПослеЗаписи = Ложь;
	ОписаниеПредупреждения = "";
	ОчиститьСообщения();
	ЗаписатьПрава(Отказ, РазрешеноУправлениеПравамиПослеЗаписи, ОписаниеПредупреждения);
	
	Если НЕ Отказ И НЕ РазрешеноУправлениеПравамиПослеЗаписи Тогда
		Предупреждение(ОписаниеПредупреждения, 7, НСтр("ru = 'После успешной записи'"));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	Если НЕ Модифицированность ИЛИ Вопрос(НСтр("ru = 'Данные изменены. Прочитать без сохранения?'"), РежимДиалогаВопрос.ОКОтмена, 5, КодВозвратаДиалога.Отмена) = КодВозвратаДиалога.ОК Тогда
		ПрочитатьПрава();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка таблиц прав, проверяемых в стандартных шаблонах ограничения доступа по возможным правам.
&НаСервере
Функция ПолучитьПраваТаблицДляШаблонов(ТаблицаЗначенийДоступа, Право)
	
	ПраваТаблицДляШаблонов = Новый Соответствие;
	ОписаниеПрава = УправлениеДоступом.ВозможныеПраваПоЗначениюДоступа(ТаблицаЗначенийДоступа).Найти(Право, "Имя");
	Для каждого Таблица Из ОписаниеПрава.ЧтениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь);
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Чтение = Истина;
	КонецЦикла;
	Для каждого Таблица Из ОписаниеПрава.ДобавлениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь);
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Добавление = Истина;
	КонецЦикла;
	Для каждого Таблица Из ОписаниеПрава.ИзменениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь);
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Изменение = Истина;
	КонецЦикла;
	Для каждого Таблица Из ОписаниеПрава.УдалениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь);
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Удаление = Истина;
	КонецЦикла;
	
	Если ПраваТаблицДляШаблонов.Количество() = 0 Тогда
		ПраваТаблицДляШаблонов.Вставить("", Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь));
	КонецЕсли;
	
	Возврат ПраваТаблицДляШаблонов;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизит(НовыеРеквизиты, Реквизит, НачальноеЗначение)
	
	НовыеРеквизиты.Добавить(Реквизит);
	ДобавленныеРеквизиты.Вставить(Реквизит.Имя, НачальноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлемент(Имя, Тип, Родитель)
	
	Элемент = Элементы.Добавить(Имя, Тип, Родитель);
	Элемент.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	ДобавленныеЭлементы.Вставить(Имя);
	Возврат Элемент;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыЭлементыФормы(НовыеРеквизиты = Неопределено)
	
	ОписанияВозможныхПрав = УправлениеДоступом.ВозможныеПраваПоЗначениюДоступа(ТаблицаЗначенийДоступа);
	
	Если НастройкаПоЗначениюДоступа Тогда
		Если НовыеРеквизиты <> Неопределено Тогда
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					"Пользователь",
					Новый ОписаниеТипов(
						"СправочникСсылка.Пользователи,
						|СправочникСсылка.ГруппыПользователей,
						|СправочникСсылка.ВнешниеПользователи,
						|СправочникСсылка.ГруппыВнешнихПользователей"),
					"ГруппыПрав",
					НСтр("ru = 'Пользователь'")),
				Справочники.Пользователи.ПустаяСсылка());
			
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					"НомерКартинки",
					Новый ОписаниеТипов("Число"),
					"ГруппыПрав"),
				-1);
		Иначе
			Элемент = ДобавитьЭлемент("ГруппыПравПользователь", Тип("ПолеФормы"), Элементы.ГруппыПрав);
			Элемент.Вид            = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным    = "ГруппыПрав.Пользователь";
			Элемент.ТолькоПросмотр = НЕ НастройкаПоЗначениюДоступа;
			Элемент.УстановитьДействие("ПриИзменении",         "ГруппыПравПользовательПриИзменении");
			Элемент.УстановитьДействие("НачалоВыбора",         "ГруппыПравПользовательНачалоВыбора");
			Элемент.УстановитьДействие("Очистка",              "ГруппыПравПользовательОчистка");
			Элемент.УстановитьДействие("ОкончаниеВводаТекста", "ГруппыПравПользовательОкончаниеВводаТекста");
			Элемент.УстановитьДействие("АвтоПодбор",           "ГруппыПравПользовательАвтоПодбор");
			
			Элементы.ГруппыПрав.ПутьКДаннымКартинкиСтроки = "ГруппыПрав.НомерКартинки";
		КонецЕсли;
	Иначе
		Если НовыеРеквизиты <> Неопределено Тогда
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					"ЗначениеДоступа",
					Метаданные.НайтиПоПолномуИмени(ТаблицаЗначенийДоступа).СтандартныеРеквизиты.Ссылка.Тип,
					"ГруппыПрав",
					НазваниеЗначенийДоступа),
				Неопределено);
		Иначе
			Элемент = ДобавитьЭлемент("ГруппыПравЗначениеДоступа", Тип("ПолеФормы"), Элементы.ГруппыПрав);
			Элемент.Вид         = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = "ГруппыПрав.ЗначениеДоступа";
		КонецЕсли;
	КонецЕсли;
	
	// Добавление возможных прав, настраиваемых по владельцу (таблице значений доступа).
	Для каждого ОписаниеПрава Из ОписанияВозможныхПрав Цикл
		
		Если НовыеРеквизиты <> Неопределено Тогда
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					ОписаниеПрава.Имя,
					Новый ОписаниеТипов("Булево"),
					"ГруппыПрав",
					ОписаниеПрава.Синоним),
				ОписаниеПрава.НачальноеЗначение);
			
			ВозможныеПрава.Вставить(ОписаниеПрава.Имя);
			
			// Добавление прямых и обратных зависимостей прав.
			ПрямыеЗависимостиПрав.Вставить(ОписаниеПрава.Имя, ОписаниеПрава.ТребуемыеПрава);
			Для каждого ЗависимоеПраво Из ОписаниеПрава.ТребуемыеПрава Цикл
				Если ОбратныеЗависимостиПрав.Свойство(ЗависимоеПраво) Тогда
					ЗависимыеПрава = ОбратныеЗависимостиПрав[ЗависимоеПраво];
				Иначе
					ЗависимыеПрава = Новый Массив;
					ОбратныеЗависимостиПрав.Вставить(ЗависимоеПраво, ЗависимыеПрава);
				КонецЕсли;
				Если ЗависимыеПрава.Найти(ОписаниеПрава.Имя) = Неопределено Тогда
					ЗависимыеПрава.Добавить(ОписаниеПрава.Имя);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Элемент = ДобавитьЭлемент("ГруппыПрав" + ОписаниеПрава.Имя, Тип("ПолеФормы"), Элементы.ГруппыПрав);
			Элемент.Вид         = ВидПоляФормы.ПолеФлажка;
			Элемент.ПутьКДанным = "ГруппыПрав."+ ОписаниеПрава.Имя;
			Элемент.УстановитьДействие("ПриИзменении", "ГруппыПравПравоПриИзменении");
			Если ЗначениеЗаполнено(ОписаниеПрава.Заголовок) Тогда
				Элемент.Заголовок = ОписаниеПрава.Заголовок;
			ИначеЕсли ЗначениеЗаполнено(ОписаниеПрава.Сокращение) Тогда
				Элемент.Заголовок = ОписаниеПрава.Сокращение;
			Иначе
				Элемент.Заголовок = ОписаниеПрава.Имя;
			КонецЕсли;
			Элемент.Подсказка = ОписаниеПрава.Синоним;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкаПоЗначениюДоступа Тогда
		Если НовыеРеквизиты <> Неопределено Тогда
			ТипыНаследуетсяОт = Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.Измерения.ЗначениеДоступа.Тип.Типы();
			ТипыНаследуетсяОт.Добавить(Тип("Строка"));
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					"НаследуетсяОт",
					Новый ОписаниеТипов(ТипыНаследуетсяОт),
					"ГруппыПрав",
					НСтр("ru = 'Наследуется от'")),
				НСтр("ru = '<не наследуется>'"));
		Иначе
			Элемент = ДобавитьЭлемент("ГруппыПравНаследуетсяОт", Тип("ПолеФормы"), Элементы.ГруппыПрав);
			Элемент.Вид            = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным    = "ГруппыПрав.НаследуетсяОт";
			Элемент.ТолькоПросмотр = Истина;
			Элемент.Подсказка      = НСтр("ru = 'Наследуется от (значения доступа)'");
		КонецЕсли;
	ИначеЕсли НЕ НастройкаПоГруппеПользователей Тогда
		Если НовыеРеквизиты <> Неопределено Тогда
			ДобавитьРеквизит(
				НовыеРеквизиты,
				Новый РеквизитФормы(
					"ГруппаПользователей",
					Новый ОписаниеТипов(
						"СправочникСсылка.ГруппыПользователей,
						|СправочникСсылка.ГруппыВнешнихПользователей,
						|Строка"),
					"ГруппыПрав",
					НСтр("ru = 'От группы'")),
				Неопределено);
		Иначе
			Элемент = ДобавитьЭлемент("ГруппыПравГруппаПользователей", Тип("ПолеФормы"), Элементы.ГруппыПрав);
			Элемент.Вид            = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным    = "ГруппыПрав.ГруппаПользователей";
			Элемент.ТолькоПросмотр = НЕ НастройкаПоЗначениюДоступа;
			Элемент.Подсказка      = НСтр("ru = 'Настройка прав от группы пользователей'");
		КонецЕсли;
	КонецЕсли;

	Если НовыеРеквизиты = Неопределено Тогда
		Элемент = ДобавитьЭлемент("ГруппыПравЗапрещено", Тип("ПолеФормы"), Элементы.ГруппыПрав);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ГруппыПрав.Запрещено";
		Элемент.Заголовок   = НСтр("ru = 'Тип прав'");
		Элемент.Формат      = НСтр("ru = 'БЛ=Разрешить; БИ=Запретить'");
		Элемент.Подсказка   = НСтр("ru = 'Запретить/Разрешить'");
		Элемент.УстановитьДействие("ПриИзменении", "ГруппыПравЗапрещеноПриИзменении");
		Элемент.ФорматРедактирования = Элемент.Формат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрава()
	
	ПрямыеЗависимостиПрав   = Новый Структура;
	ОбратныеЗависимостиПрав = Новый Структура;
	ВозможныеПрава          = Новый Структура;
	
	Если ДобавленныеЭлементы = Неопределено Тогда
		ДобавленныеЭлементы = Новый Структура;
	Иначе
		// Удаление ранее добавленных элементов.
		Для каждого ОписаниеЭлемента Из ДобавленныеЭлементы Цикл
			Элементы.Удалить(Элементы[ОписаниеЭлемента.Ключ]);
		КонецЦикла;
		ДобавленныеЭлементы.Очистить();
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Если ДобавленныеРеквизиты = Неопределено Тогда
		ДобавленныеРеквизиты = Новый Структура;
	Иначе
		// Подготовка массива удаляемых реквизитов.
		Для каждого ОписаниеРеквизита Из ДобавленныеРеквизиты Цикл
			УдаляемыеРеквизиты.Добавить("ГруппыПрав." + ОписаниеРеквизита.Ключ);
		КонецЦикла;
		ДобавленныеРеквизиты.Очистить();
	КонецЕсли;

	// Подготовка новых реквизитов формы.
	НовыеРеквизиты = Новый Массив;
	ДобавитьРеквизитыЭлементыФормы(НовыеРеквизиты);
	
	// Обновление реквизитов формы.
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавление новых элементов формы.
	ДобавитьРеквизитыЭлементыФормы();
	
	ПрочитатьПрава();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПрава()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыПрав.Очистить();
	Запрос = Новый Запрос;
	
	Если НастройкаПоЗначениюДоступа Тогда
	
		// Чтение прав по значению доступа (флажок НаследоватьПраваРодителей).
		Запрос.УстановитьПараметр("ВидДоступа",      ВидДоступа);
		Запрос.УстановитьПараметр("ЗначениеДоступа", Параметры.СсылкаНаОбъект);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИерархияЗначений.НаследоватьПраваРодителей
		|ИЗ
		|	РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|ГДЕ
		|	ИерархияЗначений.ГруппаДоступа = &ЗначениеДоступа
		|	И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа";
		Выборка = Запрос.Выполнить().Выбрать();
		НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Ложь);
		
		// Чтение прав по значению доступа (без прав, наследуемых по иерархии).
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоЗначениямДоступа.Пользователь,
		|	ПраваПоЗначениямДоступа.Право,
		|	ПраваПоЗначениямДоступа.Запрещено,
		|	ПраваПоЗначениямДоступа.РаспространяетсяВИерархии
		|ИЗ
		|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
		|ГДЕ
		|	ПраваПоЗначениямДоступа.ЗначениеДоступа = &ЗначениеДоступа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПоЗначениямДоступа.Пользователь";
		Выборка = Запрос.Выполнить().Выбрать();
		ТекущийПользователь       = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущийПользователь <> Выборка.Пользователь Тогда
				ТекущийПользователь      = Выборка.Пользователь;
				ГруппаПрав = ГруппыПрав.Добавить();
				ГруппаПрав.НаследуетсяОт             = НСтр("ru = '<не наследуется>'");
				ГруппаПрав.Пользователь              = Выборка.Пользователь;
				ГруппаПрав.Запрещено                 = Выборка.Запрещено;
				ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
			КонецЕсли;
			Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
				ГруппаПрав[Выборка.Право] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НаследоватьПраваРодителей Тогда
			ДобавитьПраваНаследуемыеПоИерархии();
		КонецЕсли;
		
	ИначеЕсли НастройкаПоГруппеПользователей Тогда
		// Чтение прав по группе пользователей (без прав, наследуемых по иерархии).
		Запрос.УстановитьПараметр("ГруппаПользователей", Параметры.СсылкаНаОбъект);
		Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоЗначениямДоступа.ЗначениеДоступа,
		|	ПраваПоЗначениямДоступа.Право,
		|	ПраваПоЗначениямДоступа.Запрещено,
		|	ПраваПоЗначениямДоступа.РаспространяетсяВИерархии
		|ИЗ
		|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
		|ГДЕ
		|	ПраваПоЗначениямДоступа.Пользователь = &ГруппаПользователей
		|	И ТИПЗНАЧЕНИЯ(ПраваПоЗначениямДоступа.ЗначениеДоступа) = &ТаблицаЗначенийДоступа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПоЗначениямДоступа.ЗначениеДоступа", "&ТаблицаЗначенийДоступа", "Тип(" + ТаблицаЗначенийДоступа + ")");
		Выборка = Запрос.Выполнить().Выбрать();
		ТекущееЗначениеДоступа = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущееЗначениеДоступа <> Выборка.ЗначениеДоступа Тогда
				ТекущееЗначениеДоступа = Выборка.ЗначениеДоступа;
				ГруппаПрав = ГруппыПрав.Добавить();
				ГруппаПрав.ЗначениеДоступа           = Выборка.ЗначениеДоступа;
				ГруппаПрав.Запрещено                 = Выборка.Запрещено;
				ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
			КонецЕсли;
			Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
				ГруппаПрав[Выборка.Право] = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Чтение прав по пользователю (без прав, наследуемых по иерархии).
		Запрос.УстановитьПараметр("Пользователь", Параметры.СсылкаНаОбъект);
		Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоЗначениямДоступа.ЗначениеДоступа,
		|	ПраваПоЗначениямДоступа.Пользователь,
		|	ПраваПоЗначениямДоступа.Право,
		|	ПраваПоЗначениямДоступа.Запрещено,
		|	ПраваПоЗначениямДоступа.РаспространяетсяВИерархии
		|ИЗ
		|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ПользователиИГруппыПользователей
		|		ПО (ТИПЗНАЧЕНИЯ(ПраваПоЗначениямДоступа.ЗначениеДоступа) = &ТаблицаЗначенийДоступа)
		|			И (ПользователиИГруппыПользователей.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка))
		|			И (ПользователиИГруппыПользователей.ЗначениеДоступа = &Пользователь)
		|			И (ПользователиИГруппыПользователей.ТолькоВидДоступа = ЛОЖЬ)
		|			И (ПользователиИГруппыПользователей.ГруппаДоступа = ПраваПоЗначениямДоступа.Пользователь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПраваПоЗначениямДоступа.ЗначениеДоступа,
		|	ПраваПоЗначениямДоступа.Пользователь", "&ТаблицаЗначенийДоступа", "Тип(" + ТаблицаЗначенийДоступа + ")");
		Выборка = Запрос.Выполнить().Выбрать();
		ТекущееЗначениеДоступа = Неопределено;
		ТекущийПользователь    = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если ТекущееЗначениеДоступа <> Выборка.ЗначениеДоступа ИЛИ ТекущийПользователь <> Выборка.Пользователь Тогда
				ТекущееЗначениеДоступа = Выборка.ЗначениеДоступа;
				ТекущийПользователь    = Выборка.Пользователь;
				ГруппаПрав = ГруппыПрав.Добавить();
				ГруппаПрав.ГруппаПользователей       = ?(ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") ИЛИ ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей"), Выборка.Пользователь, Неопределено);
				ГруппаПрав.ЗначениеДоступа           = Выборка.ЗначениеДоступа;
				ГруппаПрав.Запрещено                 = Выборка.Запрещено;
				ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
			КонецЕсли;
			Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
				ГруппаПрав[Выборка.Право] = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьНомераКартинокПользователей();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПраваНаследуемыеПоИерархии()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеДоступа", Параметры.СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ВладелецПрава,
	|	ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|	ПраваПоЗначениямДоступа.Право,
	|	МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|	МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|ИЗ
	|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
	|		ПО ПраваПоЗначениямДоступа.ЗначениеДоступа = ИерархияЗначений.ГруппаДоступа
	|			И (ПраваПоЗначениямДоступа.ЗначениеДоступа <> &ЗначениеДоступа)
	|			И (ПраваПоЗначениямДоступа.РаспространяетсяВИерархии)
	|			И (ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|	ПраваПоЗначениямДоступа.Пользователь,
	|	ПраваПоЗначениямДоступа.Право
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецПрава,
	|	Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийВладелецПрава = Неопределено;
	ТекущийПользователь  = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущийВладелецПрава <> Выборка.ВладелецПрава ИЛИ ТекущийПользователь <> Выборка.Пользователь Тогда
			ТекущийВладелецПрава = Выборка.ВладелецПрава;
			ТекущийПользователь  = Выборка.Пользователь;
			ГруппаПрав = ГруппыПрав.Добавить();
			ГруппаПрав.НаследуетсяОт             = Выборка.ВладелецПрава;
			ГруппаПрав.Пользователь              = Выборка.Пользователь;
			ГруппаПрав.Запрещено                 = Выборка.Запрещено;
			ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
		КонецЕсли;
		Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
			ГруппаПрав[Выборка.Право] = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрава(Отказ = Ложь, РазрешеноУправлениеПравамиПослеЗаписи = Ложь, ОписаниеПредупреждения = "")
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Если НЕ УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(Параметры.СсылкаНаОбъект, ОписаниеОшибки) Тогда
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Запись флажка "Наследовать права родителей".
		Если НастройкаПоЗначениюДоступа Тогда
			
			НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
			НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Параметры.СсылкаНаОбъект);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				Запись = НаборЗаписей.Добавить();
				Запись.ВидДоступа      = ВидДоступа;
				Запись.ГруппаДоступа   = Параметры.СсылкаНаОбъект;
				Запись.ЗначениеДоступа = Параметры.СсылкаНаОбъект;
			КонецЕсли;
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.ТолькоВидДоступа          = Ложь;
				Запись.СвязьСРодителем           = Запись.ГруппаДоступа <> Запись.ЗначениеДоступа;
				Запись.НаследоватьПраваРодителей = ?(Запись.СвязьСРодителем, Ложь, НаследоватьПраваРодителей);
				Запись.ИспользоватьПраваСсылки   = ?(Запись.СвязьСРодителем, НаследоватьПраваРодителей, Истина);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		// Подготовка новых прав в формате регистра, исключая права, наследуемые от родителей по иерархии.
		НаборЗаписей = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьНаборЗаписей();
		
		Если НастройкаПоЗначениюДоступа Тогда
			
			Для каждого ГруппаПрав ИЗ ГруппыПрав Цикл
				Если ТипЗнч(ГруппаПрав.НаследуетсяОт) = Тип("Строка") Тогда
					Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
						Если ГруппаПрав[ВозможноеПраво.Ключ] Тогда
							Для каждого ОписаниеТаблицы Из ПолучитьПраваТаблицДляШаблонов(ТаблицаЗначенийДоступа, ВозможноеПраво.Ключ) Цикл
								Право = НаборЗаписей.Добавить();
								Право.ЗначениеДоступа = Параметры.СсылкаНаОбъект;
								Право.Пользователь    = ГруппаПрав.Пользователь;
								Право.Право           = ВозможноеПраво.Ключ;
								Право.Запрещено       = ГруппаПрав.Запрещено;
								Право.РаспространяетсяВИерархии = ГруппаПрав.РаспространяетсяВИерархии;
								// Заполнение данных для стандартных шаблонов ограничения доступа.
								Право.Таблица                   = ОписаниеТаблицы.Ключ;
								Если Право.Запрещено Тогда
									Право.ЧтениеЗапрещено     = ОписаниеТаблицы.Значение.Чтение;
									Право.ДобавлениеЗапрещено = ОписаниеТаблицы.Значение.Добавление;
									Право.ИзменениеЗапрещено  = ОписаниеТаблицы.Значение.Изменение;
									Право.УдалениеЗапрещено   = ОписаниеТаблицы.Значение.Удаление;
								Иначе
									Право.Чтение              = ОписаниеТаблицы.Значение.Чтение;
									Право.Добавление          = ОписаниеТаблицы.Значение.Добавление;
									Право.Изменение           = ОписаниеТаблицы.Значение.Изменение;
									Право.Удаление            = ОписаниеТаблицы.Значение.Удаление;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Параметры.СсылкаНаОбъект);
			НаборЗаписей.Записать();
			
		Иначе
			ТаблицаЗаписей = НаборЗаписей.Выгрузить(Новый Массив);
			ЗначенияДоступа = Новый Соответствие;
			Для каждого ГруппаПрав ИЗ ГруппыПрав Цикл
				Если НастройкаПоГруппеПользователей ИЛИ НЕ ЗначениеЗаполнено(ГруппаПрав.ГруппаПользователей) Тогда
					Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
						Если ГруппаПрав[ВозможноеПраво.Ключ] Тогда
							Для каждого ОписаниеТаблицы Из ПолучитьПраваТаблицДляШаблонов(ГруппаПрав.ЗначениеДоступа.Метаданные().ПолноеИмя(), ВозможноеПраво.Ключ) Цикл
								Право = ТаблицаЗаписей.Добавить();
								Право.ЗначениеДоступа           = ГруппаПрав.ЗначениеДоступа;
								Право.Пользователь              = Параметры.СсылкаНаОбъект;
								Право.Право                     = ВозможноеПраво.Ключ;
								Право.Запрещено                 = ГруппаПрав.Запрещено;
								Право.РаспространяетсяВИерархии = ГруппаПрав.РаспространяетсяВИерархии;
								// Заполнение данных для стандартных шаблонов ограничения доступа.
								Право.Таблица                   = ОписаниеТаблицы.Ключ;
								Если Право.Запрещено Тогда
									Право.ЧтениеЗапрещено     = ОписаниеТаблицы.Значение.Чтение;
									Право.ДобавлениеЗапрещено = ОписаниеТаблицы.Значение.Добавление;
									Право.ИзменениеЗапрещено  = ОписаниеТаблицы.Значение.Изменение;
									Право.УдалениеЗапрещено   = ОписаниеТаблицы.Значение.Удаление;
								Иначе
									Право.Чтение              = ОписаниеТаблицы.Значение.Чтение;
									Право.Добавление          = ОписаниеТаблицы.Значение.Добавление;
									Право.Изменение           = ОписаниеТаблицы.Значение.Изменение;
									Право.Удаление            = ОписаниеТаблицы.Значение.Удаление;
								КонецЕсли;
								ЗначенияДоступа.Вставить(ГруппаПрав.ЗначениеДоступа);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Отбор = Новый Структура("ЗначениеДоступа");
			НаборЗаписей.Отбор.Пользователь.Установить(Параметры.СсылкаНаОбъект);
			ЗаписанныеЗначенияДоступа = Новый Массив;
			Для каждого КлючИЗначение Из ЗначенияДоступа Цикл
				Отбор.ЗначениеДоступа = КлючИЗначение.Ключ;
				НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Отбор.ЗначениеДоступа);
				НаборЗаписей.Загрузить(ТаблицаЗаписей.Скопировать(ТаблицаЗаписей.НайтиСтроки(Отбор)));
				НаборЗаписей.Записать();
				ЗаписанныеЗначенияДоступа.Добавить(Отбор.ЗначениеДоступа);
			КонецЦикла;
			
			// Удаление прав удаленных групп прав.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПраваПоЗначениямДоступа.ЗначениеДоступа
			|ИЗ
			|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
			|ГДЕ
			|	ПраваПоЗначениямДоступа.Пользователь = &Пользователь
			|	И (НЕ ПраваПоЗначениямДоступа.ЗначениеДоступа В (&ЗаписанныеЗначенияДоступа))");
			Запрос.УстановитьПараметр("Пользователь", Параметры.СсылкаНаОбъект);
			Запрос.УстановитьПараметр("ЗаписанныеЗначенияДоступа", ЗаписанныеЗначенияДоступа);
			НаборЗаписей.Очистить();
			Для каждого ЗначениеДоступаБезПрав Из Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗначениеДоступа") Цикл
				НаборЗаписей.Отбор.ЗначениеДоступа.Установить(ЗначениеДоступаБезПрав);
				НаборЗаписей.Записать();
			КонецЦикла;
			
		КонецЕсли;
		РазрешеноУправлениеПравамиПослеЗаписи = УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(Параметры.СсылкаНаОбъект, ОписаниеПредупреждения);
		Модифицированность = Ложь;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при записи прав:'") + Символы.ПС + ПредставлениеОшибки, , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиИзмененияПрав(Отказ, ПроверкаУдаления = Ложь)
	
	Если НастройкаПоЗначениюДоступа И ТипЗнч(Элементы.ГруппыПрав.ТекущиеДанные["НаследуетсяОт"]) <> Тип("Строка") Тогда
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Эта наследуемая настройка редактируется только в форме
		                                                                                     |""Права доступа: %1 (%2)"" .'"),
		                                                                         Элементы.ГруппыПрав.ТекущиеДанные["НаследуетсяОт"],
		                                                                         НазваниеЗначенийДоступа);
		ТекстСообщения =
			ТекстСообщения +
			?(ПроверкаУдаления,
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				           |
				           |Для удаления всех наследуемых настроек для ""%1""
				           |можно снять флажок ""Наследовать права родителей""."),
				НаименованиеНастройки),
			  "");
	ИначеЕсли НЕ НастройкаПоЗначениюДоступа И НЕ НастройкаПоГруппеПользователей И ЗначениеЗаполнено(Элементы.ГруппыПрав.ТекущиеДанные["ГруппаПользователей"]) Тогда
		Отказ = Истина;
		ТекстСообщения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Эта настройка редактируется только в форме
				           |""Права доступа: %1 (%2)"".'"),
				Элементы.ГруппыПрав.ТекущиеДанные["ГруппаПользователей"],
				?(ВнешнийПользовательИлиГруппа,
					НСтр("ru = 'Группа внешних пользователей'"),
					НСтр("ru = 'Группа пользователей'")) );
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если ИспользоватьВнешнихПользователей Тогда
		Элемент = СписокТиповПользователей.ВыбратьЭлемент("Выбор типа данных", СписокТиповПользователей[0]);
		Если Элемент <> Неопределено Тогда
			ВыборИПодборВнешнихПользователей = Элемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПользователей()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(Элементы.ГруппыПрав.ТекущиеДанные = Неопределено, Неопределено, Элементы.ГруппыПрав.ТекущиеДанные.Пользователь));
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	     ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи") ИЛИ
	       ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли ИспользоватьВнешнихПользователей И
	          ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока) И
	          ( ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	            ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		Если НЕ ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.ГруппыПравПользователь);
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",        ПараметрыФормы, Элементы.ГруппыПравПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераКартинокПользователей(ИдентификаторСтроки = Неопределено)
	
	Если Элементы.Найти("ГруппыПравПользователь") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(ГруппыПрав, "Пользователь", "НомерКартинки", ИдентификаторСтроки);
	
КонецПроцедуры
