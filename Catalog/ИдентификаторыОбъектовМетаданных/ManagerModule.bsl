////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура обновляет данные справочника по метаданным конфигурации.
//  При работе процедуры может быть вызван обработчик события
// ОбщегоНазначенияПереопределяемый.ПриИзмененииИдентификатораОбъектаМетаданных().
//
// Параметры:
//  ЕстьИзменения - Булево, в этот параметр возвращается значение Истина,
//                  если производилась запись, иначе не изменяется.
//  ЕстьУдаленные - Булево, в этот параметр возвращается значение Истина,
//                  если хотя бы один элемент справочника был помечен на удаление,
//                  иначе не изменяется.
//
Процедура ОбновитьДанныеСправочника(ЕстьИзменения = Истина, ЕстьУдаленные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных();
	СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных(СвойстваКоллекцийОбъектовМетаданных);
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ИдентификаторыОбъектовМетаданных");
	
	СвойстваОбъектовМетаданных.Индексы.Добавить("ПолноеИмя");
	
	// Обработана - состояние, когда идентификатор соотвествует объекту метаданных и
	// был проверен и обновлен, если его свойства изменились
	СвойстваОбъектовМетаданных.Колонки.Добавить("Обработана",        Новый ОписаниеТипов("Булево"));
	
	// Изменение - состояние, когда Обработана = Истина и свойства идентификатора были изменены
	СвойстваОбъектовМетаданных.Колонки.Добавить("Изменение",         Новый ОписаниеТипов("Булево"));
	
	// ИзменениеСЗаменой - состояние, когда Изменение = Истина, причем был найден хотя бы один
	// идентификатор с тем же ключом, и выполнялась процедура замены ссылки в информационной базе
	// на новый идентификатор
	СвойстваОбъектовМетаданных.Колонки.Добавить("ИзменениеСЗаменой", Новый ОписаниеТипов("Булево"));
	
	// ПараметрОбработчикаСобытияИзменение - структура свойств, заполняемая
	// при изменении свойств идентификатора
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПараметрОбработчикаСобытияИзменение");
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Справочник.ИдентификаторыОбъектовМетаданных";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка,
		|	Идентификаторы.Родитель,
		|	Идентификаторы.ПометкаУдаления,
		|	Идентификаторы.Предопределенный КАК Предопределенный,
		|	Идентификаторы.Наименование,
		|	Идентификаторы.ПорядокКоллекции,
		|	Идентификаторы.Имя,
		|	Идентификаторы.Синоним,
		|	Идентификаторы.ПолноеИмя,
		|	Идентификаторы.ПолныйСиноним,
		|	Идентификаторы.БезДанных,
		|	Идентификаторы.ЗначениеПустойСсылки,
		|	Идентификаторы.КлючОбъектаМетаданных,
		|	Идентификаторы.Используется
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
		|
		|УПОРЯДОЧИТЬ ПО
		|	Предопределенный УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			// Проверка и обновление свойств идентификаторов коллекций
			СвойстваКоллекции = СвойстваКоллекцийОбъектовМетаданных.Найти(Выборка.Ссылка, "ИдентификаторКоллекции");
			Если СвойстваКоллекции <> Неопределено Тогда
				ПроверитьОбновитьСвойстваКоллекции(Выборка, СвойстваКоллекции, ЕстьИзменения);
				Продолжить;
			КонецЕсли;
			// Предопределенные элементы имеют приоритет, поэтому обрабатываются в первую очередь
			КлючОбъектаМетаданных = Выборка.КлючОбъектаМетаданных.Получить();
			Если Выборка.Предопределенный Тогда
				ПолноеИмя = "";
				ОбъектМетаданных = НайтиОбъектМетаданныхПредопределенного(Выборка.Ссылка, ПолноеИмя);
				Если ОбъектМетаданных = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В справочнике Идентификаторы объектов метаданных
						           |для предопределенного элемента
						           |""%1"",
						           |не найден объект метаданных
						           |""%2"".
						           |
						           |Следует задать имя предопределенного элемента,
						           |соответствующее существующему объекту метаданных.'"),
						ПолучитьИмяПредопределенного(Выборка.Ссылка),
						ПолноеИмя);
				КонецЕсли;
				// Проверка, что предопределенный элемент относится к коллекции объектов метаданных,
				// для которых существует КлючОбъектаМетаданных
				ИмяКоллецииВЕдЧисле = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".")[0];
				ОписаниеКоллекции = СвойстваКоллекцийОбъектовМетаданных.Найти(ИмяКоллецииВЕдЧисле, "ИмяВЕдЧисле");
				Если ОписаниеКоллекции.БезКлючаОбъектаМетаданных Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В справочнике Идентификаторы объектов метаданных
						           |для предопределенного элемента
						           |""%1"",
						           |найден объект метаданных
						           |""%2"".
						           |
						           |Но предопределенные элементы не используются для
						           |объектов метаданных типа ""%3"".
						           |
						           |Следуется удалить предопределенный элемент.'"),
						ПолучитьИмяПредопределенного(Выборка.Ссылка),
						ПолноеИмя,
						ИмяКоллецииВЕдЧисле);
				КонецЕсли;
				
				Если КлючОбъектаМетаданных <> Неопределено
				   И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
					// Если ключ объекта метаданных задан, тогда нужно проверить,
					// совпадают ли элементы, найденные по полному имени и по ключу
					ОбъектМетаданныхПоКлючу = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
					Если ОбъектМетаданных <> ОбъектМетаданныхПоКлючу Тогда
						// Если для предопределеного элемента уже задан ключ объекта метаданных,
						// но не совпадает с именем, заданным в предопределенном элементе, значит
						// объект был переименован на другой существующий объект метаданных
						Если ОбъектМетаданныхПоКлючу = Неопределено Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'В справочнике Идентификаторы объектов метаданных
								           |для предопределенного элемента
								           |""%1"",
								           |задан ключ другого удаленного объекта метаданных.
								           |
								           |При переименовании предопределенного элемента допущена ошибка:
								           |элемент был переименован на существующий объект метаданных
								           |""%2"".
								           |
								           |Повторное использование предопределенного элемента
								           |для других объектов метаданных недопустимо.
								           |
								           |Следует удалить предопределенный элемент удаленного объекта
								           |метаданных и создать новый элемент для объекта метаданных
								           |""%2"".'"),
								ПолучитьИмяПредопределенного(Выборка.Ссылка),
								ПолноеИмя);
						Иначе
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'В справочнике Идентификаторы объектов метаданных
								           |для предопределенного элемента
								           |""%1"",
								           |задан ключ другого объекта метаданных
								           |""%2"".
								           |
								           |При переименовании предопределенного элемента допущена ошибка:
								           |элемент был переименован на существующий объект метаданных
								           |""%3"".
								           |
								           |Повторное использование предопределенного элемента
								           |для других объектов метаданных недопустимо.
								           |
								           |Требуется задать корректное имя
								           |""%4""
								           |предопределенного элемента
								           |""%1"",
								           |соответствующее объекту метаданных
								           |""%2"".'"),
								ПолучитьИмяПредопределенного(Выборка.Ссылка),
								ОбъектМетаданныхПоКлючу.ПолноеИмя(),
								ПолноеИмя,
								СтрЗаменить(ОбъектМетаданныхПоКлючу.ПолноеИмя(), ".", "_"));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Ключ объекта метаданных может быть незаполнен для предопределенных элементов,
			// а может быть равен Тип("Неопределено") для объектов метаданных без ключа, по которому
			// можно найти ОбъектМетаданных
			Если КлючОбъектаМетаданных = Неопределено
			 ИЛИ КлючОбъектаМетаданных = Тип("Неопределено") Тогда
				// Если объект метаданных без ключа, то его можно найти
				// через имя предопределенного или через предустановленный идентификатор
				Если Выборка.Предопределенный Тогда
					ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
				Иначе
					СвойстваОбъектаМетаданных = СвойстваОбъектовМетаданных.Найти(Выборка.Ссылка, "Идентификатор");
					Если СвойстваОбъектаМетаданных = Неопределено Тогда
						ОбъектМетаданных = Неопределено;
					Иначе
						ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(СвойстваОбъектаМетаданных.ПолноеИмя);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
			КонецЕсли;
			
			// Если объект метаданных найден по ключу или имени предопределенного,
			// тогда нужно подготовить строку свойств объекта метаданных
			Если ОбъектМетаданных <> Неопределено Тогда
				Строка = СвойстваОбъектовМетаданных.Найти(ОбъектМетаданных.ПолноеИмя(), "ПолноеИмя");
				Если ЗначениеЗаполнено(Строка.ПолноеИмяРодителя) Тогда
					// Родитель может быть предустановленным или предопределенным элементом
					СтрокаРодителя = СвойстваОбъектовМетаданных.Найти(Строка.ПолноеИмяРодителя, "ПолноеИмя");
					Если ЗначениеЗаполнено(СтрокаРодителя.Идентификатор) Тогда
						Строка.Родитель = СтрокаРодителя.Идентификатор;
					Иначе
						ИмяПредопределенногоЭлементаРодителя = СтрЗаменить(Строка.ПолноеИмяРодителя, ".", "_");
						Попытка
							Строка.Родитель = СправочникМенеджер[ИмяПредопределенногоЭлементаРодителя];
						Исключение
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'В справочнике Идентификаторы объектов метаданных
								           |для предопределенного элемента:
								           |""%1"",
								           |не найден предопределенный элемент родителя:
								           |""%2"".
								           |
								           |Следует добавить предопределенный элемент родителя.'"),
								ПолучитьИмяПредопределенного(Выборка.Ссылка),
								СтрЗаменить(Строка.ПолноеИмяРодителя, ".", "_"));
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено ИЛИ Строка.Обработана Тогда
				// Если объект метаданных не найден или найден повторно
				// тогда дубль идентификатора требуется пометить на удаление
				Если Выборка.Предопределенный = Выборка.ПометкаУдаления
				 ИЛИ ЗначениеЗаполнено(Выборка.Родитель)
				 ИЛИ Лев(Выборка.Наименование, 1)     <> "?"
				 ИЛИ Лев(Выборка.Имя, 1)              <> "?"
				 ИЛИ Лев(Выборка.Синоним, 1)          <> "?"
				 ИЛИ Лев(Выборка.ПолноеИмя, 1)        <> "?"
				 ИЛИ Лев(Выборка.ПолныйСиноним, 1)    <> "?"
				 ИЛИ Выборка.Используется
				 ИЛИ Выборка.ЗначениеПустойСсылки <> Неопределено Тогда
					// Сохранения старых свойств для обработчика события ПриИзмененииИдентификатораОбъектаМетаданных
					ТаблицаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Свойства = ПараметрыОбработчикаСобытия();
					ЗаполнитьЗначенияСвойств(Свойства.Старые, ТаблицаОбъект);
					// Установка новых свойств идентификатора объекта метаданных
					ТаблицаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Используется = ТаблицаОбъект.Используется;
					ТаблицаОбъект.ПометкаУдаления      = НЕ Выборка.Предопределенный;
					ТаблицаОбъект.Родитель             = Неопределено;
					ТаблицаОбъект.Наименование         = "? " + ТаблицаОбъект.Наименование;
					ТаблицаОбъект.Имя                  = "? " + ТаблицаОбъект.Имя;
					ТаблицаОбъект.Синоним              = "? " + ТаблицаОбъект.Синоним;
					ТаблицаОбъект.ПолноеИмя            = "? " + ТаблицаОбъект.ПолноеИмя;
					ТаблицаОбъект.ПолныйСиноним        = "? " + ТаблицаОбъект.ПолныйСиноним;
					ТаблицаОбъект.Используется         = Ложь;
					ТаблицаОбъект.ЗначениеПустойСсылки = Неопределено;
					ТаблицаОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяАвтоматическоеОбновлениеДанныхСправочника");
					ТаблицаОбъект.Записать();
					ЕстьИзменения = Истина;
					// Обработка преобразования обычного элемента в предопределенный
					// выполняется, если при существовании обычного элемента был добавлен
					// предопределенный элемент
					Если ОбъектМетаданных <> Неопределено И Используется Тогда
						// Поиск предопределенного элемента
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("ПолноеИмя", ОбъектМетаданных.ПолноеИмя());
						Запрос.Текст =
						"ВЫБРАТЬ
						|	Таблица.Ссылка,
						|	Таблица.ПолноеИмя
						|ИЗ
						|	Справочник.ИдентификаторыОбъектовМетаданных КАК Таблица
						|ГДЕ
						|	Таблица.ПолноеИмя = &ПолноеИмя
						|	И Таблица.Предопределенный";
						Выгрузка = Запрос.Выполнить().Выгрузить();
						// Если найдено более одного предопределенного элемента для одного
						// объекта метаданных, значит произошла ошибка при разработке или
						// при установке разным предопределенным элементам ключа одного и
						// того же объекта метаданных
						Если Выгрузка.Количество() > 1 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка при обновлении справочника ""Идентификаторы объектов метаданных"".
								           |По внутреннему ключу поиска для объекта метаданных ""%1""
								           |найдено более одного предопределенного элемента.'"),
								Выгрузка[0].ПолноеИмя);
						ИначеЕсли Выгрузка.Количество() = 1 Тогда
							// Если старый идентификатор использован в базе данных его требуется
							// заменить на новый идентификатор предопределенного элемента
							Строка.ИзменениеСЗаменой = Истина;
							Свойства.СтандартнаяЗаменаСсылок = Истина;
							Свойства.Новые = Строка.ПараметрОбработчикаСобытияИзменение.Новые;
							ОбщегоНазначенияПереопределяемый.ПриИзмененииИдентификатораОбъектаМетаданных("Изменение", Свойства);
							Если Свойства.СтандартнаяЗаменаСсылок = Истина Тогда
								ЗаменитьСсылкуВИнформационнойБазе(ТаблицаОбъект.Ссылка, Выгрузка[0].Ссылка);
							КонецЕсли;
						КонецЕсли;
					Иначе
						ЕстьУдаленные = Истина;
						// Вызов обработчика события ПриИзмененииИдентификатораОбъектаМетаданных
						ОбщегоНазначенияПереопределяемый.ПриИзмененииИдентификатораОбъектаМетаданных("Удаление", Свойства);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Обновление свойств существующих объектов метаданных, если изменились
				Строка.Обработана = Истина;
				Если Выборка.Родитель             <> Строка.Родитель
				 ИЛИ Выборка.Наименование         <> Строка.Наименование
				 ИЛИ Выборка.ПорядокКоллекции     <> Строка.ПорядокКоллекции
				 ИЛИ Выборка.Имя                  <> Строка.Имя
				 ИЛИ Выборка.Синоним              <> Строка.Синоним
				 ИЛИ Выборка.ПолноеИмя            <> Строка.ПолноеИмя
				 ИЛИ Выборка.ПолныйСиноним        <> Строка.ПолныйСиноним
				 ИЛИ Выборка.БезДанных            <> Строка.БезДанных
				 ИЛИ Выборка.ЗначениеПустойСсылки <> Строка.ЗначениеПустойСсылки
				 ИЛИ Выборка.ПометкаУдаления
				 ИЛИ КлючОбъектаМетаданных = Неопределено
				 ИЛИ НЕ Выборка.Используется Тогда
					// Сохранения старых свойств для обработчика события ПриИзмененииИдентификатораОбъектаМетаданных
					ТаблицаОбъект = Выборка.Ссылка.ПолучитьОбъект();
					Свойства = ПараметрыОбработчикаСобытия();
					ЗаполнитьЗначенияСвойств(Свойства.Старые, ТаблицаОбъект);
					// Установка новых свойств идентификатора объекта метаданных
					ЗаполнитьЗначенияСвойств(ТаблицаОбъект, Строка);
					Если КлючОбъектаМетаданных = Неопределено Тогда
						ТаблицаОбъект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(КлючОбъектаМетаданных(Строка.ПолноеИмя));
					КонецЕсли;
					ТаблицаОбъект.ПометкаУдаления = Ложь;
					ТаблицаОбъект.Используется    = Истина;
					ТаблицаОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяАвтоматическоеОбновлениеДанныхСправочника");
					ТаблицаОбъект.Записать();
					ЕстьИзменения = Истина;
					// Сохранения новых свойств для обработчика события ПриИзмененииИдентификатораОбъектаМетаданных
					ЗаполнитьЗначенияСвойств(Свойства.Новые, ТаблицаОбъект);
					Строка.Изменение = Истина;
					Строка.ПараметрОбработчикаСобытияИзменение = Свойства;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление идентификаторов новых объектов метаданных
		// Объекты метаданных без ключа объекта метаданных не добавляются,
		// такие объекты метаданных добавляются только вручную в виде предопределенных элементов,
		// например, подсистемы
		Для каждого Строка Из СвойстваОбъектовМетаданных.НайтиСтроки(Новый Структура("Обработана", Ложь)) Цикл
			ТаблицаОбъект = СоздатьЭлемент();
			Если ЗначениеЗаполнено(Строка.Идентификатор) Тогда
				ТаблицаОбъект.УстановитьСсылкуНового(Строка.Идентификатор);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ПолноеИмяРодителя) Тогда
				Строка.Родитель = СвойстваОбъектовМетаданных.Найти(Строка.ПолноеИмяРодителя, "ПолноеИмя").Идентификатор;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаОбъект, Строка);
			ТаблицаОбъект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(КлючОбъектаМетаданных(Строка.ПолноеИмя));
			ТаблицаОбъект.Используется          = Истина;
			ТаблицаОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяАвтоматическоеОбновлениеДанныхСправочника");
			ТаблицаОбъект.Записать();
			ЕстьИзменения = Истина;
			// Вызов обработчика события ПриИзмененииИдентификатораОбъектаМетаданных
			Свойства = ПараметрыОбработчикаСобытия();
			ЗаполнитьЗначенияСвойств(Свойства.Новые, ТаблицаОбъект);
			ОбщегоНазначенияПереопределяемый.ПриИзмененииИдентификатораОбъектаМетаданных("Добавление", Свойства);
		КонецЦикла;
		
		// Вызов обработчика события ПриИзмененииИдентификатораОбъектаМетаданных для вида события "Изменение" без замены
		Для каждого Строка Из СвойстваОбъектовМетаданных.НайтиСтроки(Новый Структура("Изменение, ИзменениеСЗаменой", Истина, Ложь)) Цикл
			ТребуетсяВызовОбработчикаСобытия = Ложь;
			Свойства = Строка.ПараметрОбработчикаСобытияИзменение;
			Для каждого КлючИЗначение ИЗ Свойства.Новые Цикл
				Если Свойства.Новые[КлючИЗначение.Ключ] <> Свойства.Старые[КлючИЗначение.Ключ] Тогда
					ТребуетсяВызовОбработчикаСобытия = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТребуетсяВызовОбработчикаСобытия Тогда
				ОбщегоНазначенияПереопределяемый.ПриИзмененииИдентификатораОбъектаМетаданных("Изменение", Свойства);
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция КлючОбъектаМетаданныхСоответствуетПолномуИмени(СвойстваИдентификатора) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НеСоответствует", Истина);
	РезультатПроверки.Вставить("КлючОбъектаМетаданных", Неопределено);
	
	КлючОбъектаМетаданных = СвойстваИдентификатора.КлючОбъектаМетаданных.Получить();
	
	Если КлючОбъектаМетаданных <> Неопределено
	   И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
		// Ключ задан, поиск объекта метаданных по ключу
		РезультатПроверки.Вставить("КлючОбъектаМетаданных", КлючОбъектаМетаданных);
		ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
		Если ОбъектМетаданных <> Неопределено Тогда
			РезультатПроверки.НеСоответствует = ОбъектМетаданных.ПолноеИмя() <> СвойстваИдентификатора.ПолноеИмя;
		КонецЕсли;
	Иначе
		// Ключ не задан, поиск объекта метаданных по полному имени
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(СвойстваИдентификатора.ПолноеИмя);
		Если ОбъектМетаданных = Неопределено Тогда
			// Возможно задана коллекция
			СвойстваКоллекций = СвойстваКоллекцийОбъектовМетаданных();
			Строка = СвойстваКоллекций.Найти(СвойстваИдентификатора.Ссылка, "ИдентификаторКоллекции");
			Если Строка <> Неопределено Тогда
				ОбъектМетаданных = Метаданные[Строка.Имя];
				РезультатПроверки.НеСоответствует = Строка.Имя <> СвойстваИдентификатора.ПолноеИмя;
			КонецЕсли;
		Иначе
			РезультатПроверки.НеСоответствует = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Только для внутреннего использования
Процедура ВыгрузитьДанныеСправочника(Знач КаталогВыгрузки) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "MetadataObjectsIdentifiers.xml");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Data");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ДополнитьСловарьЗаменСсылокИдентификаторовТекущихИЗагружаемыхДанных(Знач СловарьЗамен, Знач КаталогВыгрузки) Экспорт
	
	// Перед загрузкой в пустую базу требутся обновление справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	НЕ Идентификаторы.Предопределенный";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбновитьДанныеСправочника();
	КонецЕсли;
	
	СоответствиеСсылок = Новый Соответствие;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "MetadataObjectsIdentifiers.xml");
	Чтение.ПерейтиКСодержимому();
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Data" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Неверный формат файла MetadataObjectsIdentifiers.xml'"));
		
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка,
	|	Идентификаторы.ПолноеИмя,
	|	Идентификаторы.Используется
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
	
	СвойстваИдентификаторов = Запрос.Выполнить().Выгрузить();
	СвойстваИдентификаторов.Индексы.Добавить("Ссылка");
	СвойстваИдентификаторов.Индексы.Добавить("ПолноеИмя");
	
	Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Данные = СериализаторXDTO.ПрочитатьXML(Чтение);
		
		СвойстваИдентификатора = СвойстваИдентификаторов.Найти(Данные.Ссылка, "Ссылка");
		Если СвойстваИдентификатора = Неопределено
		 ИЛИ НЕ СвойстваИдентификатора.Используется Тогда
			
			КлючОбъектаМетаданных = Данные.КлючОбъектаМетаданных.Получить();
			Если КлючОбъектаМетаданных <> Неопределено
			   И КлючОбъектаМетаданных <> Тип("Неопределено")
			   И ТипЗнч(КлючОбъектаМетаданных) = Тип("Тип") Тогда
				
				ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
			Иначе
				ОбъектМетаданных = Неопределено;
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено Тогда
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Данные.ПолноеИмя);
			КонецЕсли;
			
			Если ОбъектМетаданных <> Неопределено Тогда
				Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				Если Данные.Ссылка <> Идентификатор Тогда
					// Ключ     - Существующая ссылка.
					// Значение - Загружаемая  ссылка.
					СоответствиеСсылок.Вставить(Идентификатор, Данные.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаФрагмента = СловарьЗамен.Добавить();
	СтрокаФрагмента.Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	СтрокаФрагмента.СоответствиеСсылок = СоответствиеСсылок;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьОбновитьСвойстваКоллекции(Знач ТекущиеСвойства, Знач НовыеСвойства, ЕстьИзменения)
	
	НаименованиеКоллекции = НовыеСвойства.Синоним + " (" + НСтр("ru = 'Коллекция'") + ")";
	
	Если ТекущиеСвойства.Наименование         <> НаименованиеКоллекции
	 ИЛИ ТекущиеСвойства.ПорядокКоллекции     <> НовыеСвойства.ПорядокКоллекции
	 ИЛИ ТекущиеСвойства.Имя                  <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.Синоним              <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.ПолноеИмя            <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.ПолныйСиноним        <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.БезДанных            <> Ложь
	 ИЛИ ТекущиеСвойства.ЗначениеПустойСсылки <> Неопределено
	 ИЛИ ТекущиеСвойства.Используется         <> Истина
	 ИЛИ ТекущиеСвойства.КлючОбъектаМетаданных.Получить() <> Неопределено Тогда
		
		// Установка новых свойств
		Объект = ТекущиеСвойства.Ссылка.ПолучитьОбъект();
		Объект.Наименование          = НаименованиеКоллекции;
		Объект.ПорядокКоллекции      = НовыеСвойства.ПорядокКоллекции;
		Объект.Имя                   = НовыеСвойства.Имя;
		Объект.Синоним               = НовыеСвойства.Синоним;
		Объект.ПолноеИмя             = НовыеСвойства.Имя;
		Объект.ПолныйСиноним         = НовыеСвойства.Синоним;
		Объект.БезДанных             = Ложь;
		Объект.ЗначениеПустойСсылки  = Неопределено;
		Объект.КлючОбъектаМетаданных = Неопределено;
		Объект.Используется          = Истина;
		Объект.ДополнительныеСвойства.Вставить("ВыполняетсяАвтоматическоеОбновлениеДанныхСправочника");
		Объект.Записать();
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОбъектМетаданныхПредопределенного(Знач Ссылка, ПолноеИмя)
	
	ИмяПредопределенного = ПолучитьИмяПредопределенного(Ссылка);
	
	Если ВРег(Лев(ИмяПредопределенного, 11)) = ВРег("Подсистема_") Тогда
		Пока Истина Цикл
			ПозицияСледующегоИмени = Найти(ВРег(ИмяПредопределенного), ВРег("_Подсистема"));
			Если ПозицияСледующегоИмени > 0 Тогда
				ПолноеИмя = ПолноеИмя + ".Подсистема." + Сред(ИмяПредопределенного, 12, ПозицияСледующегоИмени - 12);
				ИмяПредопределенного = Сред(ИмяПредопределенного, ПозицияСледующегоИмени + 1);
			Иначе
				ПолноеИмя = ПолноеИмя + ".Подсистема." + Сред(ИмяПредопределенного, 12);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПолноеИмя = Сред(ПолноеИмя, 2);
	Иначе
		ПозицияПодчеркивания = Найти(ИмяПредопределенного, "_");
		ПолноеИмя = Лев(ИмяПредопределенного, ПозицияПодчеркивания-1)
		            + "."
		            + Сред(ИмяПредопределенного, ПозицияПодчеркивания + 1);
	КонецЕсли;
	
	Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
КонецФункции

Функция КлючОбъектаМетаданных(ПолноеИмя)
	
	ПозицияТочки = Найти(ПолноеИмя, ".");
	
	КлассОМ = Лев( ПолноеИмя, ПозицияТочки-1);
	ИмяОМ   = Сред(ПолноеИмя, ПозицияТочки+1);
	
	Если      ВРег(КлассОМ) = ВРег("Роль") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.Роли.Добавить(Метаданные.Роли[ИмяОМ]);
		Возврат ПользовательИБ.Роли;
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланОбмена") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Справочник") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Документ") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ЖурналДокументов") Тогда
		Возврат ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя));
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Отчет") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Обработка") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовХарактеристик") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланСчетов") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовРасчета") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрСведений") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрНакопления") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрБухгалтерии") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрРасчета") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("БизнесПроцесс") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Задача") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
	Иначе
		// Без ключа объекта метаданных
		Возврат Тип("Неопределено");
	КонецЕсли;
	
КонецФункции 

Функция ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных)
	
	ОбъектМетаданных = Неопределено;
	
	Если ТипЗнч(КлючОбъектаМетаданных) = Тип("РолиПользователя") Тогда
		Для каждого Роль Из Метаданные.Роли Цикл
			Если КлючОбъектаМетаданных.Содержит(Роль) Тогда
				Возврат Роль;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючОбъектаМетаданных);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция СвойстваОбъектовМетаданных(СвойстваКоллекцийОбъектовМетаданных)
	
	СвойстваОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваОбъектовМетаданных.Колонки.Добавить("Наименование",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмя",                 Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмяРодителя",         Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Идентификатор",             Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Родитель",                  Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолныйСиноним",             Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ЗначениеПустойСсылки");
	
	// Подготовка предустановленных идентификаторов
	ПредустановленныеИдентификаторы = Новый ТаблицаЗначений;
	ПредустановленныеИдентификаторы.Колонки.Добавить("Идентификатор",    Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ПредустановленныеИдентификаторы.Колонки.Добавить("ПолноеИмя",        Новый ОписаниеТипов("Строка"));
	
	ОбщегоНазначенияПереопределяемый.ЗаполнитьПредустановленныеИдентификаторыОбъектовМетаданных(ПредустановленныеИдентификаторы);
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекцийОбъектовМетаданных Цикл
		ДобавитьСвойстваОбъектовМетаданных(Метаданные[СвойстваКоллекции.Имя], СвойстваКоллекции, СвойстваОбъектовМетаданных, ПредустановленныеИдентификаторы);
	КонецЦикла;
	
	Если ПредустановленныеИдентификаторы.Количество() > 0 Тогда
		ВызватьИсключениеОшибкиЗаполненияПредустановленныхИдентификаторов(ПредустановленныеИдентификаторы, СвойстваКоллекцийОбъектовМетаданных);
	КонецЕсли;
	
	Возврат СвойстваОбъектовМетаданных;
	
КонецФункции

Процедура ДобавитьСвойстваОбъектовМетаданных(Знач КолекцияОбъектовМетаданных, Знач СвойстваКоллекции, Знач СвойстваОбъектовМетаданных, Знач ПредустановленныеИдентификаторы, Знач ПолноеИмяРодителя = "", Знач ПолныйСинонимРодителя = "")
	
	Для каждого ОбъектМетаданных Из КолекцияОбъектовМетаданных Цикл
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если НЕ СвойстваКоллекции.БезДанных
		   И Найти(СвойстваКоллекции.ИмяВЕдЧисле, "Регистр") = 0 Тогда
			
			ЗначениеПустойСсылки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя).ПустаяСсылка();
		Иначе
			ЗначениеПустойСсылки = Неопределено;
		КонецЕсли;
		
		Если СвойстваКоллекции.БезКлючаОбъектаМетаданных Тогда
			ОписаниеИдентификатора = ПредустановленныеИдентификаторы.Найти(ПолноеИмя, "ПолноеИмя");
			Если ОписаниеИдентификатора = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Идентификатор = ОписаниеИдентификатора.Идентификатор;
			ПредустановленныеИдентификаторы.Удалить(ОписаниеИдентификатора);
		Иначе
			Идентификатор = ПустаяСсылка();
		КонецЕсли;
		
		НоваяСтрока = СвойстваОбъектовМетаданных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваКоллекции);
		НоваяСтрока.Идентификатор        = Идентификатор;
		НоваяСтрока.Родитель             = СвойстваКоллекции.ИдентификаторКоллекции;
		НоваяСтрока.Наименование         = ПредставлениеОбъектаМетаданных(ОбъектМетаданных, СвойстваКоллекции);
		НоваяСтрока.ПолноеИмя            = ПолноеИмя;
		НоваяСтрока.ПолноеИмяРодителя    = ПолноеИмяРодителя;
		НоваяСтрока.Имя                  = ОбъектМетаданных.Имя;
		НоваяСтрока.Синоним              = ?(ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
		НоваяСтрока.ПолныйСиноним        = ПолныйСинонимРодителя + СвойстваКоллекции.СинонимВЕдЧисле + ". " + НоваяСтрока.Синоним;
		НоваяСтрока.ЗначениеПустойСсылки = ЗначениеПустойСсылки;
		
		Если СвойстваКоллекции.Имя = "Подсистемы" Тогда
			ДобавитьСвойстваОбъектовМетаданных(ОбъектМетаданных.Подсистемы, СвойстваКоллекции, СвойстваОбъектовМетаданных, ПредустановленныеИдентификаторы, ПолноеИмя, НоваяСтрока.ПолныйСиноним + ". ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектаМетаданных(Знач ОбъектМетаданных, Знач СвойстваКоллекции);
	
	Постфикс = "(" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
	Синоним = ?(ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
	
	МаксимальнаяДлинаСинонима = 150 - СтрДлина(Постфикс);
	Если СтрДлина(Синоним) > МаксимальнаяДлинаСинонима + 1 Тогда
		Возврат Лев(Синоним, МаксимальнаяДлинаСинонима - 2) + "..." + Постфикс;
	КонецЕсли;
	
	Возврат Синоним + " (" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
КонецФункции

Функция СвойстваКоллекцийОбъектовМетаданных()
	
	СвойстваКоллекцийОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИмяВЕдЧисле",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("СинонимВЕдЧисле",           Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИдентификаторКоллекции",    Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	// Подсистемы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Подсистемы";
	Строка.Синоним         = НСтр("ru = 'Подсистемы'");
	Строка.ИмяВЕдЧисле     = "Подсистема";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Подсистема'");
	Строка.БезДанных       = Истина;
	Строка.БезКлючаОбъектаМетаданных = Истина;
	
	// Роли
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Роли";
	Строка.Синоним         = НСтр("ru = 'Роли'");
	Строка.ИмяВЕдЧисле     = "Роль";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Роль'");
	Строка.БезДанных       = Истина;
	
	// ПланыОбмена
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыОбмена";
	Строка.Синоним         = НСтр("ru = 'Планы обмена'");
	Строка.ИмяВЕдЧисле     = "ПланОбмена";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План обмена'");
	
	// Справочники
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Справочники";
	Строка.Синоним         = НСтр("ru = 'Справочники'");
	Строка.ИмяВЕдЧисле     = "Справочник";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Справочник'");
	
	// Документы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Документы";
	Строка.Синоним         = НСтр("ru = 'Документы'");
	Строка.ИмяВЕдЧисле     = "Документ";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Документ'");
	
	// ЖурналыДокументов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ЖурналыДокументов";
	Строка.Синоним         = НСтр("ru = 'Журналы документов'");
	Строка.ИмяВЕдЧисле     = "ЖурналДокументов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Журнал документов'");
	Строка.БезДанных       = Истина;
	
	// Отчеты
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Отчеты";
	Строка.Синоним         = НСтр("ru = 'Отчеты'");
	Строка.ИмяВЕдЧисле     = "Отчет";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Отчет'");
	Строка.БезДанных       = Истина;
	
	// Обработки
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Обработки";
	Строка.Синоним         = НСтр("ru = 'Обработки'");
	Строка.ИмяВЕдЧисле     = "Обработка";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Обработка'");
	Строка.БезДанных       = Истина;
	
	// ПланыВидовХарактеристик
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыВидовХарактеристик";
	Строка.Синоним         = НСтр("ru = 'Планы видов характеристик'");
	Строка.ИмяВЕдЧисле     = "ПланВидовХарактеристик";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов характеристик'");
	
	// ПланыСчетов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыСчетов";
	Строка.Синоним         = НСтр("ru = 'Планы счетов'");
	Строка.ИмяВЕдЧисле     = "ПланСчетов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План счетов'");
	
	// ПланыВидовРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыВидовРасчета";
	Строка.Синоним         = НСтр("ru = 'Планы видов расчета'");
	Строка.ИмяВЕдЧисле     = "ПланВидовРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов расчета'");
	
	// РегистрыСведений
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыСведений";
	Строка.Синоним         = НСтр("ru = 'Регистры сведений'");
	Строка.ИмяВЕдЧисле     = "РегистрСведений";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр сведений'");
	
	// РегистрыНакопления
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыНакопления";
	Строка.Синоним         = НСтр("ru = 'Регистры накопления'");
	Строка.ИмяВЕдЧисле     = "РегистрНакопления";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр накопления'");
	
	// РегистрыБухгалтерии
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыБухгалтерии";
	Строка.Синоним         = НСтр("ru = 'Регистры бухгалтерии'");
	Строка.ИмяВЕдЧисле     = "РегистрБухгалтерии";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр бухгалтерии'");
	
	// РегистрыРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыРасчета";
	Строка.Синоним         = НСтр("ru = 'Регистры расчета'");
	Строка.ИмяВЕдЧисле     = "РегистрРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр расчета'");
	
	// БизнесПроцессы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "БизнесПроцессы";
	Строка.Синоним         = НСтр("ru = 'Бизнес-процессы'");
	Строка.ИмяВЕдЧисле     = "БизнесПроцесс";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Бизнес-процесс'");
	
	// Задачи
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Задачи";
	Строка.Синоним         = НСтр("ru = 'Задачи'");
	Строка.ИмяВЕдЧисле     = "Задача";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Задача'");
	
	// Заполнение дополнительных свойств
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ИдентификаторыОбъектовМетаданных");
	Для каждого Строка Из СвойстваКоллекцийОбъектовМетаданных Цикл
		Попытка
			Строка.ИдентификаторКоллекции = СправочникМенеджер[Строка.Имя];
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден идентификатор коллекции
				           |объектов метаданных ""%1"".
				           |
				           |Следует добавить предопределенный элемент в
				           |Справочник.ИдентификаторыОбъектовМетаданных.'"),
				Строка.Имя);
		КонецПопытки;
		Строка.ПорядокКоллекции = СвойстваКоллекцийОбъектовМетаданных.Индекс(Строка);
	КонецЦикла;
	
	СвойстваКоллекцийОбъектовМетаданных.Индексы.Добавить("ИдентификаторКоллекции");
	
	Возврат СвойстваКоллекцийОбъектовМетаданных;
	
КонецФункции

Функция ПараметрыОбработчикаСобытия()
	
	Свойства = Новый Структура;
	Свойства.Вставить("Старые", СвойстваИдентификатораОбъектаМетаданных());
	Свойства.Вставить("Новые",  СвойстваИдентификатораОбъектаМетаданных());
	Свойства.Вставить("СтандартнаяЗаменаСсылок", Ложь);
	
	Возврат Свойства;
	
КонецФункции

Функция СвойстваИдентификатораОбъектаМетаданных()
	
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка",        ПустаяСсылка());
	Свойства.Вставить("Родитель",      ПустаяСсылка());
	Свойства.Вставить("Имя",           "");
	Свойства.Вставить("Синоним",       "");
	Свойства.Вставить("ПолноеИмя",     "");
	Свойства.Вставить("ПолныйСиноним", "");
	Свойства.Вставить("БезДанных",     Ложь);
	
	Возврат Свойства;
	
КонецФункции

Процедура ВызватьИсключениеОшибкиЗаполненияПредустановленныхИдентификаторов(Знач ПредустановленныеИдентификаторы, Знач СвойстваКоллекцийОбъектовМетаданных)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПредустановленныеИдентификаторы[0].ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в процедуре ОбщегоНазначенияПереопределяемый.Заполнить-
			           |ПредустановленныеИдентификаторыОбъектовМетаданных()
			           |
			           |Идентификатор ""%1"" задан
			           |для несуществующего объекта метаданных
			           |""%2"".'"),
			ПредустановленныеИдентификаторы[0].Идентификатор.УникальныйИдентификатор(),
			ПредустановленныеИдентификаторы[0].ПолноеИмя);
	Иначе
		ИмяКоллецииВЕдЧисле = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПредустановленныеИдентификаторы[0].ПолноеИмя, ".")[0];
		ОписаниеКоллекции = СвойстваКоллекцийОбъектовМетаданных.Найти(ИмяКоллецииВЕдЧисле, "ИмяВЕдЧисле");
		
		Если ОписаниеКоллекции = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в процедуре ОбщегоНазначенияПереопределяемый.Заполнить-
				           |ПредустановленныеИдентификаторыОбъектовМетаданных()
				           |
				           |Для объекта метаданных
				           |""%1""
				           |задан идентификатор ""%2"",
				           |но для объектов метаданных типа ""%3""
				           |идентификаторы не поддерживаются.'"),
				ПредустановленныеИдентификаторы[0].ПолноеИмя,
				ПредустановленныеИдентификаторы[0].Идентификатор.УникальныйИдентификатор(),
				ИмяКоллецииВЕдЧисле);
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в процедуре ОбщегоНазначенияПереопределяемый.Заполнить-
			           |ПредустановленныеИдентификаторыОбъектовМетаданных()
			           |
			           |Для объекта метаданных
			           |""%1""
			           |задан идентификатор ""%2"",
			           |но для его использования требуется, чтобы были заданы
			           |идентификаторы для всех вышестоящих объектов метаданных.'"),
			ПредустановленныеИдентификаторы[0].ПолноеИмя,
			ПредустановленныеИдентификаторы[0].Идентификатор.УникальныйИдентификатор() );
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции замены идентификатора в базе данных

Процедура ЗаменитьСсылкуВИнформационнойБазе(СтараяСсылка, НоваяСсылка)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СтараяСсылка);
	
	НайденныеДанные = НайтиПоСсылкам(МассивСсылок);
	
	НайденныеДанные.Колонки[0].Имя = "Ссылка";
	НайденныеДанные.Колонки[1].Имя = "Данные";
	НайденныеДанные.Колонки[2].Имя = "Метаданные";
	НайденныеДанные.Колонки.Добавить("Включено");
	НайденныеДанные.ЗаполнитьЗначения(Истина, "Включено");
	
	Заменяемые = Новый Соответствие;
	Заменяемые.Вставить(СтараяСсылка, НоваяСсылка);
	
	ВыполнитьЗаменуЭлементов(Заменяемые, НайденныеДанные, Истина);
	
КонецПроцедуры

// Функция из универсальной обработки ПоискИЗаменаЗначений
// Изменения:
// - удалена работа с формой прогрессора
// - удалена процедура ОбработкаПрерыванияПользователя()
// - заменено РегистрыСведений[СтрокаТаблицы.Метаданные.Имя] на
//   ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТаблицы.Метаданные.ПолноеИмя())
//
Функция ВыполнитьЗаменуЭлементов(Знач Заменяемые, Знач ТаблицаСсылок, Знач ОтключатьКонтрольЗаписи = Ложь, Знач ВыполнятьВТранзакции = Ложь)
	
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя + "Субконто",        РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя + "Корреспонденция", РегистрБухгалтерии.Корреспонденция);
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);
	
	ОбрабатываемаяСсылка = Неопределено;
	БылиИсключения = Ложь;
		
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
			Если Не СтрокаТаблицы.Включено Тогда
				Продолжить;
			КонецЕсли;
			ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
			
			Ссылка = СтрокаТаблицы.Ссылка;
			
			Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
				Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
					
					Если ОтключатьКонтрольЗаписи Тогда
						Параметры.Объект.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					
					Попытка
						Параметры.Объект.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							ВызватьИсключение;
						КонецЕсли;
						СообщитьОбОшибке(ИнформацияОбОшибке());
					КонецПопытки;
					Параметры.Объект = Неопределено;
				КонецЕсли;
				ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			КонецЕсли;
			
			Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
					
				Для Каждого ТабличнаяЧасть ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабличнойЧасти = Параметры.Объект[ТабличнаяЧасть.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабличнойЧасти <> Неопределено Цикл
								СтрокаТабличнойЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабличнойЧасти = Параметры.Объект[ТабличнаяЧасть.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
					
					ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
					ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
					
					НаборЗаписей = Параметры.Объект.Движения[Движение.Имя];
					НаборЗаписей.Прочитать();
					НадоЗаписывать = Ложь;
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					Если ТаблицаНабора.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ИменаКолонок = Новый Массив;
					
					// Получим имена измерений, которые могут содержать ссылку
					Для Каждого Измерение ИЗ Движение.Измерения Цикл
						
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							
							Если ЭтоДвижениеРегистраБухгалтерии Тогда
								
								Если Измерение.ПризнакУчета <> Неопределено Тогда
									
									ИменаКолонок.Добавить(Измерение.Имя + "Дт");
									ИменаКолонок.Добавить(Измерение.Имя + "Кт");
								Иначе
									ИменаКолонок.Добавить(Измерение.Имя);
								КонецЕсли;
							Иначе
								ИменаКолонок.Добавить(Измерение.Имя);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					// Получим имена ресурсов, которые могут содержать ссылку
					Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
						Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
							Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
								ИменаКолонок.Добавить(Ресурс.Имя);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					// Получим имена ресурсов, которые могут содержать ссылку
					Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							ИменаКолонок.Добавить(Реквизит.Имя);
						КонецЕсли;
					КонецЦикла;
					
					// Произведем замены в таблице
					Для Каждого ИмяКолонки Из ИменаКолонок Цикл
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						КонецЦикла;
					КонецЦикла;
					
					Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
						
						Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
							Если ЕстьКорреспонденция Тогда
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								КонецЦикла;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								КонецЦикла;
							Иначе
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								Пока СтрокаТабЧасти <> Неопределено Цикл
									СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
									СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
						
						Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
							Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
								Если ЕстьКорреспонденция Тогда
									Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
										СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
									Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
										СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
								Иначе
									Если СтрокаТабЧасти.Счет = Ссылка Тогда
										СтрокаТабЧасти.Счет = ПравильныйЭлемент;
										НадоЗаписывать = Истина;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
						КонецЦикла;
					КонецЕсли;
					
					Если НадоЗаписывать Тогда
						НаборЗаписей.Загрузить(ТаблицаНабора);
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписей.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписей.Записать();
						Исключение
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								ВызватьИсключение;
							КонецЕсли;
							СообщитьОбОшибке(ИнформацияОбОшибке());
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
					Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
						НадоЗаписывать = Ложь;
						НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
						НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
						НаборЗаписи.Прочитать();
						
						Если НаборЗаписи.Количество() > 0 Тогда
							Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
								Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
									НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЦикла;
							Если НадоЗаписывать Тогда
								Если ОтключатьКонтрольЗаписи Тогда
									НаборЗаписи.ОбменДанными.Загрузка = Истина;
								КонецЕсли;
								Попытка
									НаборЗаписи.Записать();
								Исключение
									БылиИсключения = Истина;
									Если ВыполнятьВТранзакции Тогда
										ВызватьИсключение;
									КонецЕсли;
									СообщитьОбОшибке(ИнформацияОбОшибке());
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
					Параметры.Объект.Владелец = ПравильныйЭлемент;
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
					Параметры.Объект.Родитель = ПравильныйЭлемент;
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.ПланыСчетов.Содержит            (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.ПланыВидовРасчета.Содержит      (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.Задачи.Содержит                 (СтрокаТаблицы.Метаданные)
			      ИЛИ Метаданные.БизнесПроцессы.Содержит         (СтрокаТаблицы.Метаданные) Тогда
				
				Если Параметры.Объект = Неопределено Тогда
					Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
				КонецЕсли;
				
				Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
						Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
					Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
						Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
								СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
			ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
				
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				СтруктураИзмерений = Новый Структура;
				НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаТаблицы.Метаданные.ПолноеИмя()).СоздатьНаборЗаписей();
				Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
					СтруктураИзмерений.Вставить(Измерение.Имя);
				КонецЦикла;
				Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
				КонецЕсли;
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();
				
				Если ОтключатьКонтрольЗаписи Тогда
					НаборЗаписей.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				
				Если Не ВыполнятьВТранзакции Тогда
					НачатьТранзакцию();
				КонецЕсли;
				
				Попытка
					НаборЗаписей.Записать();
					
					Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
						Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
							ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
							Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
								НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
					НаборЗаписей.Загрузить(ТаблицаНабора);
					
					НаборЗаписей.Записать();
					
					Если Не ВыполнятьВТранзакции Тогда
						ЗафиксироватьТранзакцию();
					КонецЕсли;
					
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						ВызватьИсключение;
					КонецЕсли;
					ОтменитьТранзакцию();
					СообщитьОбОшибке(ИнформацияОбОшибке());
				КонецПопытки;
			Иначе
				СообщитьОбОшибке(НСтр("ru = 'Значения не заменяются в данных типа'") + ": " + СтрокаТаблицы.Метаданные);
			КонецЕсли;
		КонецЦикла;
	
		Если Параметры.Объект <> Неопределено Тогда
			Если ОтключатьКонтрольЗаписи Тогда
				Параметры.Объект.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			Попытка
				Параметры.Объект.Записать();
			Исключение
				БылиИсключения = Истина;
				Если ВыполнятьВТранзакции Тогда
					ВызватьИсключение;
				КонецЕсли;
				СообщитьОбОшибке(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		БылиИсключения = Истина;
		Если ВыполнятьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		СообщитьОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Не БылиИсключения;
	
КонецФункции

// Процедура из универсальной обработки ПоискИЗаменаЗначений
// Изменения:
// - заменен метод Сообщить(...) на ЗаписьЖурналаРегистрации(...)
//
Процедура СообщитьОбОшибке(Знач Описание)
	
	Если ТипЗнч(Описание) = Тип("ИнформацияОбОшибке") Тогда
		Описание = ?(Описание.Причина = Неопределено, Описание, Описание.Причина).Описание;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Идентификаторы объектов метаданных. Замена идентификатора'"),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Описание,
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

