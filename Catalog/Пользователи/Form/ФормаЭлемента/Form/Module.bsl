////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если НЕ СтандартныеПодсистемыПереопределяемый.ДоступноИзменениеПользователей() Тогда
			Если Объект.Ссылка.Пустая() Тогда
				ВызватьИсключение(НСтр("ru = 'В демонстрационном режиме не поддерживается создание новых пользователей'"));
			КонецЕсли;
			
			ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.Видимость   = Ложь;
		Элементы.ПользовательИнфБазыАутентификацияСтандартная.Видимость = Ложь;
		Элементы.ПользовательИнфБазыАутентификацияOpenID.Видимость      = Ложь;
		Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.Видимость   = Ложь;
		Элементы.СвойстваАутентификацииОС.Видимость = Ложь;
		Элементы.ПользовательИнфБазыРежимЗапуска.Видимость = Ложь;
		Если Метаданные.Языки.Количество() = 1 Тогда
			Элементы.ПользовательИнфБазыЯзык.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка = Пользователи.СвойстваНеуказанногоПользователя().СтандартнаяСсылка Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//** Установка начальных значений
	//   перед загрузкой данных из настроек на сервере
	//   для случая, когда данные ещё не были записаны и не загружаются
	ПоказатьПодсистемыРолей = Истина;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	// Для нового элемента показать все роли, иначе только выбранные
	ПоказатьТолькоВыбранныеРоли = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ПоказатьТолькоВыбранныеРоли;
	//
	ОбновитьДеревоРолей();
	
	//** Заполнение постоянных данных
	АвторизованПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	// Заполнение списка выбора языка
	Для каждого МетаданныеЯзыка ИЗ Метаданные.Языки Цикл
		Элементы.ПользовательИнфБазыЯзык.СписокВыбора.Добавить(МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
	КонецЦикла;
	
	// Заполнение списка выбора режимов запуска
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, Найти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИнфБазыРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	//** Подготовка к интерактивным действиям с учетом сценариев открытия формы
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Создание нового элемента
		Если Параметры.ГруппаНовогоПользователя <> Справочники.ГруппыПользователей.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			// Копирование элемента
			Объект.Наименование = "";
			ПрочитатьПользователяИБ(ЗначениеЗаполнено(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ));
		Иначе
			// Добавление элемента
			Объект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			// Чтение начальных значений свойств пользователя ИБ
			ПрочитатьПользователяИБ();
			
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				ПользовательИнфБазыПоказыватьВСпискеВыбора = Ложь;
				ПользовательИнфБазыАутентификацияСтандартная = Истина;
				ПользовательИнфБазыАутентификацияOpenID      = Истина;
				ДоступКИнформационнойБазеРазрешен = Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Открытие существующего элемента
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	ТолькоПросмотр = ТолькоПросмотр ИЛИ
	                 ДействияВФорме.Роли <> "Редактирование" И
	                 ДействияВФорме.КонтактнаяИнформация <> "Редактирование" И
	                 НЕ ( ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" ИЛИ
	                      ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих"     ) И
	                 ДействияВФорме.СвойстваЭлемента <> "Редактирование";
	
	УстановитьТолькоПросмотрРолей(ПользователиПереопределяемый.ЗапретРедактированияРолей() ИЛИ ДействияВФорме.Роли <> "Редактирование");
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "КонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Недействителен.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьПостояннуюДоступностьСвойств();
	УстановитьДоступностьСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	Элементы.ПользовательИнфБазыПользовательОС.КнопкаВыбора = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ)
	
	ОчиститьСообщения();
	
	ЗаголовокВопросов = НСтр("ru = 'Запись пользователя информационной базы'");
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		Если ДействияВФорме.Роли = "Редактирование" И ПользовательИнфБазыРоли.Количество() = 0 Тогда
			Ответ = Вопрос(НСтр("ru = 'Пользователю информационной базы не установлено ни одной роли. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопросов);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	
		// Обработка записи первого администратора
		ТекстВопроса = "";
		Если Пользователи.ТребуетсяСоздатьПервогоАдминистратора(ПолучитьСтруктуруОписанияПользователяИБ(), 
			ТекстВопроса) Тогда
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ЗаголовокВопросов);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если СоздатьПользователяСервиса Тогда
		// предыдущая попытка создания закончилась неудачно
		
		СоздатьПользователяСервиса = Ложь;
		Объект.ИдентификаторПользователяСервиса = Неопределено;
		ТекущийОбъект.ИдентификаторПользователяСервиса = Неопределено;
	КонецЕсли;
	
	Если ДоступКИнформационнойБазеРазрешен
		И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ИдентификаторПользователяСервиса) Тогда
			
			СоздатьПользователяСервиса = Истина;
			
			ИдентификаторПользователяСервиса = Новый УникальныйИдентификатор;
			
			Объект.ИдентификаторПользователяСервиса = ИдентификаторПользователяСервиса;
			ТекущийОбъект.ИдентификаторПользователяСервиса = ИдентификаторПользователяСервиса;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех"
		ИЛИ ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих" Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДоступКИнформационнойБазеРазрешен", ДоступКИнформационнойБазеРазрешен);
	
		Если ДоступКИнформационнойБазеРазрешен Тогда
			
			ТекущийОбъект.ДополнительныеСвойства.Вставить("СтруктураОписанияПользователяИБ", ПолучитьСтруктуруОписанияПользователяИБ());
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента <> "Редактирование" Тогда
		ЗаполнитьЗначенияСвойств(ТекущийОбъект, ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ТекущийОбъект.Ссылка, "Наименование, ПометкаУдаления"));
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГруппаНовогоПользователя", ГруппаНовогоПользователя);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	Если НЕ Отказ И ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОписаниеПользователя = Новый Структура;
	ОписаниеПользователя.Вставить("Имя", ПользовательИнфБазыИмя);
	ОписаниеПользователя.Вставить("ПолноеИмя", ПользовательИнфБазыПолноеИмя);
	ОписаниеПользователя.Вставить("Язык", ПользовательИнфБазыЯзык);
	
	СтандартныеПодсистемыПереопределяемый.ПриЗаписиПользователя(ТекущийОбъект, ОписаниеПользователя, 
		ПользовательИБСуществует, ДоступКИнформационнойБазеРазрешен, СоздатьПользователяСервиса);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СобытияЗаписиПользователяИБ = Новый Массив;
	СобытияЗаписиПользователяИБ.Добавить("ДобавленПользовательИБ");
	СобытияЗаписиПользователяИБ.Добавить("ИзмененПользовательИБ");
	СобытияЗаписиПользователяИБ.Добавить("УдаленПользовательИБ");
	Для каждого СобытиеЗаписи Из СобытияЗаписиПользователяИБ Цикл
		Если ТекущийОбъект.ДополнительныеСвойства.Свойство(СобытиеЗаписи) Тогда
			ПараметрыЗаписи.Вставить(СобытиеЗаписи, ТекущийОбъект.ДополнительныеСвойства[СобытиеЗаписи]);
		КонецЕсли;
	КонецЦикла;
	
	ПрочитатьПользователяИБ();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	Если СоздатьПользователяСервиса Тогда
		СоздатьПользователяСервиса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Пользователи", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ДобавленПользовательИБ") Тогда
		Оповестить("ДобавленПользовательИБ", ПараметрыЗаписи.ДобавленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ИзмененПользовательИБ") Тогда
		Оповестить("ИзмененПользовательИБ", ПараметрыЗаписи.ИзмененПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("УдаленПользовательИБ") Тогда
		Оповестить("УдаленПользовательИБ", ПараметрыЗаписи.УдаленПользовательИБ, ЭтаФорма);
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ОчищенаСвязьСНесуществущимПользователемИБ") Тогда
		Оповестить("ОчищенаСвязьСНесуществущимПользователемИБ", ПараметрыЗаписи.ОчищенаСвязьСНесуществущимПользователемИБ, ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаНовогоПользователя) Тогда
		ОповеститьОбИзменении(ГруппаНовогоПользователя);
		Оповестить("Запись_ГруппыПользователей", Новый Структура, ГруппаНовогоПользователя);
		ГруппаНовогоПользователя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДоступКИнформационнойБазеРазрешен Тогда
		
		Пользователи.ПроверитьЗаполнениеСтруктурыОписанияПользователяИБ(ПолучитьСтруктуруОписанияПользователяИБ(), Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Настройки["ПоказатьПодсистемыРолей"] = Ложь Тогда
		ПоказатьПодсистемыРолей = Ложь;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Ложь;
	Иначе
		ПоказатьПодсистемыРолей = Истина;
		Элементы.РолиПоказатьПодсистемыРолей.Пометка = Истина;
	КонецЕсли;
	
	ОбновитьДеревоРолей();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПолноеИмяПоПользователюИБ(Команда)
	
	Объект.Наименование = ПользовательИнфБазыПолноеИмя;
	Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	// Если ПолноеИмя определено, то его нужно обновлять.
	// Прим.: неопределенное ПолноеИмя или другое свойство
	//        не учитывается при записи пользователя ИБ
	//        ПолноеИмя определено только для вида
	//        интерактивных действий "БезОграничения"
	Если ПользовательИнфБазыПолноеИмя <> Неопределено Тогда
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если НЕ ПользовательИБСуществует И ДоступКИнформационнойБазеРазрешен Тогда
		ПользовательИнфБазыИмя = ПолучитьКраткоеИмяПользователяИБ(Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступКИнформационнойБазеРазрешенПриИзменении(Элемент)
	
	Если НЕ ПользовательИБСуществует И ДоступКИнформационнойБазеРазрешен Тогда
		ПользовательИнфБазыИмя       = ПолучитьКраткоеИмяПользователяИБ(Объект.Наименование);
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияСтандартнаяПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПриИзменении(Элемент)
	
	ПользовательИнфБазыПароль = Пароль;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыАутентификацияОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	#Если НЕ ВебКлиент Тогда
		Результат = ОткрытьФормуМодально("Справочник.Пользователи.Форма.ФормаВыбораПользователяОС");
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ПользовательИнфБазыПользовательОС = Результат;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДействителенПриИзменении(Элемент)
	
	Если Объект.Недействителен Тогда
		ДоступКИнформационнойБазеРазрешен = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(ЭтаФорма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Роли

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСоставРолей(Элементы.Роли.ТекущаяСтрока, Элементы.Роли.ТекущиеДанные.Пометка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ПоказатьТолькоВыбранныеРоли = НЕ ПоказатьТолькоВыбранныеРоли;
	Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка = ПоказатьТолькоВыбранныеРоли;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоПодсистемам(Команда)
	
	ПоказатьПодсистемыРолей = НЕ ПоказатьПодсистемыРолей;
	Элементы.РолиПоказатьПодсистемыРолей.Пометка = ПоказатьПодсистемыРолей;
	
	ОбновитьДеревоРолей();
	РазвернутьПодсистемыРолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбновитьСоставРолей(Неопределено, Истина);
	Если ПоказатьТолькоВыбранныеРоли Тогда
		РазвернутьПодсистемыРолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбновитьСоставРолей(Неопределено, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	ДействияВФорме.Вставить("Роли",                   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("КонтактнаяИнформация",   ""); // "", "Просмотр",     "Редактирование"
	ДействияВФорме.Вставить("СвойстваПользователяИБ", ""); // "", "ПросмотрВсех", "РедактированиеВсех", "РедактированиеСвоих"
	ДействияВФорме.Вставить("СвойстваЭлемента",       ""); // "", "Просмотр",     "Редактирование"
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Администратор
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли РольДоступна("ДобавлениеИзменениеПользователей")
	        И НЕ Пользователи.ЭтоПолноправныйПользователь(Объект.Ссылка) Тогда
		// Ответственный за список пользователей и групп пользователей
		// (Исполнитель распоряжений о приеме на работу и переводу,
		//  переназначению, созданию отделов, подразделений и рабочих групп)
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
		
	ИначеЕсли ЗначениеЗаполнено(Пользователи.ТекущийПользователь()) И
	          Объект.Ссылка = Пользователи.ТекущийПользователь() Тогда
		// Свои свойства
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "РедактированиеСвоих";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
		
	Иначе
		// Чужие свойства
		ДействияВФорме.Роли                   = "";
		ДействияВФорме.КонтактнаяИнформация   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "";
		ДействияВФорме.СвойстваЭлемента       = "Просмотр";
	КонецЕсли;
	
	ПользователиПереопределяемый.ИзменитьДействияВФорме(Объект.Ссылка, ДействияВФорме);
	
	// Проверка имен действий в форме
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
	ИначеЕсли ПользователиПереопределяемый.ЗапретРедактированияРолей() Тогда
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	Если Найти(", ПросмотрВсех, РедактированиеВсех, РедактированиеСвоих,", ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		ДействияВФорме.СвойстваПользователяИБ = "";
	КонецЕсли;
	Если Найти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОписанияПользователяИБ()
	
	// Восстановление действий в форме, если они изменены на клиенте
	ОпределитьДействияВФорме();
	
	Если ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех"
		И ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеСвоих" Тогда
		
		// Ничего изменять нельзя
		Возврат Новый Структура;
	КонецЕсли;
	
	Если Элементы.ПолноеИмяПояснениеНесоответствия.Видимость Тогда
		ПользовательИнфБазыПолноеИмя = Объект.Наименование;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех" Тогда
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		ЗаполнитьЗначенияСвойств(Результат, ЭтаФорма);
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ПользовательИнфБазыИмя", ПользовательИнфБазыИмя);
		Результат.Вставить("ПользовательИнфБазыПароль", ПользовательИнфБазыПароль);
		Результат.Вставить("ПользовательИнфБазыЯзык", ПользовательИнфБазыЯзык);
	КонецЕсли;
	Результат.Вставить("ПодтверждениеПароля", ПодтверждениеПароля);
	
	Если ДействияВФорме.Роли = "Редактирование" Тогда
		ТекущиеРоли = ПользовательИнфБазыРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("ПользовательИнфБазыРоли", ТекущиеРоли);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение, запись, удаление, расчет краткого имени пользователя ИБ, проверка несоответствия

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеРоли = Новый Массив;
	
	Пароль              = "";
	ПодтверждениеПароля = "";
	ПрочитанныеСвойства               = Пользователи.НовоеОписаниеПользователяИБ();
	СтарыйИдентификаторПользователяИБ = Неопределено;
	ПользовательИБСуществует          = Ложь;
	ДоступКИнформационнойБазеРазрешен = Ложь;
	
	// Заполнение начальных значений свойств пользователяИБ у пользователя.
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПрочитанныеСвойства.ПользовательИнфБазыПоказыватьВСпискеВыбора = Ложь;
	Иначе
		ПрочитанныеСвойства.ПользовательИнфБазыПоказыватьВСпискеВыбора = НЕ Константы.ИспользоватьВнешнихПользователей.Получить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ПрочитанныеСвойства);
	ПользовательИнфБазыАутентификацияСтандартная = Истина;
	
	Если ПриКопированииЭлемента Тогда
		
		Если Пользователи.ПрочитатьПользователяИБ(Параметры.ЗначениеКопирования.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
			// Т.к. у скопированного пользователя есть связь с пользователемИБ,
			// то устанавливается будущая связь и у нового пользователя.
			ДоступКИнформационнойБазеРазрешен = Истина;
			// Т.к. пользовательИБ скопированного пользователя прочитан,
			// то копируются свойства и роли пользователяИБ.
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыАутентификацияСтандартная,
			                         |ПользовательИнфБазыЗапрещеноИзменятьПароль,
			                         |ПользовательИнфБазыПоказыватьВСпискеВыбора,
			                         |ПользовательИнфБазыАутентификацияOpenID,
			                         |ПользовательИнфБазыАутентификацияОС,
			                         |ПользовательИнфБазыРежимЗапуска,
			                         |ПользовательИнфБазыЯзык");
		КонецЕсли;
		Объект.ИдентификаторПользователяИБ = Неопределено;
	Иначе
		Если Пользователи.ПрочитатьПользователяИБ(Объект.ИдентификаторПользователяИБ, ПрочитанныеСвойства, ПрочитанныеРоли) Тогда
		
			ПользовательИБСуществует          = Истина;
			ДоступКИнформационнойБазеРазрешен = Истина;
			СтарыйИдентификаторПользователяИБ = Объект.ИдентификаторПользователяИБ;
			
			ЗаполнитьЗначенияСвойств(ЭтаФорма,
			                         ПрочитанныеСвойства,
			                         "ПользовательИнфБазыИмя,
			                         |ПользовательИнфБазыПолноеИмя,
			                         |ПользовательИнфБазыАутентификацияСтандартная,
			                         |ПользовательИнфБазыПоказыватьВСпискеВыбора,
			                         |ПользовательИнфБазыЗапрещеноИзменятьПароль,
			                         |ПользовательИнфБазыАутентификацияOpenID,
			                         |ПользовательИнфБазыАутентификацияОС,
			                         |ПользовательИнфБазыПользовательОС,
			                         |ПользовательИнфБазыРежимЗапуска,
			                         |ПользовательИнфБазыЯзык");
			
			Если ПрочитанныеСвойства.ПользовательИнфБазыПарольУстановлен Тогда
				Пароль              = "**********";
				ПодтверждениеПароля = "**********";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРоли(ПрочитанныеРоли);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКраткоеИмяПользователяИБ(Знач ПолноеИмя)
	
	Разделители = Новый Массив;
	Разделители.Добавить(" ");
	Разделители.Добавить(".");
	
	КраткоеИмя = "";
	Для Счетчик = 1 По 3 Цикл
		
		Если Счетчик <> 1 Тогда
			КраткоеИмя = КраткоеИмя + ВРег(Лев(ПолноеИмя, 1));
		КонецЕсли;
		
		ПозицияРазделителя = 0;
		Для каждого Разделитель Из Разделители Цикл
			ПозицияТекущегоРазделителя = Найти(ПолноеИмя, Разделитель);
			Если ПозицияТекущегоРазделителя > 0
			   И (    ПозицияРазделителя = 0
			      ИЛИ ПозицияРазделителя > ПозицияТекущегоРазделителя ) Тогда
				ПозицияРазделителя = ПозицияТекущегоРазделителя;
			КонецЕсли;
		КонецЦикла;
		
		Если ПозицияРазделителя = 0 Тогда
			Если Счетчик = 1 Тогда
				КраткоеИмя = ПолноеИмя;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		Если Счетчик = 1 Тогда
			КраткоеИмя = Лев(ПолноеИмя, ПозицияРазделителя - 1);
		КонецЕсли;
		
		ПолноеИмя = Прав(ПолноеИмя, СтрДлина(ПолноеИмя) - ПозицияРазделителя);
		Пока Разделители.Найти(Лев(ПолноеИмя, 1)) <> Неопределено Цикл
			ПолноеИмя = Сред(ПолноеИмя, 2);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КраткоеИмя;
	
КонецФункции

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	//** Проверка соответствия свойства "ПолноеИмя" пользователяИБ и свойства "Наименование" пользователя
	
	Если НЕ (ДействияВФорме.СвойстваЭлемента       = "Редактирование" И
	         ДействияВФорме.СвойстваПользователяИБ = "РедактированиеВсех") Тогда
		// Прочитанное ПолноеИмя пользователя не может быть изменено, если не совпадает
		ПользовательИнфБазыПолноеИмя = Неопределено;
	КонецЕсли;
	
	Если НЕ ПользовательИБСуществует ИЛИ
	     ПользовательИнфБазыПолноеИмя = Неопределено ИЛИ
	     ПользовательИнфБазыПолноеИмя = Объект.Наименование Тогда
		
		Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		Элементы.ПолноеИмяПояснениеНесоответствия.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Элементы.ПолноеИмяПояснениеНесоответствия.Заголовок,
				ПользовательИнфБазыПолноеИмя);
	Иначе
		Объект.Наименование = ПользовательИнфБазыПолноеИмя;
		Элементы.ПолноеИмяОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
	//** Определение связи с несуществующим пользователем ИБ
	ЕстьНоваяСвязьСНесуществующимПользователемИБ = НЕ ПользовательИБСуществует И ЗначениеЗаполнено(Объект.ИдентификаторПользователяИБ);
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСвязьСНесуществующимПользователемИБ
	   И НЕ ЕстьНоваяСвязьСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищенаСвязьСНесуществущимПользователемИБ", Объект.Ссылка);
	КонецЕсли;
	ЕстьСвязьСНесуществующимПользователемИБ = ЕстьНоваяСвязьСНесуществующимПользователемИБ;
	
	Если ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех" Тогда
		// Связь не может быть изменена
		Элементы.СвязьОбработкаНесоответствия.Видимость = Ложь;
	Иначе
		Элементы.СвязьОбработкаНесоответствия.Видимость = ЕстьСвязьСНесуществующимПользователемИБ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Начальное заполнение, проверка заполнения, доступность свойств

&НаСервере
Процедура ЗаполнитьРоли(ПрочитанныеРоли)
	
	ПользовательИнфБазыРоли.Очистить();
	
	Для каждого Роль Из ПрочитанныеРоли Цикл
		ПользовательИнфБазыРоли.Добавить().Роль = Роль;
	КонецЦикла;
	
	ОбновитьДеревоРолей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПостояннуюДоступностьСвойств()
	
	Элементы.КонтактнаяИнформация.Видимость   = ЗначениеЗаполнено(ДействияВФорме.КонтактнаяИнформация);
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	ВыводитьСписокРолей = ЗначениеЗаполнено(ДействияВФорме.Роли);
	Элементы.ОтображениеРолей.Видимость = ВыводитьСписокРолей;
	Элементы.СвойстваАутентификации1СПредприятия.Отображение = 
		?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.Отступ);
	
	Элементы.Наименование.ТолькоПросмотр                                 = ДействияВФорме.СвойстваЭлемента       <> "Редактирование";
	Элементы.ДоступКИнформационнойБазеРазрешен.ТолькоПросмотр            = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.СвойстваПользователяИБ.ТолькоПросмотр                       = ДействияВФорме.СвойстваПользователяИБ =  "ПросмотрВсех";
	Элементы.ПользовательИнфБазыИмя.ТолькоПросмотр                       = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыАутентификацияСтандартная.ТолькоПросмотр = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.ТолькоПросмотр   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.ТолькоПросмотр   = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыАутентификацияOpenID.ТолькоПросмотр      = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыАутентификацияОС.ТолькоПросмотр          = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыПользовательОС.ТолькоПросмотр            = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	Элементы.ПользовательИнфБазыРежимЗапуска.ТолькоПросмотр              = ДействияВФорме.СвойстваПользователяИБ <> "РедактированиеВсех";
	
	Если НЕ ПользователиСерверПовтИсп.АутентификацияOpenIDНастраивается() Тогда
		Элементы.СвойстваАутентификацииОС.Отображение = ОтображениеОбычнойГруппы.Отступ;
		Элементы.ПользовательИнфБазыАутентификацияOpenID.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Пароль.ТолькоПросмотр              = Форма.ПользовательИнфБазыЗапрещеноИзменятьПароль И НЕ Форма.АвторизованПолноправныйПользователь;
	Элементы.ПодтверждениеПароля.ТолькоПросмотр = Форма.ПользовательИнфБазыЗапрещеноИзменятьПароль И НЕ Форма.АвторизованПолноправныйПользователь;
	
	Элементы.ОсновныеСвойства.Доступность                     = Форма.ДоступКИнформационнойБазеРазрешен;
	Элементы.ОтображениеРолей.Доступность                     = Форма.ДоступКИнформационнойБазеРазрешен;
	Элементы.ПользовательИнфБазыИмя.АвтоОтметкаНезаполненного = Форма.ДоступКИнформационнойБазеРазрешен;
	
	Элементы.Пароль.Доступность                                     = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПодтверждениеПароля.Доступность                        = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПользовательИнфБазыЗапрещеноИзменятьПароль.Доступность = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	Элементы.ПользовательИнфБазыПоказыватьВСпискеВыбора.Доступность = Форма.ПользовательИнфБазыАутентификацияСтандартная;
	
	Элементы.ПользовательИнфБазыПользовательОС.Доступность = Форма.ПользовательИнфБазыАутентификацияОС;
	
	Элементы.ДоступКИнформационнойБазеРазрешен.Доступность = Не Форма.Объект.Недействителен;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИнфБазыРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаСервере
Функция КоллекцияРолей(ТаблицаЗначенийДляЧтения = Ложь)
	
	Если ТаблицаЗначенийДляЧтения Тогда
		Возврат РеквизитФормыВЗначение("ПользовательИнфБазыРоли");
	КонецЕсли;
	
	Возврат ПользовательИнфБазыРоли;
	
КонецФункции

&НаСервере
Процедура УстановитьТолькоПросмотрРолей(Знач ТолькоПросмотрРолей = Неопределено)
	
	Если ТолькоПросмотрРолей <> Неопределено Тогда
		Элементы.Роли.ТолькоПросмотр              =    ТолькоПросмотрРолей;
		Элементы.РолиУстановитьФлажки.Доступность = НЕ ТолькоПросмотрРолей;
		Элементы.РолиСнятьФлажки.Доступность      = НЕ ТолькоПросмотрРолей;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПодсистемыРолей();
	
	// Развернуть все
	Для каждого Строка Из Роли.ПолучитьЭлементы() Цикл
		Элементы.Роли.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРолей()
	
	// Запоминание текущей строки
	ТекущаяПодсистема = "";
	ТекущаяРоль       = "";
	//
	Если Элементы.Роли.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Роли.НайтиПоИдентификатору(Элементы.Роли.ТекущаяСтрока);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ТекущаяПодсистема = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, "", ТекущиеДанные.ПолучитьРодителя().Имя);
			ТекущаяРоль       = ТекущиеДанные.Имя;
		Иначе
			ТекущаяПодсистема = ТекущиеДанные.Имя;
			ТекущаяРоль       = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТипПользователя = Перечисления.ТипыПользователей.ПользовательОбластиДанных;
	Иначе
		ТипПользователя = Перечисления.ТипыПользователей.ПользовательЛокальногоРешения;
	КонецЕсли;
	
	ДеревоРолей = ПользователиСерверПовтИсп.ДеревоРолей(ПоказатьПодсистемыРолей, ТипПользователя).Скопировать();
	ДеревоРолей.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	ДеревоРолей.Колонки.Добавить("НомерКартинки", Новый ОписаниеТипов("Число"));
	ПодготовитьДеревоРолей(ДеревоРолей.Строки, ПоказатьТолькоВыбранныеРоли);
	
	ЗначениеВРеквизитФормы(ДеревоРолей, "Роли");
	
	Элементы.Роли.Отображение = ?(ДеревоРолей.Строки.Найти(Ложь, "ЭтоРоль") = Неопределено, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	
	// Восстановление текущей строки
	НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Ложь, ТекущаяПодсистема), Истина);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ОписаниеПодсистемы = НайденныеСтроки[0];
		ИндексПодсистемы = ?(ОписаниеПодсистемы.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеПодсистемы.Родитель.Строки).Индекс(ОписаниеПодсистемы);
		СтрокаПодсистемы = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеПодсистемы).Получить(ИндексПодсистемы);
		Если ЗначениеЗаполнено(ТекущаяРоль) Тогда
			НайденныеСтроки = ОписаниеПодсистемы.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль));
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ОписаниеРоли = НайденныеСтроки[0];
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьЭлементы().Получить(ОписаниеПодсистемы.Строки.Индекс(ОписаниеРоли)).ПолучитьИдентификатор();
			Иначе
				Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			Элементы.Роли.ТекущаяСтрока = СтрокаПодсистемы.ПолучитьИдентификатор();
		КонецЕсли;
	Иначе
		НайденныеСтроки = ДеревоРолей.Строки.НайтиСтроки(Новый Структура("ЭтоРоль, Имя", Истина, ТекущаяРоль), Истина);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			ОписаниеРоли = НайденныеСтроки[0];
			ИндексРоли = ?(ОписаниеРоли.Родитель = Неопределено, ДеревоРолей.Строки, ОписаниеРоли.Родитель.Строки).Индекс(ОписаниеРоли);
			СтрокаРоли = ДанныеФормыКоллекцияЭлементовДерева(Роли, ОписаниеРоли).Получить(ИндексРоли);
			Элементы.Роли.ТекущаяСтрока = СтрокаРоли.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДеревоРолей(Знач Коллекция, Знач ПоказатьТолькоВыбранныеРоли)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		ПодготовитьДеревоРолей(Строка.Строки, ПоказатьТолькоВыбранныеРоли);
		
		Если Строка.ЭтоРоль Тогда
			Строка.НомерКартинки = 6;
			Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			Если Строка.Строки.Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.НомерКартинки = 5;
				Строка.Пометка = Строка.Строки.НайтиСтроки(Новый Структура("Пометка", Ложь)).Количество() = 0;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеФормыКоллекцияЭлементовДерева(Знач ДанныеФормыДерево, Знач СтрокаДереваЗначений)
	
	Если СтрокаДереваЗначений.Родитель = Неопределено Тогда
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыДерево.ПолучитьЭлементы();
	Иначе
		ИндексРодителя = ?(СтрокаДереваЗначений.Родитель.Родитель = Неопределено, СтрокаДереваЗначений.Владелец().Строки, СтрокаДереваЗначений.Родитель.Родитель.Строки).Индекс(СтрокаДереваЗначений.Родитель);
		ДанныеФормыКоллекцияЭлементовДерева = ДанныеФормыКоллекцияЭлементовДерева(ДанныеФормыДерево, СтрокаДереваЗначений.Родитель).Получить(ИндексРодителя).ПолучитьЭлементы();
	КонецЕсли;
	
	Возврат ДанныеФормыКоллекцияЭлементовДерева;
	
КонецФункции


&НаСервере
Процедура ОбновитьСоставРолей(ИдентификаторСтроки, Добавить);
	
	Если ИдентификаторСтроки = Неопределено Тогда
		// Обработка всех
		КоллекцияРолей = КоллекцияРолей();
		КоллекцияРолей.Очистить();
		Если Добавить Тогда
			ВсеРоли = ПользователиСерверПовтИсп.ВсеРоли();
			Для каждого ОписаниеРоли Из ВсеРоли Цикл
				Если ОписаниеРоли.Имя <> "ПолныеПрава" И ОписаниеРоли.Имя <> "АдминистраторСистемы" Тогда
					КоллекцияРолей.Добавить().Роль = ОписаниеРоли.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ПоказатьТолькоВыбранныеРоли Тогда
			Если КоллекцияРолей.Количество() > 0 Тогда
				ОбновитьДеревоРолей();
			Иначе
				Роли.ПолучитьЭлементы().Очистить();
			КонецЕсли;
			// Возврат
			Возврат;
			// Возврат
		КонецЕсли;
	Иначе
		ТекущиеДанные = Роли.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(ТекущиеДанные.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(ТекущиеДанные.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПометкуВыбранныхРолей(Роли.ПолучитьЭлементы());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРоль(Знач Роль, Знач Добавить)
	
	НайденныеРоли = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Роль));
	
	Если Добавить Тогда
		Если НайденныеРоли.Количество() = 0 Тогда
			КоллекцияРолей().Добавить().Роль = Роль;
		КонецЕсли;
	Иначе
		Если НайденныеРоли.Количество() > 0 Тогда
			КоллекцияРолей().Удалить(НайденныеРоли[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьРолиПодсистемы(Знач Коллекция, Знач Добавить)
	
	Для каждого Строка Из Коллекция Цикл
		Если Строка.ЭтоРоль Тогда
			ДобавитьУдалитьРоль(Строка.Имя, Добавить);
		Иначе
			ДобавитьУдалитьРолиПодсистемы(Строка.ПолучитьЭлементы(), Добавить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПометкуВыбранныхРолей(Знач Коллекция)
	
	Индекс = Коллекция.Количество()-1;
	
	Пока Индекс >= 0 Цикл
		Строка = Коллекция[Индекс];
		
		Если Строка.ЭтоРоль Тогда
			Строка.Пометка = КоллекцияРолей().НайтиСтроки(Новый Структура("Роль", Строка.Имя)).Количество() > 0;
			Если ПоказатьТолькоВыбранныеРоли И НЕ Строка.Пометка Тогда
				Коллекция.Удалить(Индекс);
			КонецЕсли;
		Иначе
			ОбновитьПометкуВыбранныхРолей(Строка.ПолучитьЭлементы());
			Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
				Коллекция.Удалить(Индекс);
			Иначе
				Строка.Пометка = Истина;
				Для каждого Элемент Из Строка.ПолучитьЭлементы() Цикл
					Если НЕ Элемент.Пометка Тогда
						Строка.Пометка = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Индекс = Индекс-1;
	КонецЦикла;
	
КонецПроцедуры
