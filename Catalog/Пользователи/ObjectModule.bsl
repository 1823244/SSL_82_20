
Перем ЗаписьПервогоАдминистратора; // Флажок факта записи первого администратора,
//                                    который может быть установлен при обработке
//                                    пользователя ИБ.
//                                    Используется в обработчике события ПриЗаписи.

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Программный интерфейс объекта реализован через ДополнительныеСвойства:
//
// ДоступКИнформационнойБазеРазрешен - есть пользователь ИБ, связанный
//                 с данным элементом.
//
// СтруктураОписанияПользователяИБ - свойства пользователя ИБ, используются только
//                 если ДоступКИнформационнойБазеРазрешен = Истина.
//                 Состав свойств см. Пользователи.НовоеОписаниеПользователяИБ.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПереопределяемый.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьПервогоАдминистратора = Ложь;
	
	СтандартныеПодсистемыПереопределяемый.ПередЗаписьюПользователя(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ДоступКИнформационнойБазеРазрешен") Тогда
		ОбработатьПользователяИБ(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Пользователи.ПользовательПоИдентификаторуСуществует(ИдентификаторПользователяИБ, Ссылка) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Один пользователь информационной базы
		                             |может быть связан только с одним пользователем или внешним пользователем!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПереопределяемый.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ГруппаНовогоПользователя")
		И ЗначениеЗаполнено(ДополнительныеСвойства.ГруппаНовогоПользователя) Тогда
		
		ОбъектГруппы = ДополнительныеСвойства.ГруппаНовогоПользователя.ПолучитьОбъект();
		ОбъектГруппы.Состав.Добавить().Пользователь = Ссылка;
		ОбъектГруппы.Записать();
		Пользователи.ОбновитьСоставыГруппПользователей(ОбъектГруппы.Ссылка);
	КонецЕсли;
	
	Пользователи.ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	
	Если ЗаписьПервогоАдминистратора Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ПользователиПереопределяемый.ПриЗаписиПервогоАдминистратора(Ссылка);
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если СтандартныеПодсистемыПереопределяемый.ЭтоНеразделенныйПользовательИБ(ИдентификаторПользователяИБ) Тогда
		Возврат;
	КонецЕсли;
	
	// Требуется удалить пользователя ИБ, иначе он попадет в список ошибок в форме ПользователиИБ,
	// кроме того, вход под этим пользователем ИБ приведет к ошибке.
	Если Пользователи.ПользовательИБСуществует(ИдентификаторПользователяИБ) Тогда
		ОписаниеОшибки = "";
		Если НЕ Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
			ВызватьИсключение(ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Проверку ОбменДанными.Загрузка следует выполнять начиная с этой строки.
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторПользователяИБ = Неопределено;
	ИдентификаторПользователяСервиса = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработатьПользователяИБ(Отказ)
	
	УровеньДоступа = Пользователи.ПолучитьУровеньДоступаНаИзменениеСвойствПользователяИБ();
	
	Если УровеньДоступа = "НетДоступа" Тогда
		ТекстСообщения = НСтр("ru = 'Не достаточно прав для изменения пользователя информационной базы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства.Вставить("ПользовательИБСуществует", 
		ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ) <> Неопределено);
		
	Если УровеньДоступа <> "ПолныйДоступ" И УровеньДоступа <> "УправлениеСписком"
		И ДополнительныеСвойства.ПользовательИБСуществует <> ДополнительныеСвойства.ДоступКИнформационнойБазеРазрешен Тогда
		
		ТекстСообщения = НСтр("ru = 'Не достаточно прав для изменения пользователя информационной базы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.ДоступКИнформационнойБазеРазрешен Тогда
		// Проверка попытки изменения недоступных свойств.
		СтруктураОписанияПользователяИБ = ДополнительныеСвойства.СтруктураОписанияПользователяИБ;
		
		Если УровеньДоступа = "УправлениеСписком" Тогда
			Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыРоли") Тогда
				ТекстСообщения = НСтр("ru = 'Не достаточно прав для изменения ролей пользователя информационной базы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
				Возврат;
			КонецЕсли;
		ИначеЕсли УровеньДоступа = "ИзменениеТекущего" Тогда
			ДопустимыеСвойства = Новый Массив;
			ДопустимыеСвойства.Добавить("ПользовательИнфБазыИмя");
			ДопустимыеСвойства.Добавить("ПользовательИнфБазыПароль");
			ДопустимыеСвойства.Добавить("ПользовательИнфБазыЯзык");
			ДопустимыеСвойства.Добавить("ПодтверждениеПароля");
			Для каждого КлючИЗначение Из СтруктураОписанияПользователяИБ Цикл
				Если ДопустимыеСвойства.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
					ТекстСообщения = НСтр("ru = 'Не достаточно прав для изменения пользователя информационной базы'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьПользователяИБ(Отказ);
	Иначе
		Если ДополнительныеСвойства.ПользовательИБСуществует Тогда
			УдалитьПользователяИБ(Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПользователяИБ(Отказ)
	
	СтруктураОписанияПользователяИБ = ДополнительныеСвойства.СтруктураОписанияПользователяИБ;
	Если СтруктураОписанияПользователяИБ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОписанияПользователяИБ.Свойство("ПользовательИнфБазыРоли") Тогда
		Роли = СтруктураОписанияПользователяИБ.ПользовательИнфБазыРоли;
	Иначе
		Роли = Неопределено;
	КонецЕсли;
	
	Если Пользователи.ТребуетсяСоздатьПервогоАдминистратора(СтруктураОписанияПользователяИБ) Тогда
		ЗаписьПервогоАдминистратора = Истина;
		Роли = Новый Массив;
		Роли.Добавить("ПолныеПрава");
		
		ИмяРолиАдминистратораСистемы = Пользователи.РольАдминистратораСистемы().Имя;
		Если Роли.Найти(ИмяРолиАдминистратораСистемы) = Неопределено Тогда
			Роли.Добавить(ИмяРолиАдминистратораСистемы);
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи пользователя ИБ.
	СозданНовыйПользовательИБ = Ложь;
	ОписаниеОшибки = "";
	Если Пользователи.ЗаписатьПользователяИБ(ИдентификаторПользователяИБ,
		СтруктураОписанияПользователяИБ, Роли, НЕ ДополнительныеСвойства.ПользовательИБСуществует, ОписаниеОшибки) Тогда
		
		Если НЕ ДополнительныеСвойства.ПользовательИБСуществует Тогда
			СозданНовыйПользовательИБ = Истина;
			ИдентификаторПользователяИБ = СтруктураОписанияПользователяИБ.ПользовательИнфБазыУникальныйИдентификатор;
			ДополнительныеСвойства.ПользовательИБСуществует = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если СозданНовыйПользовательИБ Тогда
			ДополнительныеСвойства.Вставить("ДобавленПользовательИБ", ИдентификаторПользователяИБ);
		Иначе
			ДополнительныеСвойства.Вставить("ИзмененПользовательИБ", ИдентификаторПользователяИБ);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция УдалитьПользователяИБ(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеОшибки = "";
	Если Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ, ОписаниеОшибки) Тогда
		ДополнительныеСвойства.Вставить("УдаленПользовательИБ", ИдентификаторПользователяИБ);
		ДополнительныеСвойства.ПользовательИБСуществует = Ложь;
		ИдентификаторПользователяИБ = Неопределено;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , , , Отказ);
	КонецЕсли;
	
КонецФункции

