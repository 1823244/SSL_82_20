
Перем СтарыйРодитель; // Значение родителя группы до изменения для использования
//                       в обработчике события ПриЗаписи.

Перем ИзменилсяСоставРолейГруппыВнешнихПользователей; // Флажок изменения состава ролей для использования
//                                                       в обработчике события ПриЗаписи.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Блокирует недопустимые действия с предопределенной группой "Все внешние пользователи".
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		ТипОбъектовАвторизации = Неопределено;
		ВсеОбъектыАвторизации  = Ложь;
		
		Если НЕ Родитель.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Предопределенная группа ""Все внешние пользователи"" может быть только в корне.'"),
				, , , Отказ);
			Возврат;
		КонецЕсли;
		Если Состав.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Добавление внешних пользователей в группу ""Все внешние пользователи"" не поддерживается.'"),
				, , , Отказ);
			Возврат;
		КонецЕсли;
	Иначе
		Если Родитель = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Предопределенная группа ""Все внешние пользователи"" не может быть родителем.'"),
				, , , Отказ);
			Возврат;
		КонецЕсли;
		СтарыйРодитель = ?(Ссылка.Пустая(), Неопределено, ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Родитель"));
		
		Если ТипОбъектовАвторизации = Неопределено Тогда
			ВсеОбъектыАвторизации = Ложь;
		ИначеЕсли ВсеОбъектыАвторизации И ЗначениеЗаполнено(Родитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Родитель недопустим у группы для всех объектов информационной базы заданного типа.'"),
				, , , Отказ);
			Возврат;
		КонецЕсли;
		
		// Проверка уникальности группы всех объектов авторизации заданного типа
		Если ВсеОбъектыАвторизации Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(ГруппыВнешнихПользователей.Ссылка) КАК СсылкаПредставление
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|ГДЕ
			|	ГруппыВнешнихПользователей.Ссылка <> &Ссылка
			|	И ГруппыВнешнихПользователей.ТипОбъектовАвторизации = &ТипОбъектовАвторизации
			|	И ГруппыВнешнихПользователей.ВсеОбъектыАвторизации");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипОбъектовАвторизации);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Уже есть группа ""%1"" для всех объектов информационной базы типа ""%2"".'"),
						Выборка.СсылкаПредставление,
						ТипОбъектовАвторизации.Метаданные().Синоним),
					, , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка совпадения типа объектов авторизации с родителем (допустимо, если тип у родителя не задан)
		Если ЗначениеЗаполнено(Родитель) Тогда
			ТипОбъектовАвторизацииРодителя = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Родитель, "ТипОбъектовАвторизации");
			Если ТипОбъектовАвторизацииРодителя <> Неопределено И
			     ТипОбъектовАвторизацииРодителя <> ТипОбъектовАвторизации Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Тип объектов информационной базы должен быть ""%1"", как у родителя ""%2"".'"),
						ТипОбъектовАвторизацииРодителя.Метаданные().Синоним, Родитель),
					, , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка, что при изменении типа объектов авторизации нет подчиненных элементов другого типа (очистка типа допустима)
		Если ТипОбъектовАвторизации <> Неопределено И ЗначениеЗаполнено(Ссылка) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(ГруппыВнешнихПользователей.Ссылка) КАК СсылкаПредставление,
			|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|ГДЕ
			|	ГруппыВнешнихПользователей.Родитель = &Ссылка
			|	И ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> &ТипОбъектовАвторизации");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипОбъектовАвторизации);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Выборка.ТипОбъектовАвторизации = Неопределено Тогда
					ПредставлениеДругогоТипаОбъектаАвторизации = НСтр("ru = '<Любой тип>'");
				Иначе
					ПредставлениеДругогоТипаОбъектаАвторизации = Выборка.ТипОбъектовАвторизации.Метаданные().Синоним;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Есть дочерняя группа ""%1"" с другим типом объектов информационной базы ""%2"".'"),
						Выборка.СсылкаПредставление,
						ПредставлениеДругогоТипаОбъектаАвторизации),
					, , , Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// Определение изменения состава ролей.
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НовыеРоли.Роль
			|ПОМЕСТИТЬ НовыеРоли
			|ИЗ
			|	&НовыеРоли КАК НовыеРоли
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Значение
			|ИЗ
			|	НовыеРоли КАК НовыеРоли
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей.Роли КАК СтарыеРоли
			|		ПО (СтарыеРоли.Ссылка = &ГруппаВнешнихПользователей)
			|			И (СтарыеРоли.Роль = НовыеРоли.Роль)
			|ГДЕ
			|	СтарыеРоли.Роль ЕСТЬ NULL 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИСТИНА КАК ЗначениеИстина) КАК ЗначениеИстина
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыВнешнихПользователей.Роли КАК СтарыеРоли
			|		ПО (СтарыеРоли.Ссылка = &ГруппаВнешнихПользователей)
			|		ЛЕВОЕ СОЕДИНЕНИЕ НовыеРоли КАК НовыеРоли
			|		ПО (СтарыеРоли.Роль = НовыеРоли.Роль)
			|ГДЕ
			|	НовыеРоли.Роль ЕСТЬ NULL ");
			Запрос.УстановитьПараметр("ГруппаВнешнихПользователей", Ссылка);
			Запрос.УстановитьПараметр("НовыеРоли", Роли.Выгрузить());
			ИзменилсяСоставРолейГруппыВнешнихПользователей = НЕ Запрос.Выполнить().Пустой();
		Иначе
			ИзменилсяСоставРолейГруппыВнешнихПользователей = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеВнешниеПользователи = Неопределено;
	ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(Ссылка, ИзмененныеВнешниеПользователи);
	
	Если Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.ГруппаПользователей = ЗНАЧЕНИЕ(Справочник.ГруппыВнешнихПользователей.ВсеВнешниеПользователи)");
		ИзмененныеВнешниеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	ИначеЕсли ИзменилсяСоставРолейГруппыВнешнихПользователей Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоставыГруппПользователей.Пользователь
		|ИЗ
		|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|ГДЕ
		|	СоставыГруппПользователей.Пользователь В(&ИзмененныеВнешниеПользователи)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователейСостав.ВнешнийПользователь
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
		|ГДЕ
		|	ГруппыВнешнихПользователейСостав.Ссылка = &ГруппаВнешнихПользователей
		|	И (НЕ ГруппыВнешнихПользователейСостав.ВнешнийПользователь.УстановитьРолиНепосредственно)");
		Запрос.УстановитьПараметр("ГруппаВнешнихПользователей",    Ссылка);
		Запрос.УстановитьПараметр("ИзмененныеВнешниеПользователи", ИзмененныеВнешниеПользователи);
		ИзмененныеВнешниеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	КонецЕсли;
		
	ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи);
	
	Если ЗначениеЗаполнено(СтарыйРодитель) И СтарыйРодитель <> Родитель Тогда
		
		ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(СтарыйРодитель, ИзмененныеВнешниеПользователи);
		ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Ошибки = Неопределено;
	
	// Проверка использования родителя.
	Если Родитель = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.Родитель",
			НСтр("ru = 'Предопределенная группа ""Все внешние пользователи"" не может быть родителем.'"));
	КонецЕсли;
	
	// Проверка незаполненных и повторяющихся внешних пользователей.
	ПроверенныеРеквизитыОбъекта.Добавить("Состав.ВнешнийПользователь");
	
	Для каждого ТекущаяСтрока Из Состав Цикл
		НомерСтроки = Состав.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВнешнийПользователь) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].ВнешнийПользователь",
				НСтр("ru = 'Внешний пользователь не выбран.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Внешний пользователь в строке %1 не выбран.'"));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ТекущаяСтрока.ВнешнийПользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].ВнешнийПользователь",
				НСтр("ru = 'Внешний пользователь повторяется.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Внешний пользователь в строке %1 повторяется.'"));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ПроверенныеРеквизитыОбъекта);
	
КонецПроцедуры

