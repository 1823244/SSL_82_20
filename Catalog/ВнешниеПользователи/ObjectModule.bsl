////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторПользователяИБ <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") И
	     Пользователи.ПользовательПоИдентификаторуСуществует(ИдентификаторПользователяИБ, Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Один пользователь информационной базы
		                             |может быть связан только с одним пользователем или внешним пользователем.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектАвторизации) Тогда
		ВызватьИсключение НСтр("ru = 'Для внешнего пользователя не установлен объект авторизации.'");
	Иначе
		Если ВнешниеПользователи.ОбъектАвторизацииИспользуется(ОбъектАвторизации, Ссылка) Тогда
			ВызватьИсключение НСтр("ru = 'Объект авторизации уже используется для другого внешнего пользователя.'");
		КонецЕсли;
	КонецЕсли;
	
	// Проверка, что объект авторизации не изменен.
	Если НЕ ЭтоНовый() Тогда
		СтарыйОбъектАвторизации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ОбъектАвторизации");
		Если ЗначениеЗаполнено(СтарыйОбъектАвторизации) И СтарыйОбъектАвторизации <> ОбъектАвторизации Тогда
			ВызватьИсключение НСтр("ru = 'Объект информационной базы нельзя изменять.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление состава автоматической группы "Все внешние пользователи".
	ИзмененныеВнешниеПользователи = Неопределено;
	ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи, ИзмененныеВнешниеПользователи);
	ИзмененныеВнешниеПользователи.Добавить(Ссылка);
	ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи);
	
	// Обновление состава автоматической группы <все объекты авторизации одного типа> (если есть).
	Если ЗначениеЗаполнено(ОбъектАвторизации) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.ВсеОбъектыАвторизации
		|	И ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователей.ТипОбъектовАвторизации) = &ТипОбъектовАвторизации");
		Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипЗнч(ОбъектАвторизации));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(Выборка.Ссылка, ИзмененныеВнешниеПользователи);
			ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи);
		КонецЕсли;
	КонецЕсли;
	
	// Обновление состава группы нового внешнего пользователя (если задана).
	Если ДополнительныеСвойства.Свойство("ГруппаНовогоВнешнегоПользователя") И
	     ЗначениеЗаполнено(ДополнительныеСвойства.ГруппаНовогоВнешнегоПользователя) Тогда
		
		ОбъектГруппы = ДополнительныеСвойства.ГруппаНовогоВнешнегоПользователя.ПолучитьОбъект();
		ОбъектГруппы.Состав.Добавить().ВнешнийПользователь = Ссылка;
		ОбъектГруппы.Записать();
		ВнешниеПользователи.ОбновитьСоставГруппВнешнихПользователей(ОбъектГруппы.Ссылка, ИзмененныеВнешниеПользователи);
		ВнешниеПользователи.ОбновитьРолиВнешнихПользователей(ИзмененныеВнешниеПользователи);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	// Требуется удалить пользователя ИБ, иначе он попадет в список ошибок в форме ПользователиИБ,
	// кроме того, вход под этим пользователем ИБ приведет к ошибке.
	Если Пользователи.ПользовательИБСуществует(ИдентификаторПользователяИБ) Тогда
		
		Отказ = НЕ Пользователи.УдалитьПользователяИБ(ИдентификаторПользователяИБ);
	КонецЕсли;
	
	// Проверку ОбменДанными.Загрузка следует выполнять начиная с этой строки.
	
КонецПроцедуры

